// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AppDeploymentHistory
 */
export interface AppDeploymentHistory {
    /**
     *
     * @type {Application}
     * @memberof AppDeploymentHistory
     */
    application?: Application;
    /**
     *
     * @type {string}
     * @memberof AppDeploymentHistory
     */
    branchName?: string;
    /**
     *
     * @type {string}
     * @memberof AppDeploymentHistory
     */
    commitSha?: string;
    /**
     *
     * @type {string}
     * @memberof AppDeploymentHistory
     */
    createdBy?: string;
    /**
     *
     * @type {Date}
     * @memberof AppDeploymentHistory
     */
    createdDate?: Date;
    /**
     *
     * @type {number}
     * @memberof AppDeploymentHistory
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof AppDeploymentHistory
     */
    stage?: string;
}
/**
 *
 * @export
 * @interface Application
 */
export interface Application {
    /**
     *
     * @type {Array<ProductBacking>}
     * @memberof Application
     */
    applicationBackings?: Array<ProductBacking>;
    /**
     *
     * @type {Array<Application>}
     * @memberof Application
     */
    applicationDependencies?: Array<Application>;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    buildCommand?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    copyResources?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    description?: string;
    /**
     *
     * @type {Array<ExternalService>}
     * @memberof Application
     */
    externalServiceDependencies?: Array<ExternalService>;
    /**
     *
     * @type {number}
     * @memberof Application
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    limitCpu?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    limitMemory?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof Application
     */
    port?: number;
    /**
     *
     * @type {Product}
     * @memberof Application
     */
    product?: Product;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    publishType?: ApplicationPublishTypeEnum;
    /**
     *
     * @type {number}
     * @memberof Application
     */
    replicas?: number;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    repository?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    requestsCpu?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    requestsMemory?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    runCommand?: string;
    /**
     *
     * @type {boolean}
     * @memberof Application
     */
    service?: boolean;
    /**
     *
     * @type {Array<Application>}
     * @memberof Application
     */
    serviceDependencies?: Array<Application>;
    /**
     *
     * @type {number}
     * @memberof Application
     */
    staticPictureId?: number;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    type?: ApplicationTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ApplicationPublishTypeEnum {
    App = 'app',
    Lib = 'lib'
}
/**
 * @export
 * @enum {string}
 */
export enum ApplicationTypeEnum {
    Go = 'go',
    Hugo = 'hugo',
    Java = 'java',
    Java11 = 'java11',
    Nginx = 'nginx',
    Node8 = 'node8',
    Node = 'node',
    Node10 = 'node10',
    Python = 'python'
}

/**
 *
 * @export
 * @interface ApplicationDTO
 */
export interface ApplicationDTO {
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    applicationAvailability?: string;
    /**
     *
     * @type {Array<ProductBacking>}
     * @memberof ApplicationDTO
     */
    applicationBackings?: Array<ProductBacking>;
    /**
     *
     * @type {Array<ApplicationIdDTO>}
     * @memberof ApplicationDTO
     */
    applicationDependencies?: Array<ApplicationIdDTO>;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    buildCommand?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    copyResources?: string;
    /**
     *
     * @type {Array<DeployableGitBranch>}
     * @memberof ApplicationDTO
     */
    deployableGitBranches?: Array<DeployableGitBranch>;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    description?: string;
    /**
     *
     * @type {Array<ExternalService>}
     * @memberof ApplicationDTO
     */
    externalServiceDependencies?: Array<ExternalService>;
    /**
     *
     * @type {number}
     * @memberof ApplicationDTO
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    limitCpu?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    limitMemory?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof ApplicationDTO
     */
    port?: number;
    /**
     *
     * @type {Product}
     * @memberof ApplicationDTO
     */
    product?: Product;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    publishType?: ApplicationDTOPublishTypeEnum;
    /**
     *
     * @type {number}
     * @memberof ApplicationDTO
     */
    replicas?: number;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    repository?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    requestsCpu?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    requestsMemory?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    runCommand?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApplicationDTO
     */
    service?: boolean;
    /**
     *
     * @type {Array<ApplicationIdDTO>}
     * @memberof ApplicationDTO
     */
    serviceDependencies?: Array<ApplicationIdDTO>;
    /**
     *
     * @type {boolean}
     * @memberof ApplicationDTO
     */
    sslEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof ApplicationDTO
     */
    staticPictureId?: number;
    /**
     *
     * @type {string}
     * @memberof ApplicationDTO
     */
    type?: ApplicationDTOTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ApplicationDTOPublishTypeEnum {
    App = 'app',
    Lib = 'lib'
}
/**
 * @export
 * @enum {string}
 */
export enum ApplicationDTOTypeEnum {
    Go = 'go',
    Hugo = 'hugo',
    Java = 'java',
    Java11 = 'java11',
    Nginx = 'nginx',
    Node8 = 'node8',
    Node = 'node',
    Node10 = 'node10',
    Python = 'python'
}

/**
 *
 * @export
 * @interface ApplicationIdDTO
 */
export interface ApplicationIdDTO {
    /**
     *
     * @type {number}
     * @memberof ApplicationIdDTO
     */
    id?: number;
}
/**
 *
 * @export
 * @interface ApplicationNotification
 */
export interface ApplicationNotification {
    /**
     *
     * @type {string}
     * @memberof ApplicationNotification
     */
    channel?: ApplicationNotificationChannelEnum;
    /**
     *
     * @type {number}
     * @memberof ApplicationNotification
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ApplicationNotification
     */
    value?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ApplicationNotificationChannelEnum {
    ROCKETCHAT = 'ROCKET_CHAT'
}

/**
 *
 * @export
 * @interface ApplicationProperty
 */
export interface ApplicationProperty {
    /**
     *
     * @type {Application}
     * @memberof ApplicationProperty
     */
    application?: Application;
    /**
     *
     * @type {number}
     * @memberof ApplicationProperty
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ApplicationProperty
     */
    key?: ApplicationPropertyKeyEnum;
    /**
     *
     * @type {string}
     * @memberof ApplicationProperty
     */
    value?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ApplicationPropertyKeyEnum {
    MATURITYLEVEL = 'MATURITY_LEVEL',
    AVAILABILITY = 'AVAILABILITY',
    SSLENABLED = 'SSL_ENABLED'
}

/**
 *
 * @export
 * @interface AuditEvent
 */
export interface AuditEvent {
    /**
     *
     * @type {object}
     * @memberof AuditEvent
     */
    data?: object;
    /**
     *
     * @type {string}
     * @memberof AuditEvent
     */
    principal?: string;
    /**
     *
     * @type {Date}
     * @memberof AuditEvent
     */
    timestamp?: Date;
    /**
     *
     * @type {string}
     * @memberof AuditEvent
     */
    type?: string;
}
/**
 *
 * @export
 * @interface Backing
 */
export interface Backing {
    /**
     *
     * @type {string}
     * @memberof Backing
     */
    backingType?: string;
    /**
     *
     * @type {string}
     * @memberof Backing
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Backing
     */
    family?: string;
    /**
     *
     * @type {number}
     * @memberof Backing
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Backing
     */
    logo?: string;
    /**
     *
     * @type {number}
     * @memberof Backing
     */
    staticPictureId?: number;
}
/**
 *
 * @export
 * @interface Billing
 */
export interface Billing {
    /**
     *
     * @type {string}
     * @memberof Billing
     */
    costCenter?: string;
    /**
     *
     * @type {number}
     * @memberof Billing
     */
    id?: number;
}
/**
 *
 * @export
 * @interface Budget
 */
export interface Budget {
    /**
     *
     * @type {number}
     * @memberof Budget
     */
    budget?: number;
    /**
     *
     * @type {number}
     * @memberof Budget
     */
    financialYear?: number;
    /**
     *
     * @type {number}
     * @memberof Budget
     */
    id?: number;
}
/**
 *
 * @export
 * @interface BudgetDTO
 */
export interface BudgetDTO {
    /**
     *
     * @type {number}
     * @memberof BudgetDTO
     */
    budget?: number;
    /**
     *
     * @type {number}
     * @memberof BudgetDTO
     */
    financialYear?: number;
    /**
     *
     * @type {number}
     * @memberof BudgetDTO
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof BudgetDTO
     */
    productId?: number;
}
/**
 *
 * @export
 * @interface BudgetNotification
 */
export interface BudgetNotification {
    /**
     *
     * @type {Budget}
     * @memberof BudgetNotification
     */
    budget?: Budget;
    /**
     *
     * @type {string}
     * @memberof BudgetNotification
     */
    budgetNotificationStatus?: BudgetNotificationBudgetNotificationStatusEnum;
    /**
     *
     * @type {string}
     * @memberof BudgetNotification
     */
    budgetNotificationType?: BudgetNotificationBudgetNotificationTypeEnum;
    /**
     *
     * @type {number}
     * @memberof BudgetNotification
     */
    id?: number;
    /**
     *
     * @type {Product}
     * @memberof BudgetNotification
     */
    product?: Product;
    /**
     *
     * @type {number}
     * @memberof BudgetNotification
     */
    triggerPercent?: number;
    /**
     *
     * @type {User}
     * @memberof BudgetNotification
     */
    user?: User;
}

/**
 * @export
 * @enum {string}
 */
export enum BudgetNotificationBudgetNotificationStatusEnum {
    FIRED = 'FIRED',
    NOTFIRED = 'NOT_FIRED',
    ERROR = 'ERROR'
}
/**
 * @export
 * @enum {string}
 */
export enum BudgetNotificationBudgetNotificationTypeEnum {
    MAIL = 'MAIL'
}

/**
 *
 * @export
 * @interface BudgetSpentDTO
 */
export interface BudgetSpentDTO {
    /**
     *
     * @type {number}
     * @memberof BudgetSpentDTO
     */
    budget?: number;
    /**
     *
     * @type {number}
     * @memberof BudgetSpentDTO
     */
    financialYear?: number;
    /**
     *
     * @type {number}
     * @memberof BudgetSpentDTO
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof BudgetSpentDTO
     */
    productId?: number;
    /**
     *
     * @type {number}
     * @memberof BudgetSpentDTO
     */
    spentBudget?: number;
}
/**
 *
 * @export
 * @interface Build
 */
export interface Build {
    /**
     *
     * @type {string}
     * @memberof Build
     */
    branchName?: string;
    /**
     *
     * @type {string}
     * @memberof Build
     */
    buildId?: string;
    /**
     *
     * @type {Date}
     * @memberof Build
     */
    createTime?: Date;
    /**
     *
     * @type {Date}
     * @memberof Build
     */
    finishTime?: Date;
    /**
     *
     * @type {string}
     * @memberof Build
     */
    logBucket?: string;
    /**
     *
     * @type {string}
     * @memberof Build
     */
    projectId?: string;
    /**
     *
     * @type {Date}
     * @memberof Build
     */
    startTime?: Date;
    /**
     *
     * @type {string}
     * @memberof Build
     */
    status?: BuildStatusEnum;
    /**
     *
     * @type {string}
     * @memberof Build
     */
    statusDetail?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum BuildStatusEnum {
    STATUSUNKNOWN = 'STATUS_UNKNOWN',
    QUEUED = 'QUEUED',
    WORKING = 'WORKING',
    SUCCESS = 'SUCCESS',
    FAILURE = 'FAILURE',
    INTERNALERROR = 'INTERNAL_ERROR',
    TIMEOUT = 'TIMEOUT',
    CANCELLED = 'CANCELLED'
}

/**
 *
 * @export
 * @interface BuildPreview
 */
export interface BuildPreview {
    /**
     *
     * @type {string}
     * @memberof BuildPreview
     */
    branchName?: string;
    /**
     *
     * @type {string}
     * @memberof BuildPreview
     */
    buildId?: string;
    /**
     *
     * @type {string}
     * @memberof BuildPreview
     */
    commitSha?: string;
    /**
     *
     * @type {string}
     * @memberof BuildPreview
     */
    projectId?: string;
    /**
     *
     * @type {number}
     * @memberof BuildPreview
     */
    runTime?: number;
    /**
     *
     * @type {string}
     * @memberof BuildPreview
     */
    status?: BuildPreviewStatusEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum BuildPreviewStatusEnum {
    STATUSUNKNOWN = 'STATUS_UNKNOWN',
    QUEUED = 'QUEUED',
    WORKING = 'WORKING',
    SUCCESS = 'SUCCESS',
    FAILURE = 'FAILURE',
    INTERNALERROR = 'INTERNAL_ERROR',
    TIMEOUT = 'TIMEOUT',
    CANCELLED = 'CANCELLED'
}

/**
 *
 * @export
 * @interface BuildPreviewList
 */
export interface BuildPreviewList {
    /**
     *
     * @type {Array<BuildPreview>}
     * @memberof BuildPreviewList
     */
    buildPreviews?: Array<BuildPreview>;
    /**
     *
     * @type {string}
     * @memberof BuildPreviewList
     */
    nextPageToken?: string;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     *
     * @type {number}
     * @memberof Customer
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    name?: string;
}
/**
 *
 * @export
 * @interface DefaultExternalTool
 */
export interface DefaultExternalTool {
    /**
     *
     * @type {number}
     * @memberof DefaultExternalTool
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof DefaultExternalTool
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof DefaultExternalTool
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof DefaultExternalTool
     */
    staticPictureId?: number;
    /**
     *
     * @type {string}
     * @memberof DefaultExternalTool
     */
    url?: string;
}
/**
 *
 * @export
 * @interface DeployableGitBranch
 */
export interface DeployableGitBranch {
    /**
     *
     * @type {string}
     * @memberof DeployableGitBranch
     */
    branchName?: string;
    /**
     *
     * @type {string}
     * @memberof DeployableGitBranch
     */
    commitSha?: string;
    /**
     *
     * @type {number}
     * @memberof DeployableGitBranch
     */
    id?: number;
}
/**
 *
 * @export
 * @interface DeployableGitBranchDTO
 */
export interface DeployableGitBranchDTO {
    /**
     *
     * @type {string}
     * @memberof DeployableGitBranchDTO
     */
    branchName?: string;
    /**
     *
     * @type {string}
     * @memberof DeployableGitBranchDTO
     */
    commitSha?: string;
    /**
     *
     * @type {Date}
     * @memberof DeployableGitBranchDTO
     */
    createdTime?: Date;
}
/**
 *
 * @export
 * @interface DeploymentStage
 */
export interface DeploymentStage {
    /**
     *
     * @type {Customer}
     * @memberof DeploymentStage
     */
    customer?: Customer;
    /**
     *
     * @type {string}
     * @memberof DeploymentStage
     */
    googleRegion?: string;
    /**
     *
     * @type {number}
     * @memberof DeploymentStage
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof DeploymentStage
     */
    name?: string;
}
/**
 *
 * @export
 * @interface DeploymentZone
 */
export interface DeploymentZone {
    /**
     *
     * @type {number}
     * @memberof DeploymentZone
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof DeploymentZone
     */
    name?: string;
}
/**
 *
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     *
     * @type {number}
     * @memberof Domain
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Domain
     */
    name?: string;
}
/**
 *
 * @export
 * @interface EntityPermission
 */
export interface EntityPermission {
    /**
     *
     * @type {number}
     * @memberof EntityPermission
     */
    entityId?: number;
    /**
     *
     * @type {string}
     * @memberof EntityPermission
     */
    entityType?: EntityPermissionEntityTypeEnum;
    /**
     *
     * @type {number}
     * @memberof EntityPermission
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof EntityPermission
     */
    permissionType?: EntityPermissionPermissionTypeEnum;
    /**
     *
     * @type {Role}
     * @memberof EntityPermission
     */
    role?: Role;
}

/**
 * @export
 * @enum {string}
 */
export enum EntityPermissionEntityTypeEnum {
    APPLICATION = 'APPLICATION',
    PRODUCT = 'PRODUCT',
    CUSTOMER = 'CUSTOMER',
    SERVICESECTION = 'SERVICE_SECTION',
    DOMAIN = 'DOMAIN'
}
/**
 * @export
 * @enum {string}
 */
export enum EntityPermissionPermissionTypeEnum {
    WRITE = 'WRITE',
    READ = 'READ'
}

/**
 *
 * @export
 * @interface ExternalService
 */
export interface ExternalService {
    /**
     *
     * @type {DeploymentStage}
     * @memberof ExternalService
     */
    deploymentStage?: DeploymentStage;
    /**
     *
     * @type {string}
     * @memberof ExternalService
     */
    description?: string;
    /**
     *
     * @type {Array<ExternalServiceProperty>}
     * @memberof ExternalService
     */
    externalServiceProperties?: Array<ExternalServiceProperty>;
    /**
     *
     * @type {number}
     * @memberof ExternalService
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ExternalService
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ExternalServiceProperty
 */
export interface ExternalServiceProperty {
    /**
     *
     * @type {string}
     * @memberof ExternalServiceProperty
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ExternalServiceProperty
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ExternalServiceProperty
     */
    name?: ExternalServicePropertyNameEnum;
    /**
     *
     * @type {string}
     * @memberof ExternalServiceProperty
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalServiceProperty
     */
    valueType?: ExternalServicePropertyValueTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ExternalServicePropertyNameEnum {
    TARGET = 'TARGET',
    PORT = 'PORT'
}
/**
 * @export
 * @enum {string}
 */
export enum ExternalServicePropertyValueTypeEnum {
    INTEGER = 'INTEGER',
    STRING = 'STRING'
}

/**
 *
 * @export
 * @interface ExternalTool
 */
export interface ExternalTool {
    /**
     *
     * @type {number}
     * @memberof ExternalTool
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ExternalTool
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalTool
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof ExternalTool
     */
    staticPictureId?: number;
    /**
     *
     * @type {string}
     * @memberof ExternalTool
     */
    url?: string;
    /**
     *
     * @type {User}
     * @memberof ExternalTool
     */
    user?: User;
}
/**
 *
 * @export
 * @interface GitBranchDTO
 */
export interface GitBranchDTO {
    /**
     *
     * @type {string}
     * @memberof GitBranchDTO
     */
    branchName?: string;
    /**
     *
     * @type {string}
     * @memberof GitBranchDTO
     */
    commitSha?: string;
}
/**
 *
 * @export
 * @interface GoogleBillingResultDTO
 */
export interface GoogleBillingResultDTO {
    /**
     *
     * @type {number}
     * @memberof GoogleBillingResultDTO
     */
    cost?: number;
    /**
     *
     * @type {string}
     * @memberof GoogleBillingResultDTO
     */
    currency?: string;
    /**
     *
     * @type {Date}
     * @memberof GoogleBillingResultDTO
     */
    date?: Date;
    /**
     *
     * @type {string}
     * @memberof GoogleBillingResultDTO
     */
    projectId?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleBillingResultDTO
     */
    resourceType?: string;
}
/**
 *
 * @export
 * @interface GoogleIpRangeDTO
 */
export interface GoogleIpRangeDTO {
    /**
     *
     * @type {string}
     * @memberof GoogleIpRangeDTO
     */
    ipCidrRange?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleIpRangeDTO
     */
    rangeName?: string;
}
/**
 *
 * @export
 * @interface GoogleProductDeploymentStageDTO
 */
export interface GoogleProductDeploymentStageDTO {
    /**
     *
     * @type {string}
     * @memberof GoogleProductDeploymentStageDTO
     */
    customerName?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleProductDeploymentStageDTO
     */
    googleProjectId?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleProductDeploymentStageDTO
     */
    productName?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleProductDeploymentStageDTO
     */
    stageName?: string;
}
/**
 *
 * @export
 * @interface GoogleSubnetDTO
 */
export interface GoogleSubnetDTO {
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    creationTimestamp?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    description?: string;
    /**
     *
     * @type {boolean}
     * @memberof GoogleSubnetDTO
     */
    enableFlowLogs?: boolean;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    fingerprint?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    gatewayAddress?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    ipCidrRange?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    network?: string;
    /**
     *
     * @type {boolean}
     * @memberof GoogleSubnetDTO
     */
    privateIpGoogleAccess?: boolean;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    region?: string;
    /**
     *
     * @type {Array<GoogleIpRangeDTO>}
     * @memberof GoogleSubnetDTO
     */
    secondaryIpRanges?: Array<GoogleIpRangeDTO>;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetDTO
     */
    selfLink?: string;
}
/**
 *
 * @export
 * @interface GoogleSubnetHolderDTO
 */
export interface GoogleSubnetHolderDTO {
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetHolderDTO
     */
    id?: string;
    /**
     *
     * @type {Array<GoogleSubnetDTO>}
     * @memberof GoogleSubnetHolderDTO
     */
    items?: Array<GoogleSubnetDTO>;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetHolderDTO
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof GoogleSubnetHolderDTO
     */
    selfLink?: string;
}
/**
 *
 * @export
 * @interface HelpContent
 */
export interface HelpContent {
    /**
     *
     * @type {string}
     * @memberof HelpContent
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof HelpContent
     */
    key?: string;
}
/**
 *
 * @export
 * @interface JWTToken
 */
export interface JWTToken {
    /**
     *
     * @type {string}
     * @memberof JWTToken
     */
    idToken?: string;
}
/**
 *
 * @export
 * @interface KeyAndPasswordVM
 */
export interface KeyAndPasswordVM {
    /**
     *
     * @type {string}
     * @memberof KeyAndPasswordVM
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof KeyAndPasswordVM
     */
    newPassword?: string;
}
/**
 *
 * @export
 * @interface LightApplicationDTO
 */
export interface LightApplicationDTO {
    /**
     *
     * @type {number}
     * @memberof LightApplicationDTO
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof LightApplicationDTO
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof LightApplicationDTO
     */
    service?: boolean;
    /**
     *
     * @type {number}
     * @memberof LightApplicationDTO
     */
    staticPictureId?: number;
}
/**
 *
 * @export
 * @interface LightProductDTO
 */
export interface LightProductDTO {
    /**
     *
     * @type {number}
     * @memberof LightProductDTO
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof LightProductDTO
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof LightProductDTO
     */
    name?: string;
}
/**
 *
 * @export
 * @interface Link
 */
export interface Link {
    /**
     *
     * @type {string}
     * @memberof Link
     */
    href?: string;
    /**
     *
     * @type {boolean}
     * @memberof Link
     */
    templated?: boolean;
}
/**
 *
 * @export
 * @interface LoggerVM
 */
export interface LoggerVM {
    /**
     *
     * @type {string}
     * @memberof LoggerVM
     */
    level?: string;
    /**
     *
     * @type {string}
     * @memberof LoggerVM
     */
    name?: string;
}
/**
 *
 * @export
 * @interface LoginVM
 */
export interface LoginVM {
    /**
     *
     * @type {string}
     * @memberof LoginVM
     */
    password?: string;
    /**
     *
     * @type {boolean}
     * @memberof LoginVM
     */
    rememberMe?: boolean;
    /**
     *
     * @type {string}
     * @memberof LoginVM
     */
    username?: string;
}
/**
 *
 * @export
 * @interface LongValueVM
 */
export interface LongValueVM {
    /**
     *
     * @type {number}
     * @memberof LongValueVM
     */
    value?: number;
}
/**
 *
 * @export
 * @interface ManagedUserVM
 */
export interface ManagedUserVM {
    /**
     *
     * @type {boolean}
     * @memberof ManagedUserVM
     */
    activated?: boolean;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    createdBy?: string;
    /**
     *
     * @type {Date}
     * @memberof ManagedUserVM
     */
    createdDate?: Date;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    firstName?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedUserVM
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    imageContent?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    langKey?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    lastModifiedBy?: string;
    /**
     *
     * @type {Date}
     * @memberof ManagedUserVM
     */
    lastModifiedDate?: Date;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    login?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedUserVM
     */
    password?: string;
    /**
     *
     * @type {Array<Role>}
     * @memberof ManagedUserVM
     */
    roles?: Array<Role>;
    /**
     *
     * @type {number}
     * @memberof ManagedUserVM
     */
    staticPictureId?: number;
    /**
     *
     * @type {boolean}
     * @memberof ManagedUserVM
     */
    subscribedToNewsletter?: boolean;
}
/**
 *
 * @export
 * @interface ManualDeploymentDTO
 */
export interface ManualDeploymentDTO {
    /**
     *
     * @type {number}
     * @memberof ManualDeploymentDTO
     */
    applicationId?: number;
    /**
     *
     * @type {string}
     * @memberof ManualDeploymentDTO
     */
    branchName?: string;
    /**
     *
     * @type {string}
     * @memberof ManualDeploymentDTO
     */
    commitSha?: string;
    /**
     *
     * @type {string}
     * @memberof ManualDeploymentDTO
     */
    stage?: string;
}
/**
 *
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     *
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     *
     * @type {object}
     * @memberof ModelAndView
     */
    model?: object;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: object };
    /**
     *
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     *
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndViewStatusEnum;
    /**
     *
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     *
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ModelAndViewStatusEnum {
    _100CONTINUE = '100 CONTINUE',
    _101SWITCHINGPROTOCOLS = '101 SWITCHING_PROTOCOLS',
    _102PROCESSING = '102 PROCESSING',
    _103CHECKPOINT = '103 CHECKPOINT',
    _200OK = '200 OK',
    _201CREATED = '201 CREATED',
    _202ACCEPTED = '202 ACCEPTED',
    _203NONAUTHORITATIVEINFORMATION = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NOCONTENT = '204 NO_CONTENT',
    _205RESETCONTENT = '205 RESET_CONTENT',
    _206PARTIALCONTENT = '206 PARTIAL_CONTENT',
    _207MULTISTATUS = '207 MULTI_STATUS',
    _208ALREADYREPORTED = '208 ALREADY_REPORTED',
    _226IMUSED = '226 IM_USED',
    _300MULTIPLECHOICES = '300 MULTIPLE_CHOICES',
    _301MOVEDPERMANENTLY = '301 MOVED_PERMANENTLY',
    _302FOUND = '302 FOUND',
    _302MOVEDTEMPORARILY = '302 MOVED_TEMPORARILY',
    _303SEEOTHER = '303 SEE_OTHER',
    _304NOTMODIFIED = '304 NOT_MODIFIED',
    _305USEPROXY = '305 USE_PROXY',
    _307TEMPORARYREDIRECT = '307 TEMPORARY_REDIRECT',
    _308PERMANENTREDIRECT = '308 PERMANENT_REDIRECT',
    _400BADREQUEST = '400 BAD_REQUEST',
    _401UNAUTHORIZED = '401 UNAUTHORIZED',
    _402PAYMENTREQUIRED = '402 PAYMENT_REQUIRED',
    _403FORBIDDEN = '403 FORBIDDEN',
    _404NOTFOUND = '404 NOT_FOUND',
    _405METHODNOTALLOWED = '405 METHOD_NOT_ALLOWED',
    _406NOTACCEPTABLE = '406 NOT_ACCEPTABLE',
    _407PROXYAUTHENTICATIONREQUIRED = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408REQUESTTIMEOUT = '408 REQUEST_TIMEOUT',
    _409CONFLICT = '409 CONFLICT',
    _410GONE = '410 GONE',
    _411LENGTHREQUIRED = '411 LENGTH_REQUIRED',
    _412PRECONDITIONFAILED = '412 PRECONDITION_FAILED',
    _413PAYLOADTOOLARGE = '413 PAYLOAD_TOO_LARGE',
    _413REQUESTENTITYTOOLARGE = '413 REQUEST_ENTITY_TOO_LARGE',
    _414URITOOLONG = '414 URI_TOO_LONG',
    _414REQUESTURITOOLONG = '414 REQUEST_URI_TOO_LONG',
    _415UNSUPPORTEDMEDIATYPE = '415 UNSUPPORTED_MEDIA_TYPE',
    _416REQUESTEDRANGENOTSATISFIABLE = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417EXPECTATIONFAILED = '417 EXPECTATION_FAILED',
    _418IAMATEAPOT = '418 I_AM_A_TEAPOT',
    _419INSUFFICIENTSPACEONRESOURCE = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420METHODFAILURE = '420 METHOD_FAILURE',
    _421DESTINATIONLOCKED = '421 DESTINATION_LOCKED',
    _422UNPROCESSABLEENTITY = '422 UNPROCESSABLE_ENTITY',
    _423LOCKED = '423 LOCKED',
    _424FAILEDDEPENDENCY = '424 FAILED_DEPENDENCY',
    _426UPGRADEREQUIRED = '426 UPGRADE_REQUIRED',
    _428PRECONDITIONREQUIRED = '428 PRECONDITION_REQUIRED',
    _429TOOMANYREQUESTS = '429 TOO_MANY_REQUESTS',
    _431REQUESTHEADERFIELDSTOOLARGE = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UNAVAILABLEFORLEGALREASONS = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500INTERNALSERVERERROR = '500 INTERNAL_SERVER_ERROR',
    _501NOTIMPLEMENTED = '501 NOT_IMPLEMENTED',
    _502BADGATEWAY = '502 BAD_GATEWAY',
    _503SERVICEUNAVAILABLE = '503 SERVICE_UNAVAILABLE',
    _504GATEWAYTIMEOUT = '504 GATEWAY_TIMEOUT',
    _505HTTPVERSIONNOTSUPPORTED = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VARIANTALSONEGOTIATES = '506 VARIANT_ALSO_NEGOTIATES',
    _507INSUFFICIENTSTORAGE = '507 INSUFFICIENT_STORAGE',
    _508LOOPDETECTED = '508 LOOP_DETECTED',
    _509BANDWIDTHLIMITEXCEEDED = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NOTEXTENDED = '510 NOT_EXTENDED',
    _511NETWORKAUTHENTICATIONREQUIRED = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 *
 * @export
 * @interface ParentFolder
 */
export interface ParentFolder {
    /**
     *
     * @type {number}
     * @memberof ParentFolder
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ParentFolder
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ParentFolderToGoogleIdVM
 */
export interface ParentFolderToGoogleIdVM {
    /**
     *
     * @type {string}
     * @memberof ParentFolderToGoogleIdVM
     */
    folderId?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ParentFolderToGoogleIdVM
     */
    googleIds?: Array<string>;
}
/**
 *
 * @export
 * @interface ParentFolderVM
 */
export interface ParentFolderVM {
    /**
     *
     * @type {number}
     * @memberof ParentFolderVM
     */
    productId?: number;
}
/**
 *
 * @export
 * @interface PasswordChangeDTO
 */
export interface PasswordChangeDTO {
    /**
     *
     * @type {string}
     * @memberof PasswordChangeDTO
     */
    currentPassword?: string;
    /**
     *
     * @type {string}
     * @memberof PasswordChangeDTO
     */
    newPassword?: string;
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
    /**
     *
     * @type {Billing}
     * @memberof Product
     */
    billing?: Billing;
    /**
     *
     * @type {Customer}
     * @memberof Product
     */
    customer?: Customer;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    description?: string;
    /**
     *
     * @type {Domain}
     * @memberof Product
     */
    domain?: Domain;
    /**
     *
     * @type {number}
     * @memberof Product
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    name?: string;
    /**
     *
     * @type {ParentFolder}
     * @memberof Product
     */
    parentFolder?: ParentFolder;
    /**
     *
     * @type {Array<ProductBacking>}
     * @memberof Product
     */
    productBackings?: Array<ProductBacking>;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    status?: string;
}
/**
 *
 * @export
 * @interface ProductBacking
 */
export interface ProductBacking {
    /**
     *
     * @type {Backing}
     * @memberof ProductBacking
     */
    backing?: Backing;
    /**
     *
     * @type {DeploymentStage}
     * @memberof ProductBacking
     */
    deploymentStage?: DeploymentStage;
    /**
     *
     * @type {number}
     * @memberof ProductBacking
     */
    id?: number;
    /**
     *
     * @type {Array<ProductBackingProperty>}
     * @memberof ProductBacking
     */
    productBackingProperties?: Array<ProductBackingProperty>;
    /**
     *
     * @type {string}
     * @memberof ProductBacking
     */
    tag?: string;
}
/**
 *
 * @export
 * @interface ProductBackingProperty
 */
export interface ProductBackingProperty {
    /**
     *
     * @type {number}
     * @memberof ProductBackingProperty
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ProductBackingProperty
     */
    key?: ProductBackingPropertyKeyEnum;
    /**
     *
     * @type {string}
     * @memberof ProductBackingProperty
     */
    value?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ProductBackingPropertyKeyEnum {
    SIZE = 'STORAGE_SIZE',
    TYPE = 'STORAGE_TYPE'
}

/**
 *
 * @export
 * @interface ProductDeploymentStage
 */
export interface ProductDeploymentStage {
    /**
     *
     * @type {Array<DeploymentZone>}
     * @memberof ProductDeploymentStage
     */
    deploymentZones?: Array<DeploymentZone>;
    /**
     *
     * @type {boolean}
     * @memberof ProductDeploymentStage
     */
    enabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProductDeploymentStage
     */
    googleProjectId?: string;
    /**
     *
     * @type {number}
     * @memberof ProductDeploymentStage
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ProductDeploymentStage
     */
    machineType?: ProductDeploymentStageMachineTypeEnum;
    /**
     *
     * @type {number}
     * @memberof ProductDeploymentStage
     */
    maxK8sNodeCount?: number;
    /**
     *
     * @type {number}
     * @memberof ProductDeploymentStage
     */
    minK8sNodeCount?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProductDeploymentStage
     */
    preemptible?: boolean;
    /**
     *
     * @type {Product}
     * @memberof ProductDeploymentStage
     */
    product?: Product;
    /**
     *
     * @type {DeploymentStage}
     * @memberof ProductDeploymentStage
     */
    stage?: DeploymentStage;
    /**
     *
     * @type {Subnet}
     * @memberof ProductDeploymentStage
     */
    subnet?: Subnet;
}

/**
 * @export
 * @enum {string}
 */
export enum ProductDeploymentStageMachineTypeEnum {
    Mini = 'mini',
    Standard = 'standard',
    Highperf = 'highperf'
}

/**
 *
 * @export
 * @interface ProductDeploymentStageExcludeProductDTO
 */
export interface ProductDeploymentStageExcludeProductDTO {
    /**
     *
     * @type {Array<DeploymentZone>}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    deploymentZones?: Array<DeploymentZone>;
    /**
     *
     * @type {boolean}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    enabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    googleProjectId?: string;
    /**
     *
     * @type {number}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    machineType?: ProductDeploymentStageExcludeProductDTOMachineTypeEnum;
    /**
     *
     * @type {number}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    maxK8sNodeCount?: number;
    /**
     *
     * @type {number}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    minK8sNodeCount?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    preemptible?: boolean;
    /**
     *
     * @type {DeploymentStage}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    stage?: DeploymentStage;
    /**
     *
     * @type {Subnet}
     * @memberof ProductDeploymentStageExcludeProductDTO
     */
    subnet?: Subnet;
}

/**
 * @export
 * @enum {string}
 */
export enum ProductDeploymentStageExcludeProductDTOMachineTypeEnum {
    Mini = 'mini',
    Standard = 'standard',
    Highperf = 'highperf'
}

/**
 *
 * @export
 * @interface ProductExternalTool
 */
export interface ProductExternalTool {
    /**
     *
     * @type {number}
     * @memberof ProductExternalTool
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ProductExternalTool
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ProductExternalTool
     */
    name?: string;
    /**
     *
     * @type {Product}
     * @memberof ProductExternalTool
     */
    product?: Product;
    /**
     *
     * @type {number}
     * @memberof ProductExternalTool
     */
    staticPictureId?: number;
    /**
     *
     * @type {string}
     * @memberof ProductExternalTool
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ProductRegistryApplication
 */
export interface ProductRegistryApplication {
    /**
     *
     * @type {string}
     * @memberof ProductRegistryApplication
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryApplication
     */
    repository?: string;
}
/**
 *
 * @export
 * @interface ProductRegistryBacking
 */
export interface ProductRegistryBacking {
    /**
     *
     * @type {string}
     * @memberof ProductRegistryBacking
     */
    family?: string;
    /**
     *
     * @type {Array<ProductBackingProperty>}
     * @memberof ProductRegistryBacking
     */
    properties?: Array<ProductBackingProperty>;
    /**
     *
     * @type {DeploymentStage}
     * @memberof ProductRegistryBacking
     */
    stage?: DeploymentStage;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryBacking
     */
    tag?: string;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryBacking
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ProductRegistryEntry
 */
export interface ProductRegistryEntry {
    /**
     *
     * @type {Array<ProductRegistryApplication>}
     * @memberof ProductRegistryEntry
     */
    applications?: Array<ProductRegistryApplication>;
    /**
     *
     * @type {Array<ProductRegistryBacking>}
     * @memberof ProductRegistryEntry
     */
    backings?: Array<ProductRegistryBacking>;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryEntry
     */
    costCenter?: string;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryEntry
     */
    customer?: string;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryEntry
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryEntry
     */
    name?: string;
    /**
     *
     * @type {ParentFolder}
     * @memberof ProductRegistryEntry
     */
    parentFolder?: ParentFolder;
    /**
     *
     * @type {Array<ProductDeploymentStageExcludeProductDTO>}
     * @memberof ProductRegistryEntry
     */
    productDeploymentStages?: Array<ProductDeploymentStageExcludeProductDTO>;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryEntry
     */
    status?: string;
    /**
     *
     * @type {Array<ProductRegistryTeam>}
     * @memberof ProductRegistryEntry
     */
    team?: Array<ProductRegistryTeam>;
}
/**
 *
 * @export
 * @interface ProductRegistryTeam
 */
export interface ProductRegistryTeam {
    /**
     *
     * @type {string}
     * @memberof ProductRegistryTeam
     */
    gid?: string;
    /**
     *
     * @type {string}
     * @memberof ProductRegistryTeam
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ResponseEntity
 */
export interface ResponseEntity {
    /**
     *
     * @type {object}
     * @memberof ResponseEntity
     */
    body?: object;
    /**
     *
     * @type {string}
     * @memberof ResponseEntity
     */
    statusCode?: ResponseEntityStatusCodeEnum;
    /**
     *
     * @type {number}
     * @memberof ResponseEntity
     */
    statusCodeValue?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum ResponseEntityStatusCodeEnum {
    _100CONTINUE = '100 CONTINUE',
    _101SWITCHINGPROTOCOLS = '101 SWITCHING_PROTOCOLS',
    _102PROCESSING = '102 PROCESSING',
    _103CHECKPOINT = '103 CHECKPOINT',
    _200OK = '200 OK',
    _201CREATED = '201 CREATED',
    _202ACCEPTED = '202 ACCEPTED',
    _203NONAUTHORITATIVEINFORMATION = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NOCONTENT = '204 NO_CONTENT',
    _205RESETCONTENT = '205 RESET_CONTENT',
    _206PARTIALCONTENT = '206 PARTIAL_CONTENT',
    _207MULTISTATUS = '207 MULTI_STATUS',
    _208ALREADYREPORTED = '208 ALREADY_REPORTED',
    _226IMUSED = '226 IM_USED',
    _300MULTIPLECHOICES = '300 MULTIPLE_CHOICES',
    _301MOVEDPERMANENTLY = '301 MOVED_PERMANENTLY',
    _302FOUND = '302 FOUND',
    _302MOVEDTEMPORARILY = '302 MOVED_TEMPORARILY',
    _303SEEOTHER = '303 SEE_OTHER',
    _304NOTMODIFIED = '304 NOT_MODIFIED',
    _305USEPROXY = '305 USE_PROXY',
    _307TEMPORARYREDIRECT = '307 TEMPORARY_REDIRECT',
    _308PERMANENTREDIRECT = '308 PERMANENT_REDIRECT',
    _400BADREQUEST = '400 BAD_REQUEST',
    _401UNAUTHORIZED = '401 UNAUTHORIZED',
    _402PAYMENTREQUIRED = '402 PAYMENT_REQUIRED',
    _403FORBIDDEN = '403 FORBIDDEN',
    _404NOTFOUND = '404 NOT_FOUND',
    _405METHODNOTALLOWED = '405 METHOD_NOT_ALLOWED',
    _406NOTACCEPTABLE = '406 NOT_ACCEPTABLE',
    _407PROXYAUTHENTICATIONREQUIRED = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408REQUESTTIMEOUT = '408 REQUEST_TIMEOUT',
    _409CONFLICT = '409 CONFLICT',
    _410GONE = '410 GONE',
    _411LENGTHREQUIRED = '411 LENGTH_REQUIRED',
    _412PRECONDITIONFAILED = '412 PRECONDITION_FAILED',
    _413PAYLOADTOOLARGE = '413 PAYLOAD_TOO_LARGE',
    _413REQUESTENTITYTOOLARGE = '413 REQUEST_ENTITY_TOO_LARGE',
    _414URITOOLONG = '414 URI_TOO_LONG',
    _414REQUESTURITOOLONG = '414 REQUEST_URI_TOO_LONG',
    _415UNSUPPORTEDMEDIATYPE = '415 UNSUPPORTED_MEDIA_TYPE',
    _416REQUESTEDRANGENOTSATISFIABLE = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417EXPECTATIONFAILED = '417 EXPECTATION_FAILED',
    _418IAMATEAPOT = '418 I_AM_A_TEAPOT',
    _419INSUFFICIENTSPACEONRESOURCE = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420METHODFAILURE = '420 METHOD_FAILURE',
    _421DESTINATIONLOCKED = '421 DESTINATION_LOCKED',
    _422UNPROCESSABLEENTITY = '422 UNPROCESSABLE_ENTITY',
    _423LOCKED = '423 LOCKED',
    _424FAILEDDEPENDENCY = '424 FAILED_DEPENDENCY',
    _426UPGRADEREQUIRED = '426 UPGRADE_REQUIRED',
    _428PRECONDITIONREQUIRED = '428 PRECONDITION_REQUIRED',
    _429TOOMANYREQUESTS = '429 TOO_MANY_REQUESTS',
    _431REQUESTHEADERFIELDSTOOLARGE = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UNAVAILABLEFORLEGALREASONS = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500INTERNALSERVERERROR = '500 INTERNAL_SERVER_ERROR',
    _501NOTIMPLEMENTED = '501 NOT_IMPLEMENTED',
    _502BADGATEWAY = '502 BAD_GATEWAY',
    _503SERVICEUNAVAILABLE = '503 SERVICE_UNAVAILABLE',
    _504GATEWAYTIMEOUT = '504 GATEWAY_TIMEOUT',
    _505HTTPVERSIONNOTSUPPORTED = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VARIANTALSONEGOTIATES = '506 VARIANT_ALSO_NEGOTIATES',
    _507INSUFFICIENTSTORAGE = '507 INSUFFICIENT_STORAGE',
    _508LOOPDETECTED = '508 LOOP_DETECTED',
    _509BANDWIDTHLIMITEXCEEDED = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NOTEXTENDED = '510 NOT_EXTENDED',
    _511NETWORKAUTHENTICATIONREQUIRED = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 *
 * @export
 * @interface Role
 */
export interface Role {
    /**
     *
     * @type {number}
     * @memberof Role
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof Role
     */
    readOnly?: boolean;
}
/**
 *
 * @export
 * @interface ServiceImplementation
 */
export interface ServiceImplementation {
    /**
     *
     * @type {string}
     * @memberof ServiceImplementation
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ServiceImplementation
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceImplementation
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceImplementation
     */
    name?: string;
    /**
     *
     * @type {ServiceSection}
     * @memberof ServiceImplementation
     */
    serviceSection?: ServiceSection;
    /**
     *
     * @type {number}
     * @memberof ServiceImplementation
     */
    staticPictureId?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceImplementation
     */
    url?: string;
}
/**
 *
 * @export
 * @interface ServiceSection
 */
export interface ServiceSection {
    /**
     *
     * @type {number}
     * @memberof ServiceSection
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceSection
     */
    name?: string;
}
/**
 *
 * @export
 * @interface StringValueVM
 */
export interface StringValueVM {
    /**
     *
     * @type {string}
     * @memberof StringValueVM
     */
    value?: string;
}
/**
 *
 * @export
 * @interface Subnet
 */
export interface Subnet {
    /**
     *
     * @type {number}
     * @memberof Subnet
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    name?: string;
}
/**
 *
 * @export
 * @interface Team
 */
export interface Team {
    /**
     *
     * @type {number}
     * @memberof Team
     */
    id?: number;
    /**
     *
     * @type {User}
     * @memberof Team
     */
    productOwner?: User;
    /**
     *
     * @type {Array<User>}
     * @memberof Team
     */
    teamMembers?: Array<User>;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    activated?: boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     *
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    langKey?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    login?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    logo?: string;
    /**
     *
     * @type {Date}
     * @memberof User
     */
    resetDate?: Date;
    /**
     *
     * @type {Array<Role>}
     * @memberof User
     */
    roles?: Array<Role>;
    /**
     *
     * @type {number}
     * @memberof User
     */
    staticPictureId?: number;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    subscribedToNewsletter?: boolean;
}
/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     *
     * @type {boolean}
     * @memberof UserDTO
     */
    activated?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    createdBy?: string;
    /**
     *
     * @type {Date}
     * @memberof UserDTO
     */
    createdDate?: Date;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    firstName?: string;
    /**
     *
     * @type {number}
     * @memberof UserDTO
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    imageContent?: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    langKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    lastModifiedBy?: string;
    /**
     *
     * @type {Date}
     * @memberof UserDTO
     */
    lastModifiedDate?: Date;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    login?: string;
    /**
     *
     * @type {Array<Role>}
     * @memberof UserDTO
     */
    roles?: Array<Role>;
    /**
     *
     * @type {number}
     * @memberof UserDTO
     */
    staticPictureId?: number;
    /**
     *
     * @type {boolean}
     * @memberof UserDTO
     */
    subscribedToNewsletter?: boolean;
}
/**
 *
 * @export
 * @interface View
 */
export interface View {
    /**
     *
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}

/**
 * AccountResourceApi - axios parameter creator
 * @export
 */
export const AccountResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary activateAccount
         * @param {string} key key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateAccountUsingGET(key: string, options: any = {}): RequestArgs {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError(
                    'key',
                    'Required parameter key was null or undefined when calling activateAccountUsingGET.'
                );
            }
            const localVarPath = `/api/activate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary changePassword
         * @param {PasswordChangeDTO} passwordChangeDto passwordChangeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST(passwordChangeDto: PasswordChangeDTO, options: any = {}): RequestArgs {
            // verify required parameter 'passwordChangeDto' is not null or undefined
            if (passwordChangeDto === null || passwordChangeDto === undefined) {
                throw new RequiredError(
                    'passwordChangeDto',
                    'Required parameter passwordChangeDto was null or undefined when calling changePasswordUsingPOST.'
                );
            }
            const localVarPath = `/api/account/change-password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'PasswordChangeDTO' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(passwordChangeDto !== undefined ? passwordChangeDto : {})
                : passwordChangeDto || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary finishPasswordReset
         * @param {KeyAndPasswordVM} keyAndPassword keyAndPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishPasswordResetUsingPOST(keyAndPassword: KeyAndPasswordVM, options: any = {}): RequestArgs {
            // verify required parameter 'keyAndPassword' is not null or undefined
            if (keyAndPassword === null || keyAndPassword === undefined) {
                throw new RequiredError(
                    'keyAndPassword',
                    'Required parameter keyAndPassword was null or undefined when calling finishPasswordResetUsingPOST.'
                );
            }
            const localVarPath = `/api/account/reset-password/finish`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'KeyAndPasswordVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(keyAndPassword !== undefined ? keyAndPassword : {})
                : keyAndPassword || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary isAuthenticated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAuthenticatedUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/authenticate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary registerAccount
         * @param {ManagedUserVM} managedUserVM managedUserVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountUsingPOST(managedUserVM: ManagedUserVM, options: any = {}): RequestArgs {
            // verify required parameter 'managedUserVM' is not null or undefined
            if (managedUserVM === null || managedUserVM === undefined) {
                throw new RequiredError(
                    'managedUserVM',
                    'Required parameter managedUserVM was null or undefined when calling registerAccountUsingPOST.'
                );
            }
            const localVarPath = `/api/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ManagedUserVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(managedUserVM !== undefined ? managedUserVM : {})
                : managedUserVM || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary requestPasswordReset
         * @param {string} mail mail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordResetUsingPOST(mail: string, options: any = {}): RequestArgs {
            // verify required parameter 'mail' is not null or undefined
            if (mail === null || mail === undefined) {
                throw new RequiredError(
                    'mail',
                    'Required parameter mail was null or undefined when calling requestPasswordResetUsingPOST.'
                );
            }
            const localVarPath = `/api/account/reset-password/init`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'string' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(mail !== undefined ? mail : {})
                : mail || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary saveAccount
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountUsingPOST(userDTO: UserDTO, options: any = {}): RequestArgs {
            // verify required parameter 'userDTO' is not null or undefined
            if (userDTO === null || userDTO === undefined) {
                throw new RequiredError(
                    'userDTO',
                    'Required parameter userDTO was null or undefined when calling saveAccountUsingPOST.'
                );
            }
            const localVarPath = `/api/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'UserDTO' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(userDTO !== undefined ? userDTO : {})
                : userDTO || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * AccountResourceApi - functional programming interface
 * @export
 */
export const AccountResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary activateAccount
         * @param {string} key key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateAccountUsingGET(
            key: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).activateAccountUsingGET(
                key,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary changePassword
         * @param {PasswordChangeDTO} passwordChangeDto passwordChangeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST(
            passwordChangeDto: PasswordChangeDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).changePasswordUsingPOST(
                passwordChangeDto,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary finishPasswordReset
         * @param {KeyAndPasswordVM} keyAndPassword keyAndPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishPasswordResetUsingPOST(
            keyAndPassword: KeyAndPasswordVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).finishPasswordResetUsingPOST(
                keyAndPassword,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).getAccountUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary isAuthenticated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAuthenticatedUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).isAuthenticatedUsingGET(
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary registerAccount
         * @param {ManagedUserVM} managedUserVM managedUserVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountUsingPOST(
            managedUserVM: ManagedUserVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).registerAccountUsingPOST(
                managedUserVM,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary requestPasswordReset
         * @param {string} mail mail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordResetUsingPOST(
            mail: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).requestPasswordResetUsingPOST(
                mail,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary saveAccount
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountUsingPOST(
            userDTO: UserDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(configuration).saveAccountUsingPOST(
                userDTO,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * AccountResourceApi - factory interface
 * @export
 */
export const AccountResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary activateAccount
         * @param {string} key key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateAccountUsingGET(key: string, options?: any) {
            return AccountResourceApiFp(configuration).activateAccountUsingGET(key, options)(axios, basePath);
        },
        /**
         *
         * @summary changePassword
         * @param {PasswordChangeDTO} passwordChangeDto passwordChangeDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST(passwordChangeDto: PasswordChangeDTO, options?: any) {
            return AccountResourceApiFp(configuration).changePasswordUsingPOST(passwordChangeDto, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary finishPasswordReset
         * @param {KeyAndPasswordVM} keyAndPassword keyAndPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishPasswordResetUsingPOST(keyAndPassword: KeyAndPasswordVM, options?: any) {
            return AccountResourceApiFp(configuration).finishPasswordResetUsingPOST(keyAndPassword, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAccount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(options?: any) {
            return AccountResourceApiFp(configuration).getAccountUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary isAuthenticated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAuthenticatedUsingGET(options?: any) {
            return AccountResourceApiFp(configuration).isAuthenticatedUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary registerAccount
         * @param {ManagedUserVM} managedUserVM managedUserVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountUsingPOST(managedUserVM: ManagedUserVM, options?: any) {
            return AccountResourceApiFp(configuration).registerAccountUsingPOST(managedUserVM, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary requestPasswordReset
         * @param {string} mail mail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordResetUsingPOST(mail: string, options?: any) {
            return AccountResourceApiFp(configuration).requestPasswordResetUsingPOST(mail, options)(axios, basePath);
        },
        /**
         *
         * @summary saveAccount
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAccountUsingPOST(userDTO: UserDTO, options?: any) {
            return AccountResourceApiFp(configuration).saveAccountUsingPOST(userDTO, options)(axios, basePath);
        }
    };
};

/**
 * AccountResourceApi - object-oriented interface
 * @export
 * @class AccountResourceApi
 * @extends {BaseAPI}
 */
export class AccountResourceApi extends BaseAPI {
    /**
     *
     * @summary activateAccount
     * @param {string} key key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public activateAccountUsingGET(key: string, options?: any) {
        return AccountResourceApiFp(this.configuration).activateAccountUsingGET(key, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary changePassword
     * @param {PasswordChangeDTO} passwordChangeDto passwordChangeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public changePasswordUsingPOST(passwordChangeDto: PasswordChangeDTO, options?: any) {
        return AccountResourceApiFp(this.configuration).changePasswordUsingPOST(passwordChangeDto, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary finishPasswordReset
     * @param {KeyAndPasswordVM} keyAndPassword keyAndPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public finishPasswordResetUsingPOST(keyAndPassword: KeyAndPasswordVM, options?: any) {
        return AccountResourceApiFp(this.configuration).finishPasswordResetUsingPOST(keyAndPassword, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public getAccountUsingGET(options?: any) {
        return AccountResourceApiFp(this.configuration).getAccountUsingGET(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary isAuthenticated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public isAuthenticatedUsingGET(options?: any) {
        return AccountResourceApiFp(this.configuration).isAuthenticatedUsingGET(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary registerAccount
     * @param {ManagedUserVM} managedUserVM managedUserVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public registerAccountUsingPOST(managedUserVM: ManagedUserVM, options?: any) {
        return AccountResourceApiFp(this.configuration).registerAccountUsingPOST(managedUserVM, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary requestPasswordReset
     * @param {string} mail mail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public requestPasswordResetUsingPOST(mail: string, options?: any) {
        return AccountResourceApiFp(this.configuration).requestPasswordResetUsingPOST(mail, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary saveAccount
     * @param {UserDTO} userDTO userDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResourceApi
     */
    public saveAccountUsingPOST(userDTO: UserDTO, options?: any) {
        return AccountResourceApiFp(this.configuration).saveAccountUsingPOST(userDTO, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ApplicationNotificationResourceApi - axios parameter creator
 * @export
 */
export const ApplicationNotificationResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary deleteApplicationNotification
         * @param {number} applicationId applicationId
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationNotificationUsingDELETE(
            applicationId: number,
            notificationId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling deleteApplicationNotificationUsingDELETE.'
                );
            }
            // verify required parameter 'notificationId' is not null or undefined
            if (notificationId === null || notificationId === undefined) {
                throw new RequiredError(
                    'notificationId',
                    'Required parameter notificationId was null or undefined when calling deleteApplicationNotificationUsingDELETE.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/notifications/{notificationId}`
                .replace(`{${'applicationId'}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${'notificationId'}}`, encodeURIComponent(String(notificationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getApplicationNotificationsByNotificationId
         * @param {number} applicationId applicationId
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationNotificationsByNotificationIdUsingGET(
            applicationId: number,
            notificationId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling getApplicationNotificationsByNotificationIdUsingGET.'
                );
            }
            // verify required parameter 'notificationId' is not null or undefined
            if (notificationId === null || notificationId === undefined) {
                throw new RequiredError(
                    'notificationId',
                    'Required parameter notificationId was null or undefined when calling getApplicationNotificationsByNotificationIdUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/notifications/{notificationId}`
                .replace(`{${'applicationId'}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${'notificationId'}}`, encodeURIComponent(String(notificationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getApplicationNotifications
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationNotificationsUsingGET(applicationId: number, options: any = {}): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling getApplicationNotificationsUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/notifications`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary saveApplicationNotification
         * @param {number} applicationId applicationId
         * @param {ApplicationNotification} applicationNotification applicationNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveApplicationNotificationUsingPOST(
            applicationId: number,
            applicationNotification: ApplicationNotification,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling saveApplicationNotificationUsingPOST.'
                );
            }
            // verify required parameter 'applicationNotification' is not null or undefined
            if (applicationNotification === null || applicationNotification === undefined) {
                throw new RequiredError(
                    'applicationNotification',
                    'Required parameter applicationNotification was null or undefined when calling saveApplicationNotificationUsingPOST.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/notifications`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ApplicationNotification' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(applicationNotification !== undefined ? applicationNotification : {})
                : applicationNotification || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ApplicationNotificationResourceApi - functional programming interface
 * @export
 */
export const ApplicationNotificationResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary deleteApplicationNotification
         * @param {number} applicationId applicationId
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationNotificationUsingDELETE(
            applicationId: number,
            notificationId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ApplicationNotificationResourceApiAxiosParamCreator(
                configuration
            ).deleteApplicationNotificationUsingDELETE(applicationId, notificationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getApplicationNotificationsByNotificationId
         * @param {number} applicationId applicationId
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationNotificationsByNotificationIdUsingGET(
            applicationId: number,
            notificationId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationNotification> {
            const localVarAxiosArgs = ApplicationNotificationResourceApiAxiosParamCreator(
                configuration
            ).getApplicationNotificationsByNotificationIdUsingGET(applicationId, notificationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getApplicationNotifications
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationNotificationsUsingGET(
            applicationId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationNotification>> {
            const localVarAxiosArgs = ApplicationNotificationResourceApiAxiosParamCreator(
                configuration
            ).getApplicationNotificationsUsingGET(applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary saveApplicationNotification
         * @param {number} applicationId applicationId
         * @param {ApplicationNotification} applicationNotification applicationNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveApplicationNotificationUsingPOST(
            applicationId: number,
            applicationNotification: ApplicationNotification,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationNotification> {
            const localVarAxiosArgs = ApplicationNotificationResourceApiAxiosParamCreator(
                configuration
            ).saveApplicationNotificationUsingPOST(applicationId, applicationNotification, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ApplicationNotificationResourceApi - factory interface
 * @export
 */
export const ApplicationNotificationResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary deleteApplicationNotification
         * @param {number} applicationId applicationId
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationNotificationUsingDELETE(applicationId: number, notificationId: number, options?: any) {
            return ApplicationNotificationResourceApiFp(configuration).deleteApplicationNotificationUsingDELETE(
                applicationId,
                notificationId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getApplicationNotificationsByNotificationId
         * @param {number} applicationId applicationId
         * @param {number} notificationId notificationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationNotificationsByNotificationIdUsingGET(
            applicationId: number,
            notificationId: number,
            options?: any
        ) {
            return ApplicationNotificationResourceApiFp(
                configuration
            ).getApplicationNotificationsByNotificationIdUsingGET(applicationId, notificationId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getApplicationNotifications
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationNotificationsUsingGET(applicationId: number, options?: any) {
            return ApplicationNotificationResourceApiFp(configuration).getApplicationNotificationsUsingGET(
                applicationId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary saveApplicationNotification
         * @param {number} applicationId applicationId
         * @param {ApplicationNotification} applicationNotification applicationNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveApplicationNotificationUsingPOST(
            applicationId: number,
            applicationNotification: ApplicationNotification,
            options?: any
        ) {
            return ApplicationNotificationResourceApiFp(configuration).saveApplicationNotificationUsingPOST(
                applicationId,
                applicationNotification,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ApplicationNotificationResourceApi - object-oriented interface
 * @export
 * @class ApplicationNotificationResourceApi
 * @extends {BaseAPI}
 */
export class ApplicationNotificationResourceApi extends BaseAPI {
    /**
     *
     * @summary deleteApplicationNotification
     * @param {number} applicationId applicationId
     * @param {number} notificationId notificationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationNotificationResourceApi
     */
    public deleteApplicationNotificationUsingDELETE(applicationId: number, notificationId: number, options?: any) {
        return ApplicationNotificationResourceApiFp(this.configuration).deleteApplicationNotificationUsingDELETE(
            applicationId,
            notificationId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getApplicationNotificationsByNotificationId
     * @param {number} applicationId applicationId
     * @param {number} notificationId notificationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationNotificationResourceApi
     */
    public getApplicationNotificationsByNotificationIdUsingGET(
        applicationId: number,
        notificationId: number,
        options?: any
    ) {
        return ApplicationNotificationResourceApiFp(
            this.configuration
        ).getApplicationNotificationsByNotificationIdUsingGET(applicationId, notificationId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getApplicationNotifications
     * @param {number} applicationId applicationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationNotificationResourceApi
     */
    public getApplicationNotificationsUsingGET(applicationId: number, options?: any) {
        return ApplicationNotificationResourceApiFp(this.configuration).getApplicationNotificationsUsingGET(
            applicationId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary saveApplicationNotification
     * @param {number} applicationId applicationId
     * @param {ApplicationNotification} applicationNotification applicationNotification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationNotificationResourceApi
     */
    public saveApplicationNotificationUsingPOST(
        applicationId: number,
        applicationNotification: ApplicationNotification,
        options?: any
    ) {
        return ApplicationNotificationResourceApiFp(this.configuration).saveApplicationNotificationUsingPOST(
            applicationId,
            applicationNotification,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ApplicationPropertyResourceApi - axios parameter creator
 * @export
 */
export const ApplicationPropertyResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createApplicationProperty
         * @param {number} applicationId applicationId
         * @param {ApplicationProperty} applicationProperty applicationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationPropertyUsingPOST(
            applicationId: number,
            applicationProperty: ApplicationProperty,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling createApplicationPropertyUsingPOST.'
                );
            }
            // verify required parameter 'applicationProperty' is not null or undefined
            if (applicationProperty === null || applicationProperty === undefined) {
                throw new RequiredError(
                    'applicationProperty',
                    'Required parameter applicationProperty was null or undefined when calling createApplicationPropertyUsingPOST.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/properties`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ApplicationProperty' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(applicationProperty !== undefined ? applicationProperty : {})
                : applicationProperty || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteApplicationProperty
         * @param {number} applicationId applicationId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationPropertyUsingDELETE(applicationId: number, id: number, options: any = {}): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling deleteApplicationPropertyUsingDELETE.'
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteApplicationPropertyUsingDELETE.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/properties/{id}`
                .replace(`{${'applicationId'}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllApplicationPropertiesOfApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationPropertiesOfApplicationUsingGET(applicationId: number, options: any = {}): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling getAllApplicationPropertiesOfApplicationUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/properties`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateApplicationProperties
         * @param {number} applicationId applicationId
         * @param {ApplicationProperty} applicationProperty applicationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationPropertiesUsingPUT(
            applicationId: number,
            applicationProperty: ApplicationProperty,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling updateApplicationPropertiesUsingPUT.'
                );
            }
            // verify required parameter 'applicationProperty' is not null or undefined
            if (applicationProperty === null || applicationProperty === undefined) {
                throw new RequiredError(
                    'applicationProperty',
                    'Required parameter applicationProperty was null or undefined when calling updateApplicationPropertiesUsingPUT.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/properties`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ApplicationProperty' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(applicationProperty !== undefined ? applicationProperty : {})
                : applicationProperty || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ApplicationPropertyResourceApi - functional programming interface
 * @export
 */
export const ApplicationPropertyResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createApplicationProperty
         * @param {number} applicationId applicationId
         * @param {ApplicationProperty} applicationProperty applicationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationPropertyUsingPOST(
            applicationId: number,
            applicationProperty: ApplicationProperty,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationProperty> {
            const localVarAxiosArgs = ApplicationPropertyResourceApiAxiosParamCreator(
                configuration
            ).createApplicationPropertyUsingPOST(applicationId, applicationProperty, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteApplicationProperty
         * @param {number} applicationId applicationId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationPropertyUsingDELETE(
            applicationId: number,
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ApplicationPropertyResourceApiAxiosParamCreator(
                configuration
            ).deleteApplicationPropertyUsingDELETE(applicationId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllApplicationPropertiesOfApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationPropertiesOfApplicationUsingGET(
            applicationId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationProperty>> {
            const localVarAxiosArgs = ApplicationPropertyResourceApiAxiosParamCreator(
                configuration
            ).getAllApplicationPropertiesOfApplicationUsingGET(applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateApplicationProperties
         * @param {number} applicationId applicationId
         * @param {ApplicationProperty} applicationProperty applicationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationPropertiesUsingPUT(
            applicationId: number,
            applicationProperty: ApplicationProperty,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationProperty> {
            const localVarAxiosArgs = ApplicationPropertyResourceApiAxiosParamCreator(
                configuration
            ).updateApplicationPropertiesUsingPUT(applicationId, applicationProperty, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ApplicationPropertyResourceApi - factory interface
 * @export
 */
export const ApplicationPropertyResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createApplicationProperty
         * @param {number} applicationId applicationId
         * @param {ApplicationProperty} applicationProperty applicationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationPropertyUsingPOST(
            applicationId: number,
            applicationProperty: ApplicationProperty,
            options?: any
        ) {
            return ApplicationPropertyResourceApiFp(configuration).createApplicationPropertyUsingPOST(
                applicationId,
                applicationProperty,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteApplicationProperty
         * @param {number} applicationId applicationId
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationPropertyUsingDELETE(applicationId: number, id: number, options?: any) {
            return ApplicationPropertyResourceApiFp(configuration).deleteApplicationPropertyUsingDELETE(
                applicationId,
                id,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getAllApplicationPropertiesOfApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationPropertiesOfApplicationUsingGET(applicationId: number, options?: any) {
            return ApplicationPropertyResourceApiFp(configuration).getAllApplicationPropertiesOfApplicationUsingGET(
                applicationId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateApplicationProperties
         * @param {number} applicationId applicationId
         * @param {ApplicationProperty} applicationProperty applicationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationPropertiesUsingPUT(
            applicationId: number,
            applicationProperty: ApplicationProperty,
            options?: any
        ) {
            return ApplicationPropertyResourceApiFp(configuration).updateApplicationPropertiesUsingPUT(
                applicationId,
                applicationProperty,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ApplicationPropertyResourceApi - object-oriented interface
 * @export
 * @class ApplicationPropertyResourceApi
 * @extends {BaseAPI}
 */
export class ApplicationPropertyResourceApi extends BaseAPI {
    /**
     *
     * @summary createApplicationProperty
     * @param {number} applicationId applicationId
     * @param {ApplicationProperty} applicationProperty applicationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPropertyResourceApi
     */
    public createApplicationPropertyUsingPOST(
        applicationId: number,
        applicationProperty: ApplicationProperty,
        options?: any
    ) {
        return ApplicationPropertyResourceApiFp(this.configuration).createApplicationPropertyUsingPOST(
            applicationId,
            applicationProperty,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteApplicationProperty
     * @param {number} applicationId applicationId
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPropertyResourceApi
     */
    public deleteApplicationPropertyUsingDELETE(applicationId: number, id: number, options?: any) {
        return ApplicationPropertyResourceApiFp(this.configuration).deleteApplicationPropertyUsingDELETE(
            applicationId,
            id,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllApplicationPropertiesOfApplication
     * @param {number} applicationId applicationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPropertyResourceApi
     */
    public getAllApplicationPropertiesOfApplicationUsingGET(applicationId: number, options?: any) {
        return ApplicationPropertyResourceApiFp(this.configuration).getAllApplicationPropertiesOfApplicationUsingGET(
            applicationId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateApplicationProperties
     * @param {number} applicationId applicationId
     * @param {ApplicationProperty} applicationProperty applicationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPropertyResourceApi
     */
    public updateApplicationPropertiesUsingPUT(
        applicationId: number,
        applicationProperty: ApplicationProperty,
        options?: any
    ) {
        return ApplicationPropertyResourceApiFp(this.configuration).updateApplicationPropertiesUsingPUT(
            applicationId,
            applicationProperty,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ApplicationPropertyTypeResourceApi - axios parameter creator
 * @export
 */
export const ApplicationPropertyTypeResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getApplicationPropertyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPropertyTypesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/application-property-types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getApplicationPropertyTypesValues
         * @param {'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED'} propertyKey propertyKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPropertyTypesValuesUsingGET(
            propertyKey: 'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED',
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'propertyKey' is not null or undefined
            if (propertyKey === null || propertyKey === undefined) {
                throw new RequiredError(
                    'propertyKey',
                    'Required parameter propertyKey was null or undefined when calling getApplicationPropertyTypesValuesUsingGET.'
                );
            }
            const localVarPath = `/api/application-property-types/{propertyKey}`.replace(
                `{${'propertyKey'}}`,
                encodeURIComponent(String(propertyKey))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ApplicationPropertyTypeResourceApi - functional programming interface
 * @export
 */
export const ApplicationPropertyTypeResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getApplicationPropertyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPropertyTypesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = ApplicationPropertyTypeResourceApiAxiosParamCreator(
                configuration
            ).getApplicationPropertyTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getApplicationPropertyTypesValues
         * @param {'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED'} propertyKey propertyKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPropertyTypesValuesUsingGET(
            propertyKey: 'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED',
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = ApplicationPropertyTypeResourceApiAxiosParamCreator(
                configuration
            ).getApplicationPropertyTypesValuesUsingGET(propertyKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ApplicationPropertyTypeResourceApi - factory interface
 * @export
 */
export const ApplicationPropertyTypeResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getApplicationPropertyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPropertyTypesUsingGET(options?: any) {
            return ApplicationPropertyTypeResourceApiFp(configuration).getApplicationPropertyTypesUsingGET(options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getApplicationPropertyTypesValues
         * @param {'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED'} propertyKey propertyKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPropertyTypesValuesUsingGET(
            propertyKey: 'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED',
            options?: any
        ) {
            return ApplicationPropertyTypeResourceApiFp(configuration).getApplicationPropertyTypesValuesUsingGET(
                propertyKey,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ApplicationPropertyTypeResourceApi - object-oriented interface
 * @export
 * @class ApplicationPropertyTypeResourceApi
 * @extends {BaseAPI}
 */
export class ApplicationPropertyTypeResourceApi extends BaseAPI {
    /**
     *
     * @summary getApplicationPropertyTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPropertyTypeResourceApi
     */
    public getApplicationPropertyTypesUsingGET(options?: any) {
        return ApplicationPropertyTypeResourceApiFp(this.configuration).getApplicationPropertyTypesUsingGET(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getApplicationPropertyTypesValues
     * @param {'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED'} propertyKey propertyKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPropertyTypeResourceApi
     */
    public getApplicationPropertyTypesValuesUsingGET(
        propertyKey: 'MATURITY_LEVEL' | 'AVAILABILITY' | 'SSL_ENABLED',
        options?: any
    ) {
        return ApplicationPropertyTypeResourceApiFp(this.configuration).getApplicationPropertyTypesValuesUsingGET(
            propertyKey,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ApplicationPublishTypeResourceApi - axios parameter creator
 * @export
 */
export const ApplicationPublishTypeResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getApplicationPublishTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPublishTypesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/application-publish-types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ApplicationPublishTypeResourceApi - functional programming interface
 * @export
 */
export const ApplicationPublishTypeResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getApplicationPublishTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPublishTypesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = ApplicationPublishTypeResourceApiAxiosParamCreator(
                configuration
            ).getApplicationPublishTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ApplicationPublishTypeResourceApi - factory interface
 * @export
 */
export const ApplicationPublishTypeResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getApplicationPublishTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationPublishTypesUsingGET(options?: any) {
            return ApplicationPublishTypeResourceApiFp(configuration).getApplicationPublishTypesUsingGET(options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ApplicationPublishTypeResourceApi - object-oriented interface
 * @export
 * @class ApplicationPublishTypeResourceApi
 * @extends {BaseAPI}
 */
export class ApplicationPublishTypeResourceApi extends BaseAPI {
    /**
     *
     * @summary getApplicationPublishTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationPublishTypeResourceApi
     */
    public getApplicationPublishTypesUsingGET(options?: any) {
        return ApplicationPublishTypeResourceApiFp(this.configuration).getApplicationPublishTypesUsingGET(options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ApplicationResourceApi - axios parameter creator
 * @export
 */
export const ApplicationResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createApplication
         * @param {ApplicationDTO} application application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationUsingPOST(application: ApplicationDTO, options: any = {}): RequestArgs {
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError(
                    'application',
                    'Required parameter application was null or undefined when calling createApplicationUsingPOST.'
                );
            }
            const localVarPath = `/api/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ApplicationDTO' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(application !== undefined ? application : {})
                : application || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteApplicationUsingDELETE.'
                );
            }
            const localVarPath = `/api/applications/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllApplications
         * @param {boolean} [isService] isService
         * @param {string} [repo] repo
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationsUsingGET(
            isService?: boolean,
            repo?: string,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isService !== undefined) {
                localVarQueryParameter['isService'] = isService;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getApplicationUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getDPYamlFile
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDPYamlFileUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getDPYamlFileUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{id}/yaml`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getGitBranchesForApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGitBranchesForApplicationUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getGitBranchesForApplicationUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{id}/branches`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getLightApplications
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightApplicationsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/light-applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateApplication
         * @param {ApplicationDTO} application application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationUsingPUT(application: ApplicationDTO, options: any = {}): RequestArgs {
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError(
                    'application',
                    'Required parameter application was null or undefined when calling updateApplicationUsingPUT.'
                );
            }
            const localVarPath = `/api/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ApplicationDTO' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(application !== undefined ? application : {})
                : application || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ApplicationResourceApi - functional programming interface
 * @export
 */
export const ApplicationResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createApplication
         * @param {ApplicationDTO} application application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationUsingPOST(
            application: ApplicationDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDTO> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(configuration).createApplicationUsingPOST(
                application,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(
                configuration
            ).deleteApplicationUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllApplications
         * @param {boolean} [isService] isService
         * @param {string} [repo] repo
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationsUsingGET(
            isService?: boolean,
            repo?: string,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDTO>> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(configuration).getAllApplicationsUsingGET(
                isService,
                repo,
                sorted,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDTO> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(configuration).getApplicationUsingGET(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getDPYamlFile
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDPYamlFileUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(configuration).getDPYamlFileUsingGET(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getGitBranchesForApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGitBranchesForApplicationUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GitBranchDTO>> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(
                configuration
            ).getGitBranchesForApplicationUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getLightApplications
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightApplicationsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LightApplicationDTO>> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(
                configuration
            ).getLightApplicationsUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                search,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateApplication
         * @param {ApplicationDTO} application application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationUsingPUT(
            application: ApplicationDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDTO> {
            const localVarAxiosArgs = ApplicationResourceApiAxiosParamCreator(configuration).updateApplicationUsingPUT(
                application,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ApplicationResourceApi - factory interface
 * @export
 */
export const ApplicationResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createApplication
         * @param {ApplicationDTO} application application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationUsingPOST(application: ApplicationDTO, options?: any) {
            return ApplicationResourceApiFp(configuration).createApplicationUsingPOST(application, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary deleteApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationUsingDELETE(id: number, options?: any) {
            return ApplicationResourceApiFp(configuration).deleteApplicationUsingDELETE(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllApplications
         * @param {boolean} [isService] isService
         * @param {string} [repo] repo
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllApplicationsUsingGET(
            isService?: boolean,
            repo?: string,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ) {
            return ApplicationResourceApiFp(configuration).getAllApplicationsUsingGET(
                isService,
                repo,
                sorted,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationUsingGET(id: number, options?: any) {
            return ApplicationResourceApiFp(configuration).getApplicationUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getDPYamlFile
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDPYamlFileUsingGET(id: number, options?: any) {
            return ApplicationResourceApiFp(configuration).getDPYamlFileUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getGitBranchesForApplication
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGitBranchesForApplicationUsingGET(id: number, options?: any) {
            return ApplicationResourceApiFp(configuration).getGitBranchesForApplicationUsingGET(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getLightApplications
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightApplicationsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return ApplicationResourceApiFp(configuration).getLightApplicationsUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                search,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateApplication
         * @param {ApplicationDTO} application application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationUsingPUT(application: ApplicationDTO, options?: any) {
            return ApplicationResourceApiFp(configuration).updateApplicationUsingPUT(application, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ApplicationResourceApi - object-oriented interface
 * @export
 * @class ApplicationResourceApi
 * @extends {BaseAPI}
 */
export class ApplicationResourceApi extends BaseAPI {
    /**
     *
     * @summary createApplication
     * @param {ApplicationDTO} application application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public createApplicationUsingPOST(application: ApplicationDTO, options?: any) {
        return ApplicationResourceApiFp(this.configuration).createApplicationUsingPOST(application, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteApplication
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public deleteApplicationUsingDELETE(id: number, options?: any) {
        return ApplicationResourceApiFp(this.configuration).deleteApplicationUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllApplications
     * @param {boolean} [isService] isService
     * @param {string} [repo] repo
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public getAllApplicationsUsingGET(
        isService?: boolean,
        repo?: string,
        sorted?: boolean,
        unsorted?: boolean,
        options?: any
    ) {
        return ApplicationResourceApiFp(this.configuration).getAllApplicationsUsingGET(
            isService,
            repo,
            sorted,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getApplication
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public getApplicationUsingGET(id: number, options?: any) {
        return ApplicationResourceApiFp(this.configuration).getApplicationUsingGET(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getDPYamlFile
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public getDPYamlFileUsingGET(id: number, options?: any) {
        return ApplicationResourceApiFp(this.configuration).getDPYamlFileUsingGET(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getGitBranchesForApplication
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public getGitBranchesForApplicationUsingGET(id: number, options?: any) {
        return ApplicationResourceApiFp(this.configuration).getGitBranchesForApplicationUsingGET(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getLightApplications
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {string} [search] search
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public getLightApplicationsUsingGET(
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        search?: string,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return ApplicationResourceApiFp(this.configuration).getLightApplicationsUsingGET(
            offset,
            pageNumber,
            pageSize,
            paged,
            search,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateApplication
     * @param {ApplicationDTO} application application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationResourceApi
     */
    public updateApplicationUsingPUT(application: ApplicationDTO, options?: any) {
        return ApplicationResourceApiFp(this.configuration).updateApplicationUsingPUT(application, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ApplicationTypeResourceApi - axios parameter creator
 * @export
 */
export const ApplicationTypeResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getApplicationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationTypesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/application-types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ApplicationTypeResourceApi - functional programming interface
 * @export
 */
export const ApplicationTypeResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getApplicationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationTypesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = ApplicationTypeResourceApiAxiosParamCreator(
                configuration
            ).getApplicationTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ApplicationTypeResourceApi - factory interface
 * @export
 */
export const ApplicationTypeResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getApplicationTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationTypesUsingGET(options?: any) {
            return ApplicationTypeResourceApiFp(configuration).getApplicationTypesUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * ApplicationTypeResourceApi - object-oriented interface
 * @export
 * @class ApplicationTypeResourceApi
 * @extends {BaseAPI}
 */
export class ApplicationTypeResourceApi extends BaseAPI {
    /**
     *
     * @summary getApplicationTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationTypeResourceApi
     */
    public getApplicationTypesUsingGET(options?: any) {
        return ApplicationTypeResourceApiFp(this.configuration).getApplicationTypesUsingGET(options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * AuditResourceApi - axios parameter creator
 * @export
 */
export const AuditResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAll
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/management/audits`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary get
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling getUsingGET.');
            }
            const localVarPath = `/management/audits/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * AuditResourceApi - functional programming interface
 * @export
 */
export const AuditResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAll
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditEvent>> {
            const localVarAxiosArgs = AuditResourceApiAxiosParamCreator(configuration).getAllUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary get
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditEvent> {
            const localVarAxiosArgs = AuditResourceApiAxiosParamCreator(configuration).getUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * AuditResourceApi - factory interface
 * @export
 */
export const AuditResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getAll
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return AuditResourceApiFp(configuration).getAllUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary get
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsingGET(id: number, options?: any) {
            return AuditResourceApiFp(configuration).getUsingGET(id, options)(axios, basePath);
        }
    };
};

/**
 * AuditResourceApi - object-oriented interface
 * @export
 * @class AuditResourceApi
 * @extends {BaseAPI}
 */
export class AuditResourceApi extends BaseAPI {
    /**
     *
     * @summary getAll
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditResourceApi
     */
    public getAllUsingGET(
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return AuditResourceApiFp(this.configuration).getAllUsingGET(
            offset,
            pageNumber,
            pageSize,
            paged,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary get
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditResourceApi
     */
    public getUsingGET(id: number, options?: any) {
        return AuditResourceApiFp(this.configuration).getUsingGET(id, options)(this.axios, this.basePath);
    }
}

/**
 * BackingResourceApi - axios parameter creator
 * @export
 */
export const BackingResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBacking
         * @param {Backing} backing backing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackingUsingPOST(backing: Backing, options: any = {}): RequestArgs {
            // verify required parameter 'backing' is not null or undefined
            if (backing === null || backing === undefined) {
                throw new RequiredError(
                    'backing',
                    'Required parameter backing was null or undefined when calling createBackingUsingPOST.'
                );
            }
            const localVarPath = `/api/backings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Backing' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(backing !== undefined ? backing : {})
                : backing || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllBackings
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBackingsUsingGET(sorted?: boolean, unsorted?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/backings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBacking
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackingUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getBackingUsingGET.'
                );
            }
            const localVarPath = `/api/backings/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateBacking
         * @param {Backing} backing backing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackingUsingPUT(backing: Backing, options: any = {}): RequestArgs {
            // verify required parameter 'backing' is not null or undefined
            if (backing === null || backing === undefined) {
                throw new RequiredError(
                    'backing',
                    'Required parameter backing was null or undefined when calling updateBackingUsingPUT.'
                );
            }
            const localVarPath = `/api/backings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Backing' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(backing !== undefined ? backing : {})
                : backing || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * BackingResourceApi - functional programming interface
 * @export
 */
export const BackingResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBacking
         * @param {Backing} backing backing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackingUsingPOST(
            backing: Backing,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Backing> {
            const localVarAxiosArgs = BackingResourceApiAxiosParamCreator(configuration).createBackingUsingPOST(
                backing,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllBackings
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBackingsUsingGET(
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Backing>> {
            const localVarAxiosArgs = BackingResourceApiAxiosParamCreator(configuration).getAllBackingsUsingGET(
                sorted,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBacking
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackingUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Backing> {
            const localVarAxiosArgs = BackingResourceApiAxiosParamCreator(configuration).getBackingUsingGET(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateBacking
         * @param {Backing} backing backing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackingUsingPUT(
            backing: Backing,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Backing> {
            const localVarAxiosArgs = BackingResourceApiAxiosParamCreator(configuration).updateBackingUsingPUT(
                backing,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * BackingResourceApi - factory interface
 * @export
 */
export const BackingResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createBacking
         * @param {Backing} backing backing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackingUsingPOST(backing: Backing, options?: any) {
            return BackingResourceApiFp(configuration).createBackingUsingPOST(backing, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllBackings
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBackingsUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
            return BackingResourceApiFp(configuration).getAllBackingsUsingGET(sorted, unsorted, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getBacking
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBackingUsingGET(id: number, options?: any) {
            return BackingResourceApiFp(configuration).getBackingUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary updateBacking
         * @param {Backing} backing backing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackingUsingPUT(backing: Backing, options?: any) {
            return BackingResourceApiFp(configuration).updateBackingUsingPUT(backing, options)(axios, basePath);
        }
    };
};

/**
 * BackingResourceApi - object-oriented interface
 * @export
 * @class BackingResourceApi
 * @extends {BaseAPI}
 */
export class BackingResourceApi extends BaseAPI {
    /**
     *
     * @summary createBacking
     * @param {Backing} backing backing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackingResourceApi
     */
    public createBackingUsingPOST(backing: Backing, options?: any) {
        return BackingResourceApiFp(this.configuration).createBackingUsingPOST(backing, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllBackings
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackingResourceApi
     */
    public getAllBackingsUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
        return BackingResourceApiFp(this.configuration).getAllBackingsUsingGET(sorted, unsorted, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getBacking
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackingResourceApi
     */
    public getBackingUsingGET(id: number, options?: any) {
        return BackingResourceApiFp(this.configuration).getBackingUsingGET(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateBacking
     * @param {Backing} backing backing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackingResourceApi
     */
    public updateBackingUsingPUT(backing: Backing, options?: any) {
        return BackingResourceApiFp(this.configuration).updateBackingUsingPUT(backing, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * BasicErrorControllerApi - axios parameter creator
 * @export
 */
export const BasicErrorControllerApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingDELETE(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingOPTIONS(
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPATCH(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPUT(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingDELETE(options)(axios, basePath);
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingOPTIONS(options)(axios, basePath);
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPATCH(options)(axios, basePath);
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPOST(options)(axios, basePath);
        },
        /**
         *
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPUT(options)(axios, basePath);
        }
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingDELETE(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingGET(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingOPTIONS(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPATCH(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPOST(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPUT(options)(this.axios, this.basePath);
    }
}

/**
 * BillingResourceApi - axios parameter creator
 * @export
 */
export const BillingResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBilling
         * @param {Billing} billing billing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingUsingPOST(billing: Billing, options: any = {}): RequestArgs {
            // verify required parameter 'billing' is not null or undefined
            if (billing === null || billing === undefined) {
                throw new RequiredError(
                    'billing',
                    'Required parameter billing was null or undefined when calling createBillingUsingPOST.'
                );
            }
            const localVarPath = `/api/billings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Billing' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(billing !== undefined ? billing : {})
                : billing || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteBilling
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBillingUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteBillingUsingDELETE.'
                );
            }
            const localVarPath = `/api/billings/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllBillings
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBillingsUsingGET(sorted?: boolean, unsorted?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/billings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBilling
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getBillingUsingGET.'
                );
            }
            const localVarPath = `/api/billings/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateBilling
         * @param {Billing} billing billing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingUsingPUT(billing: Billing, options: any = {}): RequestArgs {
            // verify required parameter 'billing' is not null or undefined
            if (billing === null || billing === undefined) {
                throw new RequiredError(
                    'billing',
                    'Required parameter billing was null or undefined when calling updateBillingUsingPUT.'
                );
            }
            const localVarPath = `/api/billings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Billing' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(billing !== undefined ? billing : {})
                : billing || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * BillingResourceApi - functional programming interface
 * @export
 */
export const BillingResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBilling
         * @param {Billing} billing billing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingUsingPOST(
            billing: Billing,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Billing> {
            const localVarAxiosArgs = BillingResourceApiAxiosParamCreator(configuration).createBillingUsingPOST(
                billing,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteBilling
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBillingUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = BillingResourceApiAxiosParamCreator(configuration).deleteBillingUsingDELETE(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllBillings
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBillingsUsingGET(
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Billing>> {
            const localVarAxiosArgs = BillingResourceApiAxiosParamCreator(configuration).getAllBillingsUsingGET(
                sorted,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBilling
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Billing> {
            const localVarAxiosArgs = BillingResourceApiAxiosParamCreator(configuration).getBillingUsingGET(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateBilling
         * @param {Billing} billing billing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingUsingPUT(
            billing: Billing,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Billing> {
            const localVarAxiosArgs = BillingResourceApiAxiosParamCreator(configuration).updateBillingUsingPUT(
                billing,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * BillingResourceApi - factory interface
 * @export
 */
export const BillingResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createBilling
         * @param {Billing} billing billing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBillingUsingPOST(billing: Billing, options?: any) {
            return BillingResourceApiFp(configuration).createBillingUsingPOST(billing, options)(axios, basePath);
        },
        /**
         *
         * @summary deleteBilling
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBillingUsingDELETE(id: number, options?: any) {
            return BillingResourceApiFp(configuration).deleteBillingUsingDELETE(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllBillings
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBillingsUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
            return BillingResourceApiFp(configuration).getAllBillingsUsingGET(sorted, unsorted, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getBilling
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsingGET(id: number, options?: any) {
            return BillingResourceApiFp(configuration).getBillingUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary updateBilling
         * @param {Billing} billing billing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingUsingPUT(billing: Billing, options?: any) {
            return BillingResourceApiFp(configuration).updateBillingUsingPUT(billing, options)(axios, basePath);
        }
    };
};

/**
 * BillingResourceApi - object-oriented interface
 * @export
 * @class BillingResourceApi
 * @extends {BaseAPI}
 */
export class BillingResourceApi extends BaseAPI {
    /**
     *
     * @summary createBilling
     * @param {Billing} billing billing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingResourceApi
     */
    public createBillingUsingPOST(billing: Billing, options?: any) {
        return BillingResourceApiFp(this.configuration).createBillingUsingPOST(billing, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteBilling
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingResourceApi
     */
    public deleteBillingUsingDELETE(id: number, options?: any) {
        return BillingResourceApiFp(this.configuration).deleteBillingUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllBillings
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingResourceApi
     */
    public getAllBillingsUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
        return BillingResourceApiFp(this.configuration).getAllBillingsUsingGET(sorted, unsorted, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getBilling
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingResourceApi
     */
    public getBillingUsingGET(id: number, options?: any) {
        return BillingResourceApiFp(this.configuration).getBillingUsingGET(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateBilling
     * @param {Billing} billing billing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingResourceApi
     */
    public updateBillingUsingPUT(billing: Billing, options?: any) {
        return BillingResourceApiFp(this.configuration).updateBillingUsingPUT(billing, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * BudgetNotificationResourceApi - axios parameter creator
 * @export
 */
export const BudgetNotificationResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBudgetNoficiation
         * @param {BudgetNotification} budgetNotification budgetNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetNoficiationUsingPOST(budgetNotification: BudgetNotification, options: any = {}): RequestArgs {
            // verify required parameter 'budgetNotification' is not null or undefined
            if (budgetNotification === null || budgetNotification === undefined) {
                throw new RequiredError(
                    'budgetNotification',
                    'Required parameter budgetNotification was null or undefined when calling createBudgetNoficiationUsingPOST.'
                );
            }
            const localVarPath = `/api/budget-notifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'BudgetNotification' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(budgetNotification !== undefined ? budgetNotification : {})
                : budgetNotification || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteBudgetNotification
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBudgetNotificationUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteBudgetNotificationUsingDELETE.'
                );
            }
            const localVarPath = `/api/budget-notifications/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllBudgetNotifications
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBudgetNotificationsUsingGET(productId: number, userId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getAllBudgetNotificationsUsingGET.'
                );
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    'userId',
                    'Required parameter userId was null or undefined when calling getAllBudgetNotificationsUsingGET.'
                );
            }
            const localVarPath = `/api/budget-notifications/{userId}/{productId}`
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)))
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * BudgetNotificationResourceApi - functional programming interface
 * @export
 */
export const BudgetNotificationResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBudgetNoficiation
         * @param {BudgetNotification} budgetNotification budgetNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetNoficiationUsingPOST(
            budgetNotification: BudgetNotification,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetNotification> {
            const localVarAxiosArgs = BudgetNotificationResourceApiAxiosParamCreator(
                configuration
            ).createBudgetNoficiationUsingPOST(budgetNotification, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteBudgetNotification
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBudgetNotificationUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = BudgetNotificationResourceApiAxiosParamCreator(
                configuration
            ).deleteBudgetNotificationUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllBudgetNotifications
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBudgetNotificationsUsingGET(
            productId: number,
            userId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BudgetNotification>> {
            const localVarAxiosArgs = BudgetNotificationResourceApiAxiosParamCreator(
                configuration
            ).getAllBudgetNotificationsUsingGET(productId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * BudgetNotificationResourceApi - factory interface
 * @export
 */
export const BudgetNotificationResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createBudgetNoficiation
         * @param {BudgetNotification} budgetNotification budgetNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetNoficiationUsingPOST(budgetNotification: BudgetNotification, options?: any) {
            return BudgetNotificationResourceApiFp(configuration).createBudgetNoficiationUsingPOST(
                budgetNotification,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteBudgetNotification
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBudgetNotificationUsingDELETE(id: number, options?: any) {
            return BudgetNotificationResourceApiFp(configuration).deleteBudgetNotificationUsingDELETE(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllBudgetNotifications
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBudgetNotificationsUsingGET(productId: number, userId: number, options?: any) {
            return BudgetNotificationResourceApiFp(configuration).getAllBudgetNotificationsUsingGET(
                productId,
                userId,
                options
            )(axios, basePath);
        }
    };
};

/**
 * BudgetNotificationResourceApi - object-oriented interface
 * @export
 * @class BudgetNotificationResourceApi
 * @extends {BaseAPI}
 */
export class BudgetNotificationResourceApi extends BaseAPI {
    /**
     *
     * @summary createBudgetNoficiation
     * @param {BudgetNotification} budgetNotification budgetNotification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetNotificationResourceApi
     */
    public createBudgetNoficiationUsingPOST(budgetNotification: BudgetNotification, options?: any) {
        return BudgetNotificationResourceApiFp(this.configuration).createBudgetNoficiationUsingPOST(
            budgetNotification,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteBudgetNotification
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetNotificationResourceApi
     */
    public deleteBudgetNotificationUsingDELETE(id: number, options?: any) {
        return BudgetNotificationResourceApiFp(this.configuration).deleteBudgetNotificationUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllBudgetNotifications
     * @param {number} productId productId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetNotificationResourceApi
     */
    public getAllBudgetNotificationsUsingGET(productId: number, userId: number, options?: any) {
        return BudgetNotificationResourceApiFp(this.configuration).getAllBudgetNotificationsUsingGET(
            productId,
            userId,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * BudgetResourceApi - axios parameter creator
 * @export
 */
export const BudgetResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBudget
         * @param {BudgetDTO} budget budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetUsingPOST(budget: BudgetDTO, options: any = {}): RequestArgs {
            // verify required parameter 'budget' is not null or undefined
            if (budget === null || budget === undefined) {
                throw new RequiredError(
                    'budget',
                    'Required parameter budget was null or undefined when calling createBudgetUsingPOST.'
                );
            }
            const localVarPath = `/api/budget`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'BudgetDTO' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(budget !== undefined ? budget : {})
                : budget || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteBudget
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBudgetUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteBudgetUsingDELETE.'
                );
            }
            const localVarPath = `/api/budget/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBudgetSpentAmountFromProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetSpentAmountFromProductUsingGET(productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getBudgetSpentAmountFromProductUsingGET.'
                );
            }
            const localVarPath = `/api/budget/product/{productId}/spent`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBudget
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getBudgetUsingGET.'
                );
            }
            const localVarPath = `/api/budget/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBudgetsForProduct
         * @param {string} [productId] productId
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetsForProductUsingGET(
            productId?: string,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/budget`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateBudget
         * @param {BudgetDTO} budget budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudgetUsingPUT(budget: BudgetDTO, options: any = {}): RequestArgs {
            // verify required parameter 'budget' is not null or undefined
            if (budget === null || budget === undefined) {
                throw new RequiredError(
                    'budget',
                    'Required parameter budget was null or undefined when calling updateBudgetUsingPUT.'
                );
            }
            const localVarPath = `/api/budget`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'BudgetDTO' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(budget !== undefined ? budget : {})
                : budget || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * BudgetResourceApi - functional programming interface
 * @export
 */
export const BudgetResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createBudget
         * @param {BudgetDTO} budget budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetUsingPOST(
            budget: BudgetDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetDTO> {
            const localVarAxiosArgs = BudgetResourceApiAxiosParamCreator(configuration).createBudgetUsingPOST(
                budget,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteBudget
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBudgetUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = BudgetResourceApiAxiosParamCreator(configuration).deleteBudgetUsingDELETE(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBudgetSpentAmountFromProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetSpentAmountFromProductUsingGET(
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BudgetSpentDTO>> {
            const localVarAxiosArgs = BudgetResourceApiAxiosParamCreator(
                configuration
            ).getBudgetSpentAmountFromProductUsingGET(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBudget
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetDTO> {
            const localVarAxiosArgs = BudgetResourceApiAxiosParamCreator(configuration).getBudgetUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBudgetsForProduct
         * @param {string} [productId] productId
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetsForProductUsingGET(
            productId?: string,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BudgetDTO>> {
            const localVarAxiosArgs = BudgetResourceApiAxiosParamCreator(configuration).getBudgetsForProductUsingGET(
                productId,
                sorted,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateBudget
         * @param {BudgetDTO} budget budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudgetUsingPUT(
            budget: BudgetDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetDTO> {
            const localVarAxiosArgs = BudgetResourceApiAxiosParamCreator(configuration).updateBudgetUsingPUT(
                budget,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * BudgetResourceApi - factory interface
 * @export
 */
export const BudgetResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createBudget
         * @param {BudgetDTO} budget budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetUsingPOST(budget: BudgetDTO, options?: any) {
            return BudgetResourceApiFp(configuration).createBudgetUsingPOST(budget, options)(axios, basePath);
        },
        /**
         *
         * @summary deleteBudget
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBudgetUsingDELETE(id: number, options?: any) {
            return BudgetResourceApiFp(configuration).deleteBudgetUsingDELETE(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getBudgetSpentAmountFromProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetSpentAmountFromProductUsingGET(productId: number, options?: any) {
            return BudgetResourceApiFp(configuration).getBudgetSpentAmountFromProductUsingGET(productId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getBudget
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetUsingGET(id: number, options?: any) {
            return BudgetResourceApiFp(configuration).getBudgetUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getBudgetsForProduct
         * @param {string} [productId] productId
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetsForProductUsingGET(productId?: string, sorted?: boolean, unsorted?: boolean, options?: any) {
            return BudgetResourceApiFp(configuration).getBudgetsForProductUsingGET(
                productId,
                sorted,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateBudget
         * @param {BudgetDTO} budget budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudgetUsingPUT(budget: BudgetDTO, options?: any) {
            return BudgetResourceApiFp(configuration).updateBudgetUsingPUT(budget, options)(axios, basePath);
        }
    };
};

/**
 * BudgetResourceApi - object-oriented interface
 * @export
 * @class BudgetResourceApi
 * @extends {BaseAPI}
 */
export class BudgetResourceApi extends BaseAPI {
    /**
     *
     * @summary createBudget
     * @param {BudgetDTO} budget budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetResourceApi
     */
    public createBudgetUsingPOST(budget: BudgetDTO, options?: any) {
        return BudgetResourceApiFp(this.configuration).createBudgetUsingPOST(budget, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteBudget
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetResourceApi
     */
    public deleteBudgetUsingDELETE(id: number, options?: any) {
        return BudgetResourceApiFp(this.configuration).deleteBudgetUsingDELETE(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary getBudgetSpentAmountFromProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetResourceApi
     */
    public getBudgetSpentAmountFromProductUsingGET(productId: number, options?: any) {
        return BudgetResourceApiFp(this.configuration).getBudgetSpentAmountFromProductUsingGET(productId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getBudget
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetResourceApi
     */
    public getBudgetUsingGET(id: number, options?: any) {
        return BudgetResourceApiFp(this.configuration).getBudgetUsingGET(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary getBudgetsForProduct
     * @param {string} [productId] productId
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetResourceApi
     */
    public getBudgetsForProductUsingGET(productId?: string, sorted?: boolean, unsorted?: boolean, options?: any) {
        return BudgetResourceApiFp(this.configuration).getBudgetsForProductUsingGET(
            productId,
            sorted,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateBudget
     * @param {BudgetDTO} budget budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetResourceApi
     */
    public updateBudgetUsingPUT(budget: BudgetDTO, options?: any) {
        return BudgetResourceApiFp(this.configuration).updateBudgetUsingPUT(budget, options)(this.axios, this.basePath);
    }
}

/**
 * BuildPreviewResourceApi - axios parameter creator
 * @export
 */
export const BuildPreviewResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAllBuildPreviews
         * @param {string} projectId projectId
         * @param {string} [filter] filter
         * @param {number} [pageSize] pageSize
         * @param {string} [pageToken] pageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBuildPreviewsUsingGET(
            projectId: string,
            filter?: string,
            pageSize?: number,
            pageToken?: string,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError(
                    'projectId',
                    'Required parameter projectId was null or undefined when calling getAllBuildPreviewsUsingGET.'
                );
            }
            const localVarPath = `/api/projects/{projectId}/build-previews`.replace(
                `{${'projectId'}}`,
                encodeURIComponent(String(projectId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * BuildPreviewResourceApi - functional programming interface
 * @export
 */
export const BuildPreviewResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAllBuildPreviews
         * @param {string} projectId projectId
         * @param {string} [filter] filter
         * @param {number} [pageSize] pageSize
         * @param {string} [pageToken] pageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBuildPreviewsUsingGET(
            projectId: string,
            filter?: string,
            pageSize?: number,
            pageToken?: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildPreviewList> {
            const localVarAxiosArgs = BuildPreviewResourceApiAxiosParamCreator(
                configuration
            ).getAllBuildPreviewsUsingGET(projectId, filter, pageSize, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * BuildPreviewResourceApi - factory interface
 * @export
 */
export const BuildPreviewResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getAllBuildPreviews
         * @param {string} projectId projectId
         * @param {string} [filter] filter
         * @param {number} [pageSize] pageSize
         * @param {string} [pageToken] pageToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBuildPreviewsUsingGET(
            projectId: string,
            filter?: string,
            pageSize?: number,
            pageToken?: string,
            options?: any
        ) {
            return BuildPreviewResourceApiFp(configuration).getAllBuildPreviewsUsingGET(
                projectId,
                filter,
                pageSize,
                pageToken,
                options
            )(axios, basePath);
        }
    };
};

/**
 * BuildPreviewResourceApi - object-oriented interface
 * @export
 * @class BuildPreviewResourceApi
 * @extends {BaseAPI}
 */
export class BuildPreviewResourceApi extends BaseAPI {
    /**
     *
     * @summary getAllBuildPreviews
     * @param {string} projectId projectId
     * @param {string} [filter] filter
     * @param {number} [pageSize] pageSize
     * @param {string} [pageToken] pageToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildPreviewResourceApi
     */
    public getAllBuildPreviewsUsingGET(
        projectId: string,
        filter?: string,
        pageSize?: number,
        pageToken?: string,
        options?: any
    ) {
        return BuildPreviewResourceApiFp(this.configuration).getAllBuildPreviewsUsingGET(
            projectId,
            filter,
            pageSize,
            pageToken,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * BuildResourceApi - axios parameter creator
 * @export
 */
export const BuildResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getBuild
         * @param {string} buildId buildId
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildUsingGET(buildId: string, projectId: string, options: any = {}): RequestArgs {
            // verify required parameter 'buildId' is not null or undefined
            if (buildId === null || buildId === undefined) {
                throw new RequiredError(
                    'buildId',
                    'Required parameter buildId was null or undefined when calling getBuildUsingGET.'
                );
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError(
                    'projectId',
                    'Required parameter projectId was null or undefined when calling getBuildUsingGET.'
                );
            }
            const localVarPath = `/api/projects/{projectId}/builds/{buildId}`
                .replace(`{${'buildId'}}`, encodeURIComponent(String(buildId)))
                .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getLogs
         * @param {string} buildId buildId
         * @param {string} logsBucket logsBucket
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogsUsingGET(buildId: string, logsBucket: string, projectId: string, options: any = {}): RequestArgs {
            // verify required parameter 'buildId' is not null or undefined
            if (buildId === null || buildId === undefined) {
                throw new RequiredError(
                    'buildId',
                    'Required parameter buildId was null or undefined when calling getLogsUsingGET.'
                );
            }
            // verify required parameter 'logsBucket' is not null or undefined
            if (logsBucket === null || logsBucket === undefined) {
                throw new RequiredError(
                    'logsBucket',
                    'Required parameter logsBucket was null or undefined when calling getLogsUsingGET.'
                );
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError(
                    'projectId',
                    'Required parameter projectId was null or undefined when calling getLogsUsingGET.'
                );
            }
            const localVarPath = `/api/projects/{projectId}/builds/{buildId}/logs/{logsBucket}/`
                .replace(`{${'buildId'}}`, encodeURIComponent(String(buildId)))
                .replace(`{${'logsBucket'}}`, encodeURIComponent(String(logsBucket)))
                .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * BuildResourceApi - functional programming interface
 * @export
 */
export const BuildResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getBuild
         * @param {string} buildId buildId
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildUsingGET(
            buildId: string,
            projectId: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Build> {
            const localVarAxiosArgs = BuildResourceApiAxiosParamCreator(configuration).getBuildUsingGET(
                buildId,
                projectId,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getLogs
         * @param {string} buildId buildId
         * @param {string} logsBucket logsBucket
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogsUsingGET(
            buildId: string,
            logsBucket: string,
            projectId: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = BuildResourceApiAxiosParamCreator(configuration).getLogsUsingGET(
                buildId,
                logsBucket,
                projectId,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * BuildResourceApi - factory interface
 * @export
 */
export const BuildResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getBuild
         * @param {string} buildId buildId
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildUsingGET(buildId: string, projectId: string, options?: any) {
            return BuildResourceApiFp(configuration).getBuildUsingGET(buildId, projectId, options)(axios, basePath);
        },
        /**
         *
         * @summary getLogs
         * @param {string} buildId buildId
         * @param {string} logsBucket logsBucket
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogsUsingGET(buildId: string, logsBucket: string, projectId: string, options?: any) {
            return BuildResourceApiFp(configuration).getLogsUsingGET(buildId, logsBucket, projectId, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * BuildResourceApi - object-oriented interface
 * @export
 * @class BuildResourceApi
 * @extends {BaseAPI}
 */
export class BuildResourceApi extends BaseAPI {
    /**
     *
     * @summary getBuild
     * @param {string} buildId buildId
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildResourceApi
     */
    public getBuildUsingGET(buildId: string, projectId: string, options?: any) {
        return BuildResourceApiFp(this.configuration).getBuildUsingGET(buildId, projectId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getLogs
     * @param {string} buildId buildId
     * @param {string} logsBucket logsBucket
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildResourceApi
     */
    public getLogsUsingGET(buildId: string, logsBucket: string, projectId: string, options?: any) {
        return BuildResourceApiFp(this.configuration).getLogsUsingGET(buildId, logsBucket, projectId, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * CustomerResourceApi - axios parameter creator
 * @export
 */
export const CustomerResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createCustomer
         * @param {Customer} customer customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerUsingPOST(customer: Customer, options: any = {}): RequestArgs {
            // verify required parameter 'customer' is not null or undefined
            if (customer === null || customer === undefined) {
                throw new RequiredError(
                    'customer',
                    'Required parameter customer was null or undefined when calling createCustomerUsingPOST.'
                );
            }
            const localVarPath = `/api/customers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Customer' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(customer !== undefined ? customer : {})
                : customer || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteCustomerUsingDELETE.'
                );
            }
            const localVarPath = `/api/customers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllCustomers
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomersUsingGET(sorted?: boolean, unsorted?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/customers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getCustomerUsingGET.'
                );
            }
            const localVarPath = `/api/customers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getProductsOfCustomer
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsOfCustomerUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getProductsOfCustomerUsingGET.'
                );
            }
            const localVarPath = `/api/customers/{id}/products`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateCustomer
         * @param {Customer} customer customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT(customer: Customer, options: any = {}): RequestArgs {
            // verify required parameter 'customer' is not null or undefined
            if (customer === null || customer === undefined) {
                throw new RequiredError(
                    'customer',
                    'Required parameter customer was null or undefined when calling updateCustomerUsingPUT.'
                );
            }
            const localVarPath = `/api/customers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Customer' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(customer !== undefined ? customer : {})
                : customer || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * CustomerResourceApi - functional programming interface
 * @export
 */
export const CustomerResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createCustomer
         * @param {Customer} customer customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerUsingPOST(
            customer: Customer,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer> {
            const localVarAxiosArgs = CustomerResourceApiAxiosParamCreator(configuration).createCustomerUsingPOST(
                customer,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = CustomerResourceApiAxiosParamCreator(configuration).deleteCustomerUsingDELETE(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllCustomers
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomersUsingGET(
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Customer>> {
            const localVarAxiosArgs = CustomerResourceApiAxiosParamCreator(configuration).getAllCustomersUsingGET(
                sorted,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer> {
            const localVarAxiosArgs = CustomerResourceApiAxiosParamCreator(configuration).getCustomerUsingGET(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getProductsOfCustomer
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsOfCustomerUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
            const localVarAxiosArgs = CustomerResourceApiAxiosParamCreator(configuration).getProductsOfCustomerUsingGET(
                id,
                sorted,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateCustomer
         * @param {Customer} customer customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT(
            customer: Customer,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer> {
            const localVarAxiosArgs = CustomerResourceApiAxiosParamCreator(configuration).updateCustomerUsingPUT(
                customer,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * CustomerResourceApi - factory interface
 * @export
 */
export const CustomerResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createCustomer
         * @param {Customer} customer customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerUsingPOST(customer: Customer, options?: any) {
            return CustomerResourceApiFp(configuration).createCustomerUsingPOST(customer, options)(axios, basePath);
        },
        /**
         *
         * @summary deleteCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomerUsingDELETE(id: number, options?: any) {
            return CustomerResourceApiFp(configuration).deleteCustomerUsingDELETE(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllCustomers
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomersUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
            return CustomerResourceApiFp(configuration).getAllCustomersUsingGET(sorted, unsorted, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getCustomer
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerUsingGET(id: number, options?: any) {
            return CustomerResourceApiFp(configuration).getCustomerUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getProductsOfCustomer
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsOfCustomerUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
            return CustomerResourceApiFp(configuration).getProductsOfCustomerUsingGET(id, sorted, unsorted, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary updateCustomer
         * @param {Customer} customer customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerUsingPUT(customer: Customer, options?: any) {
            return CustomerResourceApiFp(configuration).updateCustomerUsingPUT(customer, options)(axios, basePath);
        }
    };
};

/**
 * CustomerResourceApi - object-oriented interface
 * @export
 * @class CustomerResourceApi
 * @extends {BaseAPI}
 */
export class CustomerResourceApi extends BaseAPI {
    /**
     *
     * @summary createCustomer
     * @param {Customer} customer customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerResourceApi
     */
    public createCustomerUsingPOST(customer: Customer, options?: any) {
        return CustomerResourceApiFp(this.configuration).createCustomerUsingPOST(customer, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteCustomer
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerResourceApi
     */
    public deleteCustomerUsingDELETE(id: number, options?: any) {
        return CustomerResourceApiFp(this.configuration).deleteCustomerUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllCustomers
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerResourceApi
     */
    public getAllCustomersUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
        return CustomerResourceApiFp(this.configuration).getAllCustomersUsingGET(sorted, unsorted, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getCustomer
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerResourceApi
     */
    public getCustomerUsingGET(id: number, options?: any) {
        return CustomerResourceApiFp(this.configuration).getCustomerUsingGET(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary getProductsOfCustomer
     * @param {number} id id
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerResourceApi
     */
    public getProductsOfCustomerUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
        return CustomerResourceApiFp(this.configuration).getProductsOfCustomerUsingGET(id, sorted, unsorted, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateCustomer
     * @param {Customer} customer customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerResourceApi
     */
    public updateCustomerUsingPUT(customer: Customer, options?: any) {
        return CustomerResourceApiFp(this.configuration).updateCustomerUsingPUT(customer, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * DefaultExternalToolResourceApi - axios parameter creator
 * @export
 */
export const DefaultExternalToolResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createDefaultExternalTool
         * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultExternalToolUsingPOST(defaultExternalTool: DefaultExternalTool, options: any = {}): RequestArgs {
            // verify required parameter 'defaultExternalTool' is not null or undefined
            if (defaultExternalTool === null || defaultExternalTool === undefined) {
                throw new RequiredError(
                    'defaultExternalTool',
                    'Required parameter defaultExternalTool was null or undefined when calling createDefaultExternalToolUsingPOST.'
                );
            }
            const localVarPath = `/api/default-external-tools`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'DefaultExternalTool' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(defaultExternalTool !== undefined ? defaultExternalTool : {})
                : defaultExternalTool || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteDefaultExternalTool
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefaultExternalToolUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteDefaultExternalToolUsingDELETE.'
                );
            }
            const localVarPath = `/api/default-external-tools/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllDefaultExternalTools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefaultExternalToolsUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/default-external-tools`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateDefaultExternalTool
         * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultExternalToolUsingPUT(defaultExternalTool: DefaultExternalTool, options: any = {}): RequestArgs {
            // verify required parameter 'defaultExternalTool' is not null or undefined
            if (defaultExternalTool === null || defaultExternalTool === undefined) {
                throw new RequiredError(
                    'defaultExternalTool',
                    'Required parameter defaultExternalTool was null or undefined when calling updateDefaultExternalToolUsingPUT.'
                );
            }
            const localVarPath = `/api/default-external-tools`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'DefaultExternalTool' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(defaultExternalTool !== undefined ? defaultExternalTool : {})
                : defaultExternalTool || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * DefaultExternalToolResourceApi - functional programming interface
 * @export
 */
export const DefaultExternalToolResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createDefaultExternalTool
         * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultExternalToolUsingPOST(
            defaultExternalTool: DefaultExternalTool,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultExternalTool> {
            const localVarAxiosArgs = DefaultExternalToolResourceApiAxiosParamCreator(
                configuration
            ).createDefaultExternalToolUsingPOST(defaultExternalTool, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteDefaultExternalTool
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefaultExternalToolUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultExternalToolResourceApiAxiosParamCreator(
                configuration
            ).deleteDefaultExternalToolUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllDefaultExternalTools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefaultExternalToolsUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DefaultExternalTool>> {
            const localVarAxiosArgs = DefaultExternalToolResourceApiAxiosParamCreator(
                configuration
            ).getAllDefaultExternalToolsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateDefaultExternalTool
         * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultExternalToolUsingPUT(
            defaultExternalTool: DefaultExternalTool,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultExternalTool> {
            const localVarAxiosArgs = DefaultExternalToolResourceApiAxiosParamCreator(
                configuration
            ).updateDefaultExternalToolUsingPUT(defaultExternalTool, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * DefaultExternalToolResourceApi - factory interface
 * @export
 */
export const DefaultExternalToolResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createDefaultExternalTool
         * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultExternalToolUsingPOST(defaultExternalTool: DefaultExternalTool, options?: any) {
            return DefaultExternalToolResourceApiFp(configuration).createDefaultExternalToolUsingPOST(
                defaultExternalTool,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteDefaultExternalTool
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefaultExternalToolUsingDELETE(id: number, options?: any) {
            return DefaultExternalToolResourceApiFp(configuration).deleteDefaultExternalToolUsingDELETE(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllDefaultExternalTools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDefaultExternalToolsUsingGET(options?: any) {
            return DefaultExternalToolResourceApiFp(configuration).getAllDefaultExternalToolsUsingGET(options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary updateDefaultExternalTool
         * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultExternalToolUsingPUT(defaultExternalTool: DefaultExternalTool, options?: any) {
            return DefaultExternalToolResourceApiFp(configuration).updateDefaultExternalToolUsingPUT(
                defaultExternalTool,
                options
            )(axios, basePath);
        }
    };
};

/**
 * DefaultExternalToolResourceApi - object-oriented interface
 * @export
 * @class DefaultExternalToolResourceApi
 * @extends {BaseAPI}
 */
export class DefaultExternalToolResourceApi extends BaseAPI {
    /**
     *
     * @summary createDefaultExternalTool
     * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultExternalToolResourceApi
     */
    public createDefaultExternalToolUsingPOST(defaultExternalTool: DefaultExternalTool, options?: any) {
        return DefaultExternalToolResourceApiFp(this.configuration).createDefaultExternalToolUsingPOST(
            defaultExternalTool,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteDefaultExternalTool
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultExternalToolResourceApi
     */
    public deleteDefaultExternalToolUsingDELETE(id: number, options?: any) {
        return DefaultExternalToolResourceApiFp(this.configuration).deleteDefaultExternalToolUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllDefaultExternalTools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultExternalToolResourceApi
     */
    public getAllDefaultExternalToolsUsingGET(options?: any) {
        return DefaultExternalToolResourceApiFp(this.configuration).getAllDefaultExternalToolsUsingGET(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateDefaultExternalTool
     * @param {DefaultExternalTool} defaultExternalTool defaultExternalTool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultExternalToolResourceApi
     */
    public updateDefaultExternalToolUsingPUT(defaultExternalTool: DefaultExternalTool, options?: any) {
        return DefaultExternalToolResourceApiFp(this.configuration).updateDefaultExternalToolUsingPUT(
            defaultExternalTool,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * DeployableContainerTagsResourceApi - axios parameter creator
 * @export
 */
export const DeployableContainerTagsResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getDeployableGitBranchTagsForApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployableGitBranchTagsForApplicationUsingGET(applicationId: number, options: any = {}): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling getDeployableGitBranchTagsForApplicationUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployable-container-tags`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * DeployableContainerTagsResourceApi - functional programming interface
 * @export
 */
export const DeployableContainerTagsResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getDeployableGitBranchTagsForApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployableGitBranchTagsForApplicationUsingGET(
            applicationId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeployableGitBranchDTO>> {
            const localVarAxiosArgs = DeployableContainerTagsResourceApiAxiosParamCreator(
                configuration
            ).getDeployableGitBranchTagsForApplicationUsingGET(applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * DeployableContainerTagsResourceApi - factory interface
 * @export
 */
export const DeployableContainerTagsResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getDeployableGitBranchTagsForApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployableGitBranchTagsForApplicationUsingGET(applicationId: number, options?: any) {
            return DeployableContainerTagsResourceApiFp(configuration).getDeployableGitBranchTagsForApplicationUsingGET(
                applicationId,
                options
            )(axios, basePath);
        }
    };
};

/**
 * DeployableContainerTagsResourceApi - object-oriented interface
 * @export
 * @class DeployableContainerTagsResourceApi
 * @extends {BaseAPI}
 */
export class DeployableContainerTagsResourceApi extends BaseAPI {
    /**
     *
     * @summary getDeployableGitBranchTagsForApplication
     * @param {number} applicationId applicationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployableContainerTagsResourceApi
     */
    public getDeployableGitBranchTagsForApplicationUsingGET(applicationId: number, options?: any) {
        return DeployableContainerTagsResourceApiFp(
            this.configuration
        ).getDeployableGitBranchTagsForApplicationUsingGET(applicationId, options)(this.axios, this.basePath);
    }
}

/**
 * DeployableGitBranchResourceApi - axios parameter creator
 * @export
 */
export const DeployableGitBranchResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary deleteDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployableGitBranchesForApplicationUsingDELETE(
            applicationId: number,
            deployableBranchId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling deleteDeployableGitBranchesForApplicationUsingDELETE.'
                );
            }
            // verify required parameter 'deployableBranchId' is not null or undefined
            if (deployableBranchId === null || deployableBranchId === undefined) {
                throw new RequiredError(
                    'deployableBranchId',
                    'Required parameter deployableBranchId was null or undefined when calling deleteDeployableGitBranchesForApplicationUsingDELETE.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployable-branches/{deployableBranchId}`
                .replace(`{${'applicationId'}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${'deployableBranchId'}}`, encodeURIComponent(String(deployableBranchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteDeployableGitBranches
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployableGitBranchesUsingPUT(
            applicationId: number,
            deployableBranchId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling deleteDeployableGitBranchesUsingPUT.'
                );
            }
            // verify required parameter 'deployableBranchId' is not null or undefined
            if (deployableBranchId === null || deployableBranchId === undefined) {
                throw new RequiredError(
                    'deployableBranchId',
                    'Required parameter deployableBranchId was null or undefined when calling deleteDeployableGitBranchesUsingPUT.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployable-branches/{deployableBranchId}/delete`
                .replace(`{${'applicationId'}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${'deployableBranchId'}}`, encodeURIComponent(String(deployableBranchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployableGitBranchesForApplicationUsingGET(applicationId: number, options: any = {}): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling getDeployableGitBranchesForApplicationUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployable-branches`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary pauseDeployableGitBranches
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseDeployableGitBranchesUsingPUT(
            applicationId: number,
            deployableBranchId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling pauseDeployableGitBranchesUsingPUT.'
                );
            }
            // verify required parameter 'deployableBranchId' is not null or undefined
            if (deployableBranchId === null || deployableBranchId === undefined) {
                throw new RequiredError(
                    'deployableBranchId',
                    'Required parameter deployableBranchId was null or undefined when calling pauseDeployableGitBranchesUsingPUT.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployable-branches/{deployableBranchId}/pause`
                .replace(`{${'applicationId'}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${'deployableBranchId'}}`, encodeURIComponent(String(deployableBranchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary setDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {DeployableGitBranch} deployableGitBranch deployableGitBranch
         * @param {boolean} [_delete] delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeployableGitBranchesForApplicationUsingPOST(
            applicationId: number,
            deployableGitBranch: DeployableGitBranch,
            _delete?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling setDeployableGitBranchesForApplicationUsingPOST.'
                );
            }
            // verify required parameter 'deployableGitBranch' is not null or undefined
            if (deployableGitBranch === null || deployableGitBranch === undefined) {
                throw new RequiredError(
                    'deployableGitBranch',
                    'Required parameter deployableGitBranch was null or undefined when calling setDeployableGitBranchesForApplicationUsingPOST.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployable-branches`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (_delete !== undefined) {
                localVarQueryParameter['delete'] = _delete;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'DeployableGitBranch' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(deployableGitBranch !== undefined ? deployableGitBranch : {})
                : deployableGitBranch || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * DeployableGitBranchResourceApi - functional programming interface
 * @export
 */
export const DeployableGitBranchResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary deleteDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployableGitBranchesForApplicationUsingDELETE(
            applicationId: number,
            deployableBranchId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DeployableGitBranchResourceApiAxiosParamCreator(
                configuration
            ).deleteDeployableGitBranchesForApplicationUsingDELETE(applicationId, deployableBranchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteDeployableGitBranches
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployableGitBranchesUsingPUT(
            applicationId: number,
            deployableBranchId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DeployableGitBranchResourceApiAxiosParamCreator(
                configuration
            ).deleteDeployableGitBranchesUsingPUT(applicationId, deployableBranchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployableGitBranchesForApplicationUsingGET(
            applicationId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeployableGitBranch>> {
            const localVarAxiosArgs = DeployableGitBranchResourceApiAxiosParamCreator(
                configuration
            ).getDeployableGitBranchesForApplicationUsingGET(applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary pauseDeployableGitBranches
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseDeployableGitBranchesUsingPUT(
            applicationId: number,
            deployableBranchId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = DeployableGitBranchResourceApiAxiosParamCreator(
                configuration
            ).pauseDeployableGitBranchesUsingPUT(applicationId, deployableBranchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary setDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {DeployableGitBranch} deployableGitBranch deployableGitBranch
         * @param {boolean} [_delete] delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeployableGitBranchesForApplicationUsingPOST(
            applicationId: number,
            deployableGitBranch: DeployableGitBranch,
            _delete?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployableGitBranch> {
            const localVarAxiosArgs = DeployableGitBranchResourceApiAxiosParamCreator(
                configuration
            ).setDeployableGitBranchesForApplicationUsingPOST(applicationId, deployableGitBranch, _delete, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * DeployableGitBranchResourceApi - factory interface
 * @export
 */
export const DeployableGitBranchResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary deleteDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployableGitBranchesForApplicationUsingDELETE(
            applicationId: number,
            deployableBranchId: number,
            options?: any
        ) {
            return DeployableGitBranchResourceApiFp(configuration).deleteDeployableGitBranchesForApplicationUsingDELETE(
                applicationId,
                deployableBranchId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteDeployableGitBranches
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployableGitBranchesUsingPUT(applicationId: number, deployableBranchId: number, options?: any) {
            return DeployableGitBranchResourceApiFp(configuration).deleteDeployableGitBranchesUsingPUT(
                applicationId,
                deployableBranchId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployableGitBranchesForApplicationUsingGET(applicationId: number, options?: any) {
            return DeployableGitBranchResourceApiFp(configuration).getDeployableGitBranchesForApplicationUsingGET(
                applicationId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary pauseDeployableGitBranches
         * @param {number} applicationId applicationId
         * @param {number} deployableBranchId deployableBranchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseDeployableGitBranchesUsingPUT(applicationId: number, deployableBranchId: number, options?: any) {
            return DeployableGitBranchResourceApiFp(configuration).pauseDeployableGitBranchesUsingPUT(
                applicationId,
                deployableBranchId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary setDeployableGitBranchesForApplication
         * @param {number} applicationId applicationId
         * @param {DeployableGitBranch} deployableGitBranch deployableGitBranch
         * @param {boolean} [_delete] delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeployableGitBranchesForApplicationUsingPOST(
            applicationId: number,
            deployableGitBranch: DeployableGitBranch,
            _delete?: boolean,
            options?: any
        ) {
            return DeployableGitBranchResourceApiFp(configuration).setDeployableGitBranchesForApplicationUsingPOST(
                applicationId,
                deployableGitBranch,
                _delete,
                options
            )(axios, basePath);
        }
    };
};

/**
 * DeployableGitBranchResourceApi - object-oriented interface
 * @export
 * @class DeployableGitBranchResourceApi
 * @extends {BaseAPI}
 */
export class DeployableGitBranchResourceApi extends BaseAPI {
    /**
     *
     * @summary deleteDeployableGitBranchesForApplication
     * @param {number} applicationId applicationId
     * @param {number} deployableBranchId deployableBranchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployableGitBranchResourceApi
     */
    public deleteDeployableGitBranchesForApplicationUsingDELETE(
        applicationId: number,
        deployableBranchId: number,
        options?: any
    ) {
        return DeployableGitBranchResourceApiFp(
            this.configuration
        ).deleteDeployableGitBranchesForApplicationUsingDELETE(applicationId, deployableBranchId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteDeployableGitBranches
     * @param {number} applicationId applicationId
     * @param {number} deployableBranchId deployableBranchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployableGitBranchResourceApi
     */
    public deleteDeployableGitBranchesUsingPUT(applicationId: number, deployableBranchId: number, options?: any) {
        return DeployableGitBranchResourceApiFp(this.configuration).deleteDeployableGitBranchesUsingPUT(
            applicationId,
            deployableBranchId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getDeployableGitBranchesForApplication
     * @param {number} applicationId applicationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployableGitBranchResourceApi
     */
    public getDeployableGitBranchesForApplicationUsingGET(applicationId: number, options?: any) {
        return DeployableGitBranchResourceApiFp(this.configuration).getDeployableGitBranchesForApplicationUsingGET(
            applicationId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary pauseDeployableGitBranches
     * @param {number} applicationId applicationId
     * @param {number} deployableBranchId deployableBranchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployableGitBranchResourceApi
     */
    public pauseDeployableGitBranchesUsingPUT(applicationId: number, deployableBranchId: number, options?: any) {
        return DeployableGitBranchResourceApiFp(this.configuration).pauseDeployableGitBranchesUsingPUT(
            applicationId,
            deployableBranchId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary setDeployableGitBranchesForApplication
     * @param {number} applicationId applicationId
     * @param {DeployableGitBranch} deployableGitBranch deployableGitBranch
     * @param {boolean} [_delete] delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployableGitBranchResourceApi
     */
    public setDeployableGitBranchesForApplicationUsingPOST(
        applicationId: number,
        deployableGitBranch: DeployableGitBranch,
        _delete?: boolean,
        options?: any
    ) {
        return DeployableGitBranchResourceApiFp(this.configuration).setDeployableGitBranchesForApplicationUsingPOST(
            applicationId,
            deployableGitBranch,
            _delete,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * DeploymentStageResourceApi - axios parameter creator
 * @export
 */
export const DeploymentStageResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createDeploymentStage
         * @param {DeploymentStage} deploymentStage deploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeploymentStageUsingPOST(deploymentStage: DeploymentStage, options: any = {}): RequestArgs {
            // verify required parameter 'deploymentStage' is not null or undefined
            if (deploymentStage === null || deploymentStage === undefined) {
                throw new RequiredError(
                    'deploymentStage',
                    'Required parameter deploymentStage was null or undefined when calling createDeploymentStageUsingPOST.'
                );
            }
            const localVarPath = `/api/deployment-stages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'DeploymentStage' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(deploymentStage !== undefined ? deploymentStage : {})
                : deploymentStage || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteDeploymentStage
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeploymentStageUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteDeploymentStageUsingDELETE.'
                );
            }
            const localVarPath = `/api/deployment-stages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllDeploymentStages
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDeploymentStagesUsingGET(sorted?: boolean, unsorted?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/deployment-stages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getDeploymentStage
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentStageUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getDeploymentStageUsingGET.'
                );
            }
            const localVarPath = `/api/deployment-stages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateDeploymentStage
         * @param {DeploymentStage} deploymentStage deploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeploymentStageUsingPUT(deploymentStage: DeploymentStage, options: any = {}): RequestArgs {
            // verify required parameter 'deploymentStage' is not null or undefined
            if (deploymentStage === null || deploymentStage === undefined) {
                throw new RequiredError(
                    'deploymentStage',
                    'Required parameter deploymentStage was null or undefined when calling updateDeploymentStageUsingPUT.'
                );
            }
            const localVarPath = `/api/deployment-stages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'DeploymentStage' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(deploymentStage !== undefined ? deploymentStage : {})
                : deploymentStage || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * DeploymentStageResourceApi - functional programming interface
 * @export
 */
export const DeploymentStageResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createDeploymentStage
         * @param {DeploymentStage} deploymentStage deploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeploymentStageUsingPOST(
            deploymentStage: DeploymentStage,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentStage> {
            const localVarAxiosArgs = DeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).createDeploymentStageUsingPOST(deploymentStage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteDeploymentStage
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeploymentStageUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).deleteDeploymentStageUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllDeploymentStages
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDeploymentStagesUsingGET(
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeploymentStage>> {
            const localVarAxiosArgs = DeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).getAllDeploymentStagesUsingGET(sorted, unsorted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getDeploymentStage
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentStageUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentStage> {
            const localVarAxiosArgs = DeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).getDeploymentStageUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateDeploymentStage
         * @param {DeploymentStage} deploymentStage deploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeploymentStageUsingPUT(
            deploymentStage: DeploymentStage,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentStage> {
            const localVarAxiosArgs = DeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).updateDeploymentStageUsingPUT(deploymentStage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * DeploymentStageResourceApi - factory interface
 * @export
 */
export const DeploymentStageResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createDeploymentStage
         * @param {DeploymentStage} deploymentStage deploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeploymentStageUsingPOST(deploymentStage: DeploymentStage, options?: any) {
            return DeploymentStageResourceApiFp(configuration).createDeploymentStageUsingPOST(deploymentStage, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary deleteDeploymentStage
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeploymentStageUsingDELETE(id: number, options?: any) {
            return DeploymentStageResourceApiFp(configuration).deleteDeploymentStageUsingDELETE(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllDeploymentStages
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDeploymentStagesUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
            return DeploymentStageResourceApiFp(configuration).getAllDeploymentStagesUsingGET(
                sorted,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getDeploymentStage
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentStageUsingGET(id: number, options?: any) {
            return DeploymentStageResourceApiFp(configuration).getDeploymentStageUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary updateDeploymentStage
         * @param {DeploymentStage} deploymentStage deploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeploymentStageUsingPUT(deploymentStage: DeploymentStage, options?: any) {
            return DeploymentStageResourceApiFp(configuration).updateDeploymentStageUsingPUT(deploymentStage, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * DeploymentStageResourceApi - object-oriented interface
 * @export
 * @class DeploymentStageResourceApi
 * @extends {BaseAPI}
 */
export class DeploymentStageResourceApi extends BaseAPI {
    /**
     *
     * @summary createDeploymentStage
     * @param {DeploymentStage} deploymentStage deploymentStage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentStageResourceApi
     */
    public createDeploymentStageUsingPOST(deploymentStage: DeploymentStage, options?: any) {
        return DeploymentStageResourceApiFp(this.configuration).createDeploymentStageUsingPOST(
            deploymentStage,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteDeploymentStage
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentStageResourceApi
     */
    public deleteDeploymentStageUsingDELETE(id: number, options?: any) {
        return DeploymentStageResourceApiFp(this.configuration).deleteDeploymentStageUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllDeploymentStages
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentStageResourceApi
     */
    public getAllDeploymentStagesUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
        return DeploymentStageResourceApiFp(this.configuration).getAllDeploymentStagesUsingGET(
            sorted,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getDeploymentStage
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentStageResourceApi
     */
    public getDeploymentStageUsingGET(id: number, options?: any) {
        return DeploymentStageResourceApiFp(this.configuration).getDeploymentStageUsingGET(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateDeploymentStage
     * @param {DeploymentStage} deploymentStage deploymentStage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentStageResourceApi
     */
    public updateDeploymentStageUsingPUT(deploymentStage: DeploymentStage, options?: any) {
        return DeploymentStageResourceApiFp(this.configuration).updateDeploymentStageUsingPUT(deploymentStage, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * DomainResourceApi - axios parameter creator
 * @export
 */
export const DomainResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createDomain
         * @param {Domain} domain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainUsingPOST(domain: Domain, options: any = {}): RequestArgs {
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError(
                    'domain',
                    'Required parameter domain was null or undefined when calling createDomainUsingPOST.'
                );
            }
            const localVarPath = `/api/domains`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Domain' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(domain !== undefined ? domain : {})
                : domain || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteDomain
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteDomainUsingDELETE.'
                );
            }
            const localVarPath = `/api/domains/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllDomains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDomainsUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/domains`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getLightProductsOfDomain
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightProductsOfDomainUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getLightProductsOfDomainUsingGET.'
                );
            }
            const localVarPath = `/api/domains/{id}/products`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateDomain
         * @param {Domain} domain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainUsingPUT(domain: Domain, options: any = {}): RequestArgs {
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError(
                    'domain',
                    'Required parameter domain was null or undefined when calling updateDomainUsingPUT.'
                );
            }
            const localVarPath = `/api/domains`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Domain' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(domain !== undefined ? domain : {})
                : domain || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * DomainResourceApi - functional programming interface
 * @export
 */
export const DomainResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createDomain
         * @param {Domain} domain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainUsingPOST(
            domain: Domain,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainResourceApiAxiosParamCreator(configuration).createDomainUsingPOST(
                domain,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteDomain
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DomainResourceApiAxiosParamCreator(configuration).deleteDomainUsingDELETE(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllDomains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDomainsUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Domain>> {
            const localVarAxiosArgs = DomainResourceApiAxiosParamCreator(configuration).getAllDomainsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getLightProductsOfDomain
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightProductsOfDomainUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LightProductDTO>> {
            const localVarAxiosArgs = DomainResourceApiAxiosParamCreator(
                configuration
            ).getLightProductsOfDomainUsingGET(id, sorted, unsorted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateDomain
         * @param {Domain} domain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainUsingPUT(
            domain: Domain,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain> {
            const localVarAxiosArgs = DomainResourceApiAxiosParamCreator(configuration).updateDomainUsingPUT(
                domain,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * DomainResourceApi - factory interface
 * @export
 */
export const DomainResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createDomain
         * @param {Domain} domain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomainUsingPOST(domain: Domain, options?: any) {
            return DomainResourceApiFp(configuration).createDomainUsingPOST(domain, options)(axios, basePath);
        },
        /**
         *
         * @summary deleteDomain
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomainUsingDELETE(id: number, options?: any) {
            return DomainResourceApiFp(configuration).deleteDomainUsingDELETE(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllDomains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDomainsUsingGET(options?: any) {
            return DomainResourceApiFp(configuration).getAllDomainsUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary getLightProductsOfDomain
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightProductsOfDomainUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
            return DomainResourceApiFp(configuration).getLightProductsOfDomainUsingGET(id, sorted, unsorted, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary updateDomain
         * @param {Domain} domain domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomainUsingPUT(domain: Domain, options?: any) {
            return DomainResourceApiFp(configuration).updateDomainUsingPUT(domain, options)(axios, basePath);
        }
    };
};

/**
 * DomainResourceApi - object-oriented interface
 * @export
 * @class DomainResourceApi
 * @extends {BaseAPI}
 */
export class DomainResourceApi extends BaseAPI {
    /**
     *
     * @summary createDomain
     * @param {Domain} domain domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainResourceApi
     */
    public createDomainUsingPOST(domain: Domain, options?: any) {
        return DomainResourceApiFp(this.configuration).createDomainUsingPOST(domain, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteDomain
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainResourceApi
     */
    public deleteDomainUsingDELETE(id: number, options?: any) {
        return DomainResourceApiFp(this.configuration).deleteDomainUsingDELETE(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllDomains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainResourceApi
     */
    public getAllDomainsUsingGET(options?: any) {
        return DomainResourceApiFp(this.configuration).getAllDomainsUsingGET(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary getLightProductsOfDomain
     * @param {number} id id
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainResourceApi
     */
    public getLightProductsOfDomainUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
        return DomainResourceApiFp(this.configuration).getLightProductsOfDomainUsingGET(id, sorted, unsorted, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateDomain
     * @param {Domain} domain domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainResourceApi
     */
    public updateDomainUsingPUT(domain: Domain, options?: any) {
        return DomainResourceApiFp(this.configuration).updateDomainUsingPUT(domain, options)(this.axios, this.basePath);
    }
}

/**
 * EntityPermissionResourceApi - axios parameter creator
 * @export
 */
export const EntityPermissionResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createEntityPermission
         * @param {EntityPermission} entityPermission entityPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityPermissionUsingPOST(entityPermission: EntityPermission, options: any = {}): RequestArgs {
            // verify required parameter 'entityPermission' is not null or undefined
            if (entityPermission === null || entityPermission === undefined) {
                throw new RequiredError(
                    'entityPermission',
                    'Required parameter entityPermission was null or undefined when calling createEntityPermissionUsingPOST.'
                );
            }
            const localVarPath = `/api/entity-permissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'EntityPermission' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(entityPermission !== undefined ? entityPermission : {})
                : entityPermission || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteEntityPermission
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityPermissionUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteEntityPermissionUsingDELETE.'
                );
            }
            const localVarPath = `/api/entity-permissions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllEntityPermissions
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntityPermissionsUsingGET(sorted?: boolean, unsorted?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/entity-permissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getEntityPermission
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityPermissionUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getEntityPermissionUsingGET.'
                );
            }
            const localVarPath = `/api/entity-permissions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateEntityPermission
         * @param {EntityPermission} entityPermission entityPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityPermissionUsingPUT(entityPermission: EntityPermission, options: any = {}): RequestArgs {
            // verify required parameter 'entityPermission' is not null or undefined
            if (entityPermission === null || entityPermission === undefined) {
                throw new RequiredError(
                    'entityPermission',
                    'Required parameter entityPermission was null or undefined when calling updateEntityPermissionUsingPUT.'
                );
            }
            const localVarPath = `/api/entity-permissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'EntityPermission' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(entityPermission !== undefined ? entityPermission : {})
                : entityPermission || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * EntityPermissionResourceApi - functional programming interface
 * @export
 */
export const EntityPermissionResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createEntityPermission
         * @param {EntityPermission} entityPermission entityPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityPermissionUsingPOST(
            entityPermission: EntityPermission,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityPermission> {
            const localVarAxiosArgs = EntityPermissionResourceApiAxiosParamCreator(
                configuration
            ).createEntityPermissionUsingPOST(entityPermission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteEntityPermission
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityPermissionUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = EntityPermissionResourceApiAxiosParamCreator(
                configuration
            ).deleteEntityPermissionUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllEntityPermissions
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntityPermissionsUsingGET(
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntityPermission>> {
            const localVarAxiosArgs = EntityPermissionResourceApiAxiosParamCreator(
                configuration
            ).getAllEntityPermissionsUsingGET(sorted, unsorted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getEntityPermission
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityPermissionUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityPermission> {
            const localVarAxiosArgs = EntityPermissionResourceApiAxiosParamCreator(
                configuration
            ).getEntityPermissionUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateEntityPermission
         * @param {EntityPermission} entityPermission entityPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityPermissionUsingPUT(
            entityPermission: EntityPermission,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityPermission> {
            const localVarAxiosArgs = EntityPermissionResourceApiAxiosParamCreator(
                configuration
            ).updateEntityPermissionUsingPUT(entityPermission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * EntityPermissionResourceApi - factory interface
 * @export
 */
export const EntityPermissionResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createEntityPermission
         * @param {EntityPermission} entityPermission entityPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityPermissionUsingPOST(entityPermission: EntityPermission, options?: any) {
            return EntityPermissionResourceApiFp(configuration).createEntityPermissionUsingPOST(
                entityPermission,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteEntityPermission
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityPermissionUsingDELETE(id: number, options?: any) {
            return EntityPermissionResourceApiFp(configuration).deleteEntityPermissionUsingDELETE(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllEntityPermissions
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntityPermissionsUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
            return EntityPermissionResourceApiFp(configuration).getAllEntityPermissionsUsingGET(
                sorted,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getEntityPermission
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityPermissionUsingGET(id: number, options?: any) {
            return EntityPermissionResourceApiFp(configuration).getEntityPermissionUsingGET(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary updateEntityPermission
         * @param {EntityPermission} entityPermission entityPermission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityPermissionUsingPUT(entityPermission: EntityPermission, options?: any) {
            return EntityPermissionResourceApiFp(configuration).updateEntityPermissionUsingPUT(
                entityPermission,
                options
            )(axios, basePath);
        }
    };
};

/**
 * EntityPermissionResourceApi - object-oriented interface
 * @export
 * @class EntityPermissionResourceApi
 * @extends {BaseAPI}
 */
export class EntityPermissionResourceApi extends BaseAPI {
    /**
     *
     * @summary createEntityPermission
     * @param {EntityPermission} entityPermission entityPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityPermissionResourceApi
     */
    public createEntityPermissionUsingPOST(entityPermission: EntityPermission, options?: any) {
        return EntityPermissionResourceApiFp(this.configuration).createEntityPermissionUsingPOST(
            entityPermission,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteEntityPermission
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityPermissionResourceApi
     */
    public deleteEntityPermissionUsingDELETE(id: number, options?: any) {
        return EntityPermissionResourceApiFp(this.configuration).deleteEntityPermissionUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllEntityPermissions
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityPermissionResourceApi
     */
    public getAllEntityPermissionsUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
        return EntityPermissionResourceApiFp(this.configuration).getAllEntityPermissionsUsingGET(
            sorted,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getEntityPermission
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityPermissionResourceApi
     */
    public getEntityPermissionUsingGET(id: number, options?: any) {
        return EntityPermissionResourceApiFp(this.configuration).getEntityPermissionUsingGET(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateEntityPermission
     * @param {EntityPermission} entityPermission entityPermission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityPermissionResourceApi
     */
    public updateEntityPermissionUsingPUT(entityPermission: EntityPermission, options?: any) {
        return EntityPermissionResourceApiFp(this.configuration).updateEntityPermissionUsingPUT(
            entityPermission,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ExternalServicePropertyNameResourceApi - axios parameter creator
 * @export
 */
export const ExternalServicePropertyNameResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getExternalServicePropertyNames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalServicePropertyNamesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/external-service-property-names`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ExternalServicePropertyNameResourceApi - functional programming interface
 * @export
 */
export const ExternalServicePropertyNameResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getExternalServicePropertyNames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalServicePropertyNamesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = ExternalServicePropertyNameResourceApiAxiosParamCreator(
                configuration
            ).getExternalServicePropertyNamesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ExternalServicePropertyNameResourceApi - factory interface
 * @export
 */
export const ExternalServicePropertyNameResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getExternalServicePropertyNames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalServicePropertyNamesUsingGET(options?: any) {
            return ExternalServicePropertyNameResourceApiFp(configuration).getExternalServicePropertyNamesUsingGET(
                options
            )(axios, basePath);
        }
    };
};

/**
 * ExternalServicePropertyNameResourceApi - object-oriented interface
 * @export
 * @class ExternalServicePropertyNameResourceApi
 * @extends {BaseAPI}
 */
export class ExternalServicePropertyNameResourceApi extends BaseAPI {
    /**
     *
     * @summary getExternalServicePropertyNames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServicePropertyNameResourceApi
     */
    public getExternalServicePropertyNamesUsingGET(options?: any) {
        return ExternalServicePropertyNameResourceApiFp(this.configuration).getExternalServicePropertyNamesUsingGET(
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ExternalServicePropertyTypeResourceApi - axios parameter creator
 * @export
 */
export const ExternalServicePropertyTypeResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getExternalServicePropertyValueTypesNames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalServicePropertyValueTypesNamesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/external-service-property-types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ExternalServicePropertyTypeResourceApi - functional programming interface
 * @export
 */
export const ExternalServicePropertyTypeResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getExternalServicePropertyValueTypesNames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalServicePropertyValueTypesNamesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = ExternalServicePropertyTypeResourceApiAxiosParamCreator(
                configuration
            ).getExternalServicePropertyValueTypesNamesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ExternalServicePropertyTypeResourceApi - factory interface
 * @export
 */
export const ExternalServicePropertyTypeResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getExternalServicePropertyValueTypesNames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalServicePropertyValueTypesNamesUsingGET(options?: any) {
            return ExternalServicePropertyTypeResourceApiFp(
                configuration
            ).getExternalServicePropertyValueTypesNamesUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * ExternalServicePropertyTypeResourceApi - object-oriented interface
 * @export
 * @class ExternalServicePropertyTypeResourceApi
 * @extends {BaseAPI}
 */
export class ExternalServicePropertyTypeResourceApi extends BaseAPI {
    /**
     *
     * @summary getExternalServicePropertyValueTypesNames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServicePropertyTypeResourceApi
     */
    public getExternalServicePropertyValueTypesNamesUsingGET(options?: any) {
        return ExternalServicePropertyTypeResourceApiFp(
            this.configuration
        ).getExternalServicePropertyValueTypesNamesUsingGET(options)(this.axios, this.basePath);
    }
}

/**
 * ExternalServiceResourceApi - axios parameter creator
 * @export
 */
export const ExternalServiceResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createExternalService
         * @param {ExternalService} externalService externalService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalServiceUsingPOST(externalService: ExternalService, options: any = {}): RequestArgs {
            // verify required parameter 'externalService' is not null or undefined
            if (externalService === null || externalService === undefined) {
                throw new RequiredError(
                    'externalService',
                    'Required parameter externalService was null or undefined when calling createExternalServiceUsingPOST.'
                );
            }
            const localVarPath = `/api/external-services`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ExternalService' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(externalService !== undefined ? externalService : {})
                : externalService || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteExternalService
         * @param {number} externalServiceId externalServiceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalServiceUsingDELETE(externalServiceId: number, options: any = {}): RequestArgs {
            // verify required parameter 'externalServiceId' is not null or undefined
            if (externalServiceId === null || externalServiceId === undefined) {
                throw new RequiredError(
                    'externalServiceId',
                    'Required parameter externalServiceId was null or undefined when calling deleteExternalServiceUsingDELETE.'
                );
            }
            const localVarPath = `/api/external-services/{externalServiceId}`.replace(
                `{${'externalServiceId'}}`,
                encodeURIComponent(String(externalServiceId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllExternalServicesByCustomerNameAndServiceName
         * @param {string} customerName customerName
         * @param {string} externalServiceName externalServiceName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesByCustomerNameAndServiceNameUsingGET(
            customerName: string,
            externalServiceName: string,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'customerName' is not null or undefined
            if (customerName === null || customerName === undefined) {
                throw new RequiredError(
                    'customerName',
                    'Required parameter customerName was null or undefined when calling getAllExternalServicesByCustomerNameAndServiceNameUsingGET.'
                );
            }
            // verify required parameter 'externalServiceName' is not null or undefined
            if (externalServiceName === null || externalServiceName === undefined) {
                throw new RequiredError(
                    'externalServiceName',
                    'Required parameter externalServiceName was null or undefined when calling getAllExternalServicesByCustomerNameAndServiceNameUsingGET.'
                );
            }
            const localVarPath = `/api/external-services/{customerName}/{externalServiceName}`
                .replace(`{${'customerName'}}`, encodeURIComponent(String(customerName)))
                .replace(`{${'externalServiceName'}}`, encodeURIComponent(String(externalServiceName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllExternalServicesByCustomerName
         * @param {string} customerName customerName
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesByCustomerNameUsingGET(
            customerName: string,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'customerName' is not null or undefined
            if (customerName === null || customerName === undefined) {
                throw new RequiredError(
                    'customerName',
                    'Required parameter customerName was null or undefined when calling getAllExternalServicesByCustomerNameUsingGET.'
                );
            }
            const localVarPath = `/api/external-services/{customerName}`.replace(
                `{${'customerName'}}`,
                encodeURIComponent(String(customerName))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllExternalServices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/external-services`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateExternalService
         * @param {ExternalService} externalService externalService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalServiceUsingPUT(externalService: ExternalService, options: any = {}): RequestArgs {
            // verify required parameter 'externalService' is not null or undefined
            if (externalService === null || externalService === undefined) {
                throw new RequiredError(
                    'externalService',
                    'Required parameter externalService was null or undefined when calling updateExternalServiceUsingPUT.'
                );
            }
            const localVarPath = `/api/external-services`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ExternalService' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(externalService !== undefined ? externalService : {})
                : externalService || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ExternalServiceResourceApi - functional programming interface
 * @export
 */
export const ExternalServiceResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createExternalService
         * @param {ExternalService} externalService externalService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalServiceUsingPOST(
            externalService: ExternalService,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalService> {
            const localVarAxiosArgs = ExternalServiceResourceApiAxiosParamCreator(
                configuration
            ).createExternalServiceUsingPOST(externalService, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteExternalService
         * @param {number} externalServiceId externalServiceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalServiceUsingDELETE(
            externalServiceId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalService> {
            const localVarAxiosArgs = ExternalServiceResourceApiAxiosParamCreator(
                configuration
            ).deleteExternalServiceUsingDELETE(externalServiceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllExternalServicesByCustomerNameAndServiceName
         * @param {string} customerName customerName
         * @param {string} externalServiceName externalServiceName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesByCustomerNameAndServiceNameUsingGET(
            customerName: string,
            externalServiceName: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalService> {
            const localVarAxiosArgs = ExternalServiceResourceApiAxiosParamCreator(
                configuration
            ).getAllExternalServicesByCustomerNameAndServiceNameUsingGET(customerName, externalServiceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllExternalServicesByCustomerName
         * @param {string} customerName customerName
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesByCustomerNameUsingGET(
            customerName: string,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExternalService>> {
            const localVarAxiosArgs = ExternalServiceResourceApiAxiosParamCreator(
                configuration
            ).getAllExternalServicesByCustomerNameUsingGET(customerName, sorted, unsorted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllExternalServices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExternalService>> {
            const localVarAxiosArgs = ExternalServiceResourceApiAxiosParamCreator(
                configuration
            ).getAllExternalServicesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateExternalService
         * @param {ExternalService} externalService externalService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalServiceUsingPUT(
            externalService: ExternalService,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalService> {
            const localVarAxiosArgs = ExternalServiceResourceApiAxiosParamCreator(
                configuration
            ).updateExternalServiceUsingPUT(externalService, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ExternalServiceResourceApi - factory interface
 * @export
 */
export const ExternalServiceResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createExternalService
         * @param {ExternalService} externalService externalService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalServiceUsingPOST(externalService: ExternalService, options?: any) {
            return ExternalServiceResourceApiFp(configuration).createExternalServiceUsingPOST(externalService, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary deleteExternalService
         * @param {number} externalServiceId externalServiceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalServiceUsingDELETE(externalServiceId: number, options?: any) {
            return ExternalServiceResourceApiFp(configuration).deleteExternalServiceUsingDELETE(
                externalServiceId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getAllExternalServicesByCustomerNameAndServiceName
         * @param {string} customerName customerName
         * @param {string} externalServiceName externalServiceName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesByCustomerNameAndServiceNameUsingGET(
            customerName: string,
            externalServiceName: string,
            options?: any
        ) {
            return ExternalServiceResourceApiFp(
                configuration
            ).getAllExternalServicesByCustomerNameAndServiceNameUsingGET(customerName, externalServiceName, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllExternalServicesByCustomerName
         * @param {string} customerName customerName
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesByCustomerNameUsingGET(
            customerName: string,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ) {
            return ExternalServiceResourceApiFp(configuration).getAllExternalServicesByCustomerNameUsingGET(
                customerName,
                sorted,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getAllExternalServices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExternalServicesUsingGET(options?: any) {
            return ExternalServiceResourceApiFp(configuration).getAllExternalServicesUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary updateExternalService
         * @param {ExternalService} externalService externalService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalServiceUsingPUT(externalService: ExternalService, options?: any) {
            return ExternalServiceResourceApiFp(configuration).updateExternalServiceUsingPUT(externalService, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ExternalServiceResourceApi - object-oriented interface
 * @export
 * @class ExternalServiceResourceApi
 * @extends {BaseAPI}
 */
export class ExternalServiceResourceApi extends BaseAPI {
    /**
     *
     * @summary createExternalService
     * @param {ExternalService} externalService externalService
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServiceResourceApi
     */
    public createExternalServiceUsingPOST(externalService: ExternalService, options?: any) {
        return ExternalServiceResourceApiFp(this.configuration).createExternalServiceUsingPOST(
            externalService,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteExternalService
     * @param {number} externalServiceId externalServiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServiceResourceApi
     */
    public deleteExternalServiceUsingDELETE(externalServiceId: number, options?: any) {
        return ExternalServiceResourceApiFp(this.configuration).deleteExternalServiceUsingDELETE(
            externalServiceId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllExternalServicesByCustomerNameAndServiceName
     * @param {string} customerName customerName
     * @param {string} externalServiceName externalServiceName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServiceResourceApi
     */
    public getAllExternalServicesByCustomerNameAndServiceNameUsingGET(
        customerName: string,
        externalServiceName: string,
        options?: any
    ) {
        return ExternalServiceResourceApiFp(
            this.configuration
        ).getAllExternalServicesByCustomerNameAndServiceNameUsingGET(customerName, externalServiceName, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllExternalServicesByCustomerName
     * @param {string} customerName customerName
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServiceResourceApi
     */
    public getAllExternalServicesByCustomerNameUsingGET(
        customerName: string,
        sorted?: boolean,
        unsorted?: boolean,
        options?: any
    ) {
        return ExternalServiceResourceApiFp(this.configuration).getAllExternalServicesByCustomerNameUsingGET(
            customerName,
            sorted,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllExternalServices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServiceResourceApi
     */
    public getAllExternalServicesUsingGET(options?: any) {
        return ExternalServiceResourceApiFp(this.configuration).getAllExternalServicesUsingGET(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateExternalService
     * @param {ExternalService} externalService externalService
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalServiceResourceApi
     */
    public updateExternalServiceUsingPUT(externalService: ExternalService, options?: any) {
        return ExternalServiceResourceApiFp(this.configuration).updateExternalServiceUsingPUT(externalService, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ExternalToolResourceApi - axios parameter creator
 * @export
 */
export const ExternalToolResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createExternalTool
         * @param {number} userId userId
         * @param {ExternalTool} externalTool externalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalToolUsingPOST(userId: number, externalTool: ExternalTool, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    'userId',
                    'Required parameter userId was null or undefined when calling createExternalToolUsingPOST.'
                );
            }
            // verify required parameter 'externalTool' is not null or undefined
            if (externalTool === null || externalTool === undefined) {
                throw new RequiredError(
                    'externalTool',
                    'Required parameter externalTool was null or undefined when calling createExternalToolUsingPOST.'
                );
            }
            const localVarPath = `/api/users/{userId}/external-tools`.replace(
                `{${'userId'}}`,
                encodeURIComponent(String(userId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ExternalTool' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(externalTool !== undefined ? externalTool : {})
                : externalTool || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteExternalTool
         * @param {number} id id
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalToolUsingDELETE(id: number, userId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteExternalToolUsingDELETE.'
                );
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    'userId',
                    'Required parameter userId was null or undefined when calling deleteExternalToolUsingDELETE.'
                );
            }
            const localVarPath = `/api/users/{userId}/external-tools/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllUserExternalTools
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserExternalToolsUsingGET(userId: number, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    'userId',
                    'Required parameter userId was null or undefined when calling getAllUserExternalToolsUsingGET.'
                );
            }
            const localVarPath = `/api/users/{userId}/external-tools`.replace(
                `{${'userId'}}`,
                encodeURIComponent(String(userId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateExternalTool
         * @param {number} userId userId
         * @param {ExternalTool} externalTool externalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalToolUsingPUT(userId: number, externalTool: ExternalTool, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    'userId',
                    'Required parameter userId was null or undefined when calling updateExternalToolUsingPUT.'
                );
            }
            // verify required parameter 'externalTool' is not null or undefined
            if (externalTool === null || externalTool === undefined) {
                throw new RequiredError(
                    'externalTool',
                    'Required parameter externalTool was null or undefined when calling updateExternalToolUsingPUT.'
                );
            }
            const localVarPath = `/api/users/{userId}/external-tools`.replace(
                `{${'userId'}}`,
                encodeURIComponent(String(userId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ExternalTool' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(externalTool !== undefined ? externalTool : {})
                : externalTool || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ExternalToolResourceApi - functional programming interface
 * @export
 */
export const ExternalToolResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createExternalTool
         * @param {number} userId userId
         * @param {ExternalTool} externalTool externalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalToolUsingPOST(
            userId: number,
            externalTool: ExternalTool,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalTool> {
            const localVarAxiosArgs = ExternalToolResourceApiAxiosParamCreator(
                configuration
            ).createExternalToolUsingPOST(userId, externalTool, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteExternalTool
         * @param {number} id id
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalToolUsingDELETE(
            id: number,
            userId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ExternalToolResourceApiAxiosParamCreator(
                configuration
            ).deleteExternalToolUsingDELETE(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllUserExternalTools
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserExternalToolsUsingGET(
            userId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExternalTool>> {
            const localVarAxiosArgs = ExternalToolResourceApiAxiosParamCreator(
                configuration
            ).getAllUserExternalToolsUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateExternalTool
         * @param {number} userId userId
         * @param {ExternalTool} externalTool externalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalToolUsingPUT(
            userId: number,
            externalTool: ExternalTool,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalTool> {
            const localVarAxiosArgs = ExternalToolResourceApiAxiosParamCreator(
                configuration
            ).updateExternalToolUsingPUT(userId, externalTool, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ExternalToolResourceApi - factory interface
 * @export
 */
export const ExternalToolResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createExternalTool
         * @param {number} userId userId
         * @param {ExternalTool} externalTool externalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalToolUsingPOST(userId: number, externalTool: ExternalTool, options?: any) {
            return ExternalToolResourceApiFp(configuration).createExternalToolUsingPOST(userId, externalTool, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary deleteExternalTool
         * @param {number} id id
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalToolUsingDELETE(id: number, userId: number, options?: any) {
            return ExternalToolResourceApiFp(configuration).deleteExternalToolUsingDELETE(id, userId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllUserExternalTools
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserExternalToolsUsingGET(userId: number, options?: any) {
            return ExternalToolResourceApiFp(configuration).getAllUserExternalToolsUsingGET(userId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary updateExternalTool
         * @param {number} userId userId
         * @param {ExternalTool} externalTool externalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalToolUsingPUT(userId: number, externalTool: ExternalTool, options?: any) {
            return ExternalToolResourceApiFp(configuration).updateExternalToolUsingPUT(userId, externalTool, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ExternalToolResourceApi - object-oriented interface
 * @export
 * @class ExternalToolResourceApi
 * @extends {BaseAPI}
 */
export class ExternalToolResourceApi extends BaseAPI {
    /**
     *
     * @summary createExternalTool
     * @param {number} userId userId
     * @param {ExternalTool} externalTool externalTool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalToolResourceApi
     */
    public createExternalToolUsingPOST(userId: number, externalTool: ExternalTool, options?: any) {
        return ExternalToolResourceApiFp(this.configuration).createExternalToolUsingPOST(userId, externalTool, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteExternalTool
     * @param {number} id id
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalToolResourceApi
     */
    public deleteExternalToolUsingDELETE(id: number, userId: number, options?: any) {
        return ExternalToolResourceApiFp(this.configuration).deleteExternalToolUsingDELETE(id, userId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllUserExternalTools
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalToolResourceApi
     */
    public getAllUserExternalToolsUsingGET(userId: number, options?: any) {
        return ExternalToolResourceApiFp(this.configuration).getAllUserExternalToolsUsingGET(userId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateExternalTool
     * @param {number} userId userId
     * @param {ExternalTool} externalTool externalTool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalToolResourceApi
     */
    public updateExternalToolUsingPUT(userId: number, externalTool: ExternalTool, options?: any) {
        return ExternalToolResourceApiFp(this.configuration).updateExternalToolUsingPUT(userId, externalTool, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * GoogleCloudBillingResourceApi - axios parameter creator
 * @export
 */
export const GoogleCloudBillingResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAggregatedBilling
         * @param {string} fromDate fromDate
         * @param {string} projectId projectId
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedBillingUsingGET(
            fromDate: string,
            projectId: string,
            toDate?: string,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'fromDate' is not null or undefined
            if (fromDate === null || fromDate === undefined) {
                throw new RequiredError(
                    'fromDate',
                    'Required parameter fromDate was null or undefined when calling getAggregatedBillingUsingGET.'
                );
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError(
                    'projectId',
                    'Required parameter projectId was null or undefined when calling getAggregatedBillingUsingGET.'
                );
            }
            const localVarPath = `/api/google-billing/{projectId}/aggregated`.replace(
                `{${'projectId'}}`,
                encodeURIComponent(String(projectId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any).toISOString();
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any).toISOString();
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBillingByResourceForProductAggregatedForCurrentFinancialYear
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET(
            productId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET.'
                );
            }
            const localVarPath = `/api/google-billing/by-product/{productId}/by-resources/financial-year/current/aggregated`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBillingByResourceForProduct
         * @param {number} productId productId
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceForProductUsingGET(
            productId: number,
            generateMissingValues?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getBillingByResourceForProductUsingGET.'
                );
            }
            const localVarPath = `/api/google-billing/by-product/{productId}/by-resources/financial-year/current`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (generateMissingValues !== undefined) {
                localVarQueryParameter['generateMissingValues'] = generateMissingValues;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBillingByResource
         * @param {string} projectId projectId
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceUsingGET(
            projectId: string,
            fromDate?: string,
            generateMissingValues?: boolean,
            toDate?: string,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError(
                    'projectId',
                    'Required parameter projectId was null or undefined when calling getBillingByResourceUsingGET.'
                );
            }
            const localVarPath = `/api/google-billing/{projectId}/by-resources/daily`.replace(
                `{${'projectId'}}`,
                encodeURIComponent(String(projectId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any).toISOString();
            }

            if (generateMissingValues !== undefined) {
                localVarQueryParameter['generateMissingValues'] = generateMissingValues;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any).toISOString();
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBillingByResource
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceUsingGET1(projectId: string, options: any = {}): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError(
                    'projectId',
                    'Required parameter projectId was null or undefined when calling getBillingByResourceUsingGET1.'
                );
            }
            const localVarPath = `/api/google-billing/{projectId}/by-resources/financial-year/current`.replace(
                `{${'projectId'}}`,
                encodeURIComponent(String(projectId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getBilling
         * @param {string} projectId projectId
         * @param {number} [daysBefore] daysBefore
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {boolean} [sorted]
         * @param {string} [toDate] toDate
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsingGET1(
            projectId: string,
            daysBefore?: number,
            fromDate?: string,
            generateMissingValues?: boolean,
            sorted?: boolean,
            toDate?: string,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError(
                    'projectId',
                    'Required parameter projectId was null or undefined when calling getBillingUsingGET1.'
                );
            }
            const localVarPath = `/api/google-billing/{projectId}`.replace(
                `{${'projectId'}}`,
                encodeURIComponent(String(projectId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (daysBefore !== undefined) {
                localVarQueryParameter['daysBefore'] = daysBefore;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any).toISOString();
            }

            if (generateMissingValues !== undefined) {
                localVarQueryParameter['generateMissingValues'] = generateMissingValues;
            }

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any).toISOString();
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getProjectCostOfDomain
         * @param {number} domainId domainId
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectCostOfDomainUsingGET(
            domainId: number,
            fromDate?: string,
            generateMissingValues?: boolean,
            toDate?: string,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError(
                    'domainId',
                    'Required parameter domainId was null or undefined when calling getProjectCostOfDomainUsingGET.'
                );
            }
            const localVarPath = `/api/google-billing/by-domain/{domainId}/by-resource/daily`.replace(
                `{${'domainId'}}`,
                encodeURIComponent(String(domainId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any).toISOString();
            }

            if (generateMissingValues !== undefined) {
                localVarQueryParameter['generateMissingValues'] = generateMissingValues;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any).toISOString();
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * GoogleCloudBillingResourceApi - functional programming interface
 * @export
 */
export const GoogleCloudBillingResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAggregatedBilling
         * @param {string} fromDate fromDate
         * @param {string} projectId projectId
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedBillingUsingGET(
            fromDate: string,
            projectId: string,
            toDate?: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoogleBillingResultDTO>> {
            const localVarAxiosArgs = GoogleCloudBillingResourceApiAxiosParamCreator(
                configuration
            ).getAggregatedBillingUsingGET(fromDate, projectId, toDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBillingByResourceForProductAggregatedForCurrentFinancialYear
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET(
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoogleBillingResultDTO>> {
            const localVarAxiosArgs = GoogleCloudBillingResourceApiAxiosParamCreator(
                configuration
            ).getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBillingByResourceForProduct
         * @param {number} productId productId
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceForProductUsingGET(
            productId: number,
            generateMissingValues?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoogleBillingResultDTO>> {
            const localVarAxiosArgs = GoogleCloudBillingResourceApiAxiosParamCreator(
                configuration
            ).getBillingByResourceForProductUsingGET(productId, generateMissingValues, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBillingByResource
         * @param {string} projectId projectId
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceUsingGET(
            projectId: string,
            fromDate?: string,
            generateMissingValues?: boolean,
            toDate?: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoogleBillingResultDTO>> {
            const localVarAxiosArgs = GoogleCloudBillingResourceApiAxiosParamCreator(
                configuration
            ).getBillingByResourceUsingGET(projectId, fromDate, generateMissingValues, toDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBillingByResource
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceUsingGET1(
            projectId: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoogleBillingResultDTO>> {
            const localVarAxiosArgs = GoogleCloudBillingResourceApiAxiosParamCreator(
                configuration
            ).getBillingByResourceUsingGET1(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getBilling
         * @param {string} projectId projectId
         * @param {number} [daysBefore] daysBefore
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {boolean} [sorted]
         * @param {string} [toDate] toDate
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsingGET1(
            projectId: string,
            daysBefore?: number,
            fromDate?: string,
            generateMissingValues?: boolean,
            sorted?: boolean,
            toDate?: string,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoogleBillingResultDTO>> {
            const localVarAxiosArgs = GoogleCloudBillingResourceApiAxiosParamCreator(configuration).getBillingUsingGET1(
                projectId,
                daysBefore,
                fromDate,
                generateMissingValues,
                sorted,
                toDate,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getProjectCostOfDomain
         * @param {number} domainId domainId
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectCostOfDomainUsingGET(
            domainId: number,
            fromDate?: string,
            generateMissingValues?: boolean,
            toDate?: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoogleBillingResultDTO>> {
            const localVarAxiosArgs = GoogleCloudBillingResourceApiAxiosParamCreator(
                configuration
            ).getProjectCostOfDomainUsingGET(domainId, fromDate, generateMissingValues, toDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * GoogleCloudBillingResourceApi - factory interface
 * @export
 */
export const GoogleCloudBillingResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getAggregatedBilling
         * @param {string} fromDate fromDate
         * @param {string} projectId projectId
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedBillingUsingGET(fromDate: string, projectId: string, toDate?: string, options?: any) {
            return GoogleCloudBillingResourceApiFp(configuration).getAggregatedBillingUsingGET(
                fromDate,
                projectId,
                toDate,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getBillingByResourceForProductAggregatedForCurrentFinancialYear
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET(productId: number, options?: any) {
            return GoogleCloudBillingResourceApiFp(
                configuration
            ).getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET(productId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getBillingByResourceForProduct
         * @param {number} productId productId
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceForProductUsingGET(productId: number, generateMissingValues?: boolean, options?: any) {
            return GoogleCloudBillingResourceApiFp(configuration).getBillingByResourceForProductUsingGET(
                productId,
                generateMissingValues,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getBillingByResource
         * @param {string} projectId projectId
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceUsingGET(
            projectId: string,
            fromDate?: string,
            generateMissingValues?: boolean,
            toDate?: string,
            options?: any
        ) {
            return GoogleCloudBillingResourceApiFp(configuration).getBillingByResourceUsingGET(
                projectId,
                fromDate,
                generateMissingValues,
                toDate,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getBillingByResource
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingByResourceUsingGET1(projectId: string, options?: any) {
            return GoogleCloudBillingResourceApiFp(configuration).getBillingByResourceUsingGET1(projectId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getBilling
         * @param {string} projectId projectId
         * @param {number} [daysBefore] daysBefore
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {boolean} [sorted]
         * @param {string} [toDate] toDate
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsingGET1(
            projectId: string,
            daysBefore?: number,
            fromDate?: string,
            generateMissingValues?: boolean,
            sorted?: boolean,
            toDate?: string,
            unsorted?: boolean,
            options?: any
        ) {
            return GoogleCloudBillingResourceApiFp(configuration).getBillingUsingGET1(
                projectId,
                daysBefore,
                fromDate,
                generateMissingValues,
                sorted,
                toDate,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getProjectCostOfDomain
         * @param {number} domainId domainId
         * @param {string} [fromDate] fromDate
         * @param {boolean} [generateMissingValues] generateMissingValues
         * @param {string} [toDate] toDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectCostOfDomainUsingGET(
            domainId: number,
            fromDate?: string,
            generateMissingValues?: boolean,
            toDate?: string,
            options?: any
        ) {
            return GoogleCloudBillingResourceApiFp(configuration).getProjectCostOfDomainUsingGET(
                domainId,
                fromDate,
                generateMissingValues,
                toDate,
                options
            )(axios, basePath);
        }
    };
};

/**
 * GoogleCloudBillingResourceApi - object-oriented interface
 * @export
 * @class GoogleCloudBillingResourceApi
 * @extends {BaseAPI}
 */
export class GoogleCloudBillingResourceApi extends BaseAPI {
    /**
     *
     * @summary getAggregatedBilling
     * @param {string} fromDate fromDate
     * @param {string} projectId projectId
     * @param {string} [toDate] toDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleCloudBillingResourceApi
     */
    public getAggregatedBillingUsingGET(fromDate: string, projectId: string, toDate?: string, options?: any) {
        return GoogleCloudBillingResourceApiFp(this.configuration).getAggregatedBillingUsingGET(
            fromDate,
            projectId,
            toDate,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getBillingByResourceForProductAggregatedForCurrentFinancialYear
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleCloudBillingResourceApi
     */
    public getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET(productId: number, options?: any) {
        return GoogleCloudBillingResourceApiFp(
            this.configuration
        ).getBillingByResourceForProductAggregatedForCurrentFinancialYearUsingGET(productId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getBillingByResourceForProduct
     * @param {number} productId productId
     * @param {boolean} [generateMissingValues] generateMissingValues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleCloudBillingResourceApi
     */
    public getBillingByResourceForProductUsingGET(productId: number, generateMissingValues?: boolean, options?: any) {
        return GoogleCloudBillingResourceApiFp(this.configuration).getBillingByResourceForProductUsingGET(
            productId,
            generateMissingValues,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getBillingByResource
     * @param {string} projectId projectId
     * @param {string} [fromDate] fromDate
     * @param {boolean} [generateMissingValues] generateMissingValues
     * @param {string} [toDate] toDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleCloudBillingResourceApi
     */
    public getBillingByResourceUsingGET(
        projectId: string,
        fromDate?: string,
        generateMissingValues?: boolean,
        toDate?: string,
        options?: any
    ) {
        return GoogleCloudBillingResourceApiFp(this.configuration).getBillingByResourceUsingGET(
            projectId,
            fromDate,
            generateMissingValues,
            toDate,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getBillingByResource
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleCloudBillingResourceApi
     */
    public getBillingByResourceUsingGET1(projectId: string, options?: any) {
        return GoogleCloudBillingResourceApiFp(this.configuration).getBillingByResourceUsingGET1(projectId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getBilling
     * @param {string} projectId projectId
     * @param {number} [daysBefore] daysBefore
     * @param {string} [fromDate] fromDate
     * @param {boolean} [generateMissingValues] generateMissingValues
     * @param {boolean} [sorted]
     * @param {string} [toDate] toDate
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleCloudBillingResourceApi
     */
    public getBillingUsingGET1(
        projectId: string,
        daysBefore?: number,
        fromDate?: string,
        generateMissingValues?: boolean,
        sorted?: boolean,
        toDate?: string,
        unsorted?: boolean,
        options?: any
    ) {
        return GoogleCloudBillingResourceApiFp(this.configuration).getBillingUsingGET1(
            projectId,
            daysBefore,
            fromDate,
            generateMissingValues,
            sorted,
            toDate,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getProjectCostOfDomain
     * @param {number} domainId domainId
     * @param {string} [fromDate] fromDate
     * @param {boolean} [generateMissingValues] generateMissingValues
     * @param {string} [toDate] toDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleCloudBillingResourceApi
     */
    public getProjectCostOfDomainUsingGET(
        domainId: number,
        fromDate?: string,
        generateMissingValues?: boolean,
        toDate?: string,
        options?: any
    ) {
        return GoogleCloudBillingResourceApiFp(this.configuration).getProjectCostOfDomainUsingGET(
            domainId,
            fromDate,
            generateMissingValues,
            toDate,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * GoogleProjectResourceApi - axios parameter creator
 * @export
 */
export const GoogleProjectResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary assignGoogleProjectId
         * @param {GoogleProductDeploymentStageDTO} googleProductDeploymentStageDTO googleProductDeploymentStageDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignGoogleProjectIdUsingPOST(
            googleProductDeploymentStageDTO: GoogleProductDeploymentStageDTO,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'googleProductDeploymentStageDTO' is not null or undefined
            if (googleProductDeploymentStageDTO === null || googleProductDeploymentStageDTO === undefined) {
                throw new RequiredError(
                    'googleProductDeploymentStageDTO',
                    'Required parameter googleProductDeploymentStageDTO was null or undefined when calling assignGoogleProjectIdUsingPOST.'
                );
            }
            const localVarPath = `/api/google-projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'GoogleProductDeploymentStageDTO' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(googleProductDeploymentStageDTO !== undefined ? googleProductDeploymentStageDTO : {})
                : googleProductDeploymentStageDTO || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * GoogleProjectResourceApi - functional programming interface
 * @export
 */
export const GoogleProjectResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary assignGoogleProjectId
         * @param {GoogleProductDeploymentStageDTO} googleProductDeploymentStageDTO googleProductDeploymentStageDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignGoogleProjectIdUsingPOST(
            googleProductDeploymentStageDTO: GoogleProductDeploymentStageDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEntity> {
            const localVarAxiosArgs = GoogleProjectResourceApiAxiosParamCreator(
                configuration
            ).assignGoogleProjectIdUsingPOST(googleProductDeploymentStageDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * GoogleProjectResourceApi - factory interface
 * @export
 */
export const GoogleProjectResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary assignGoogleProjectId
         * @param {GoogleProductDeploymentStageDTO} googleProductDeploymentStageDTO googleProductDeploymentStageDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignGoogleProjectIdUsingPOST(
            googleProductDeploymentStageDTO: GoogleProductDeploymentStageDTO,
            options?: any
        ) {
            return GoogleProjectResourceApiFp(configuration).assignGoogleProjectIdUsingPOST(
                googleProductDeploymentStageDTO,
                options
            )(axios, basePath);
        }
    };
};

/**
 * GoogleProjectResourceApi - object-oriented interface
 * @export
 * @class GoogleProjectResourceApi
 * @extends {BaseAPI}
 */
export class GoogleProjectResourceApi extends BaseAPI {
    /**
     *
     * @summary assignGoogleProjectId
     * @param {GoogleProductDeploymentStageDTO} googleProductDeploymentStageDTO googleProductDeploymentStageDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleProjectResourceApi
     */
    public assignGoogleProjectIdUsingPOST(
        googleProductDeploymentStageDTO: GoogleProductDeploymentStageDTO,
        options?: any
    ) {
        return GoogleProjectResourceApiFp(this.configuration).assignGoogleProjectIdUsingPOST(
            googleProductDeploymentStageDTO,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * GoogleSubnetResourceApi - axios parameter creator
 * @export
 */
export const GoogleSubnetResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getSubnetsForStage
         * @param {string} stageName stageName
         * @param {string} subnetName subnetName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubnetsForStageUsingGET(stageName: string, subnetName: string, options: any = {}): RequestArgs {
            // verify required parameter 'stageName' is not null or undefined
            if (stageName === null || stageName === undefined) {
                throw new RequiredError(
                    'stageName',
                    'Required parameter stageName was null or undefined when calling getSubnetsForStageUsingGET.'
                );
            }
            // verify required parameter 'subnetName' is not null or undefined
            if (subnetName === null || subnetName === undefined) {
                throw new RequiredError(
                    'subnetName',
                    'Required parameter subnetName was null or undefined when calling getSubnetsForStageUsingGET.'
                );
            }
            const localVarPath = `/api/google/subnets/{stageName}/{subnetName}`
                .replace(`{${'stageName'}}`, encodeURIComponent(String(stageName)))
                .replace(`{${'subnetName'}}`, encodeURIComponent(String(subnetName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getSubnetsForStage
         * @param {string} stageName stageName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubnetsForStageUsingGET1(stageName: string, options: any = {}): RequestArgs {
            // verify required parameter 'stageName' is not null or undefined
            if (stageName === null || stageName === undefined) {
                throw new RequiredError(
                    'stageName',
                    'Required parameter stageName was null or undefined when calling getSubnetsForStageUsingGET1.'
                );
            }
            const localVarPath = `/api/google/subnets/{stageName}`.replace(
                `{${'stageName'}}`,
                encodeURIComponent(String(stageName))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * GoogleSubnetResourceApi - functional programming interface
 * @export
 */
export const GoogleSubnetResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getSubnetsForStage
         * @param {string} stageName stageName
         * @param {string} subnetName subnetName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubnetsForStageUsingGET(
            stageName: string,
            subnetName: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleSubnetDTO> {
            const localVarAxiosArgs = GoogleSubnetResourceApiAxiosParamCreator(
                configuration
            ).getSubnetsForStageUsingGET(stageName, subnetName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getSubnetsForStage
         * @param {string} stageName stageName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubnetsForStageUsingGET1(
            stageName: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleSubnetHolderDTO> {
            const localVarAxiosArgs = GoogleSubnetResourceApiAxiosParamCreator(
                configuration
            ).getSubnetsForStageUsingGET1(stageName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * GoogleSubnetResourceApi - factory interface
 * @export
 */
export const GoogleSubnetResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getSubnetsForStage
         * @param {string} stageName stageName
         * @param {string} subnetName subnetName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubnetsForStageUsingGET(stageName: string, subnetName: string, options?: any) {
            return GoogleSubnetResourceApiFp(configuration).getSubnetsForStageUsingGET(stageName, subnetName, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getSubnetsForStage
         * @param {string} stageName stageName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubnetsForStageUsingGET1(stageName: string, options?: any) {
            return GoogleSubnetResourceApiFp(configuration).getSubnetsForStageUsingGET1(stageName, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * GoogleSubnetResourceApi - object-oriented interface
 * @export
 * @class GoogleSubnetResourceApi
 * @extends {BaseAPI}
 */
export class GoogleSubnetResourceApi extends BaseAPI {
    /**
     *
     * @summary getSubnetsForStage
     * @param {string} stageName stageName
     * @param {string} subnetName subnetName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleSubnetResourceApi
     */
    public getSubnetsForStageUsingGET(stageName: string, subnetName: string, options?: any) {
        return GoogleSubnetResourceApiFp(this.configuration).getSubnetsForStageUsingGET(stageName, subnetName, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getSubnetsForStage
     * @param {string} stageName stageName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoogleSubnetResourceApi
     */
    public getSubnetsForStageUsingGET1(stageName: string, options?: any) {
        return GoogleSubnetResourceApiFp(this.configuration).getSubnetsForStageUsingGET1(stageName, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * HealthIndicatorApi - axios parameter creator
 * @export
 */
export const HealthIndicatorApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/.well-known/live`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary ready
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readyUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/.well-known/ready`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * HealthIndicatorApi - functional programming interface
 * @export
 */
export const HealthIndicatorApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = HealthIndicatorApiAxiosParamCreator(configuration).liveUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ready
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readyUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = HealthIndicatorApiAxiosParamCreator(configuration).readyUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * HealthIndicatorApi - factory interface
 * @export
 */
export const HealthIndicatorApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary live
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveUsingGET(options?: any) {
            return HealthIndicatorApiFp(configuration).liveUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary ready
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readyUsingGET(options?: any) {
            return HealthIndicatorApiFp(configuration).readyUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * HealthIndicatorApi - object-oriented interface
 * @export
 * @class HealthIndicatorApi
 * @extends {BaseAPI}
 */
export class HealthIndicatorApi extends BaseAPI {
    /**
     *
     * @summary live
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthIndicatorApi
     */
    public liveUsingGET(options?: any) {
        return HealthIndicatorApiFp(this.configuration).liveUsingGET(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary ready
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthIndicatorApi
     */
    public readyUsingGET(options?: any) {
        return HealthIndicatorApiFp(this.configuration).readyUsingGET(options)(this.axios, this.basePath);
    }
}

/**
 * HelpContentResourceApi - axios parameter creator
 * @export
 */
export const HelpContentResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary addOrUpdateHelpContent
         * @param {HelpContent} helpContent helpContent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateHelpContentUsingPUT(helpContent: HelpContent, options: any = {}): RequestArgs {
            // verify required parameter 'helpContent' is not null or undefined
            if (helpContent === null || helpContent === undefined) {
                throw new RequiredError(
                    'helpContent',
                    'Required parameter helpContent was null or undefined when calling addOrUpdateHelpContentUsingPUT.'
                );
            }
            const localVarPath = `/api/help-content`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'HelpContent' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(helpContent !== undefined ? helpContent : {})
                : helpContent || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getHelpByKey
         * @param {string} key key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHelpByKeyUsingGET(key: string, options: any = {}): RequestArgs {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError(
                    'key',
                    'Required parameter key was null or undefined when calling getHelpByKeyUsingGET.'
                );
            }
            const localVarPath = `/api/help-content/{key}`.replace(`{${'key'}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * HelpContentResourceApi - functional programming interface
 * @export
 */
export const HelpContentResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary addOrUpdateHelpContent
         * @param {HelpContent} helpContent helpContent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateHelpContentUsingPUT(
            helpContent: HelpContent,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelpContent> {
            const localVarAxiosArgs = HelpContentResourceApiAxiosParamCreator(
                configuration
            ).addOrUpdateHelpContentUsingPUT(helpContent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getHelpByKey
         * @param {string} key key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHelpByKeyUsingGET(
            key: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelpContent> {
            const localVarAxiosArgs = HelpContentResourceApiAxiosParamCreator(configuration).getHelpByKeyUsingGET(
                key,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * HelpContentResourceApi - factory interface
 * @export
 */
export const HelpContentResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary addOrUpdateHelpContent
         * @param {HelpContent} helpContent helpContent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateHelpContentUsingPUT(helpContent: HelpContent, options?: any) {
            return HelpContentResourceApiFp(configuration).addOrUpdateHelpContentUsingPUT(helpContent, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getHelpByKey
         * @param {string} key key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHelpByKeyUsingGET(key: string, options?: any) {
            return HelpContentResourceApiFp(configuration).getHelpByKeyUsingGET(key, options)(axios, basePath);
        }
    };
};

/**
 * HelpContentResourceApi - object-oriented interface
 * @export
 * @class HelpContentResourceApi
 * @extends {BaseAPI}
 */
export class HelpContentResourceApi extends BaseAPI {
    /**
     *
     * @summary addOrUpdateHelpContent
     * @param {HelpContent} helpContent helpContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpContentResourceApi
     */
    public addOrUpdateHelpContentUsingPUT(helpContent: HelpContent, options?: any) {
        return HelpContentResourceApiFp(this.configuration).addOrUpdateHelpContentUsingPUT(helpContent, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getHelpByKey
     * @param {string} key key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelpContentResourceApi
     */
    public getHelpByKeyUsingGET(key: string, options?: any) {
        return HelpContentResourceApiFp(this.configuration).getHelpByKeyUsingGET(key, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * LogsResourceApi - axios parameter creator
 * @export
 */
export const LogsResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary changeLevel
         * @param {LoggerVM} jsonLogger jsonLogger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLevelUsingPUT(jsonLogger: LoggerVM, options: any = {}): RequestArgs {
            // verify required parameter 'jsonLogger' is not null or undefined
            if (jsonLogger === null || jsonLogger === undefined) {
                throw new RequiredError(
                    'jsonLogger',
                    'Required parameter jsonLogger was null or undefined when calling changeLevelUsingPUT.'
                );
            }
            const localVarPath = `/management/logs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'LoggerVM' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonLogger !== undefined ? jsonLogger : {})
                : jsonLogger || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/management/logs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * LogsResourceApi - functional programming interface
 * @export
 */
export const LogsResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary changeLevel
         * @param {LoggerVM} jsonLogger jsonLogger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLevelUsingPUT(
            jsonLogger: LoggerVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = LogsResourceApiAxiosParamCreator(configuration).changeLevelUsingPUT(
                jsonLogger,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LoggerVM>> {
            const localVarAxiosArgs = LogsResourceApiAxiosParamCreator(configuration).getListUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * LogsResourceApi - factory interface
 * @export
 */
export const LogsResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary changeLevel
         * @param {LoggerVM} jsonLogger jsonLogger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLevelUsingPUT(jsonLogger: LoggerVM, options?: any) {
            return LogsResourceApiFp(configuration).changeLevelUsingPUT(jsonLogger, options)(axios, basePath);
        },
        /**
         *
         * @summary getList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsingGET(options?: any) {
            return LogsResourceApiFp(configuration).getListUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * LogsResourceApi - object-oriented interface
 * @export
 * @class LogsResourceApi
 * @extends {BaseAPI}
 */
export class LogsResourceApi extends BaseAPI {
    /**
     *
     * @summary changeLevel
     * @param {LoggerVM} jsonLogger jsonLogger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsResourceApi
     */
    public changeLevelUsingPUT(jsonLogger: LoggerVM, options?: any) {
        return LogsResourceApiFp(this.configuration).changeLevelUsingPUT(jsonLogger, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsResourceApi
     */
    public getListUsingGET(options?: any) {
        return LogsResourceApiFp(this.configuration).getListUsingGET(options)(this.axios, this.basePath);
    }
}

/**
 * MachineTypeResourceApi - axios parameter creator
 * @export
 */
export const MachineTypeResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getKubernetesMachineTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKubernetesMachineTypesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/machine-types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * MachineTypeResourceApi - functional programming interface
 * @export
 */
export const MachineTypeResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getKubernetesMachineTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKubernetesMachineTypesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = MachineTypeResourceApiAxiosParamCreator(
                configuration
            ).getKubernetesMachineTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * MachineTypeResourceApi - factory interface
 * @export
 */
export const MachineTypeResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getKubernetesMachineTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKubernetesMachineTypesUsingGET(options?: any) {
            return MachineTypeResourceApiFp(configuration).getKubernetesMachineTypesUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * MachineTypeResourceApi - object-oriented interface
 * @export
 * @class MachineTypeResourceApi
 * @extends {BaseAPI}
 */
export class MachineTypeResourceApi extends BaseAPI {
    /**
     *
     * @summary getKubernetesMachineTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineTypeResourceApi
     */
    public getKubernetesMachineTypesUsingGET(options?: any) {
        return MachineTypeResourceApiFp(this.configuration).getKubernetesMachineTypesUsingGET(options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ManualBillingTriggerResourceApi - axios parameter creator
 * @export
 */
export const ManualBillingTriggerResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary addMissingBillingsForAllProjects
         * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMissingBillingsForAllProjectsUsingPOST(numberOfDaysBefore: LongValueVM, options: any = {}): RequestArgs {
            // verify required parameter 'numberOfDaysBefore' is not null or undefined
            if (numberOfDaysBefore === null || numberOfDaysBefore === undefined) {
                throw new RequiredError(
                    'numberOfDaysBefore',
                    'Required parameter numberOfDaysBefore was null or undefined when calling addMissingBillingsForAllProjectsUsingPOST.'
                );
            }
            const localVarPath = `/api/manual-billing-trigger/missing`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'LongValueVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(numberOfDaysBefore !== undefined ? numberOfDaysBefore : {})
                : numberOfDaysBefore || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateBillingForAllProjects
         * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingForAllProjectsUsingPOST(numberOfDaysBefore: LongValueVM, options: any = {}): RequestArgs {
            // verify required parameter 'numberOfDaysBefore' is not null or undefined
            if (numberOfDaysBefore === null || numberOfDaysBefore === undefined) {
                throw new RequiredError(
                    'numberOfDaysBefore',
                    'Required parameter numberOfDaysBefore was null or undefined when calling updateBillingForAllProjectsUsingPOST.'
                );
            }
            const localVarPath = `/api/manual-billing-trigger/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'LongValueVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(numberOfDaysBefore !== undefined ? numberOfDaysBefore : {})
                : numberOfDaysBefore || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ManualBillingTriggerResourceApi - functional programming interface
 * @export
 */
export const ManualBillingTriggerResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary addMissingBillingsForAllProjects
         * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMissingBillingsForAllProjectsUsingPOST(
            numberOfDaysBefore: LongValueVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ManualBillingTriggerResourceApiAxiosParamCreator(
                configuration
            ).addMissingBillingsForAllProjectsUsingPOST(numberOfDaysBefore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateBillingForAllProjects
         * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingForAllProjectsUsingPOST(
            numberOfDaysBefore: LongValueVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ManualBillingTriggerResourceApiAxiosParamCreator(
                configuration
            ).updateBillingForAllProjectsUsingPOST(numberOfDaysBefore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ManualBillingTriggerResourceApi - factory interface
 * @export
 */
export const ManualBillingTriggerResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary addMissingBillingsForAllProjects
         * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMissingBillingsForAllProjectsUsingPOST(numberOfDaysBefore: LongValueVM, options?: any) {
            return ManualBillingTriggerResourceApiFp(configuration).addMissingBillingsForAllProjectsUsingPOST(
                numberOfDaysBefore,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateBillingForAllProjects
         * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBillingForAllProjectsUsingPOST(numberOfDaysBefore: LongValueVM, options?: any) {
            return ManualBillingTriggerResourceApiFp(configuration).updateBillingForAllProjectsUsingPOST(
                numberOfDaysBefore,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ManualBillingTriggerResourceApi - object-oriented interface
 * @export
 * @class ManualBillingTriggerResourceApi
 * @extends {BaseAPI}
 */
export class ManualBillingTriggerResourceApi extends BaseAPI {
    /**
     *
     * @summary addMissingBillingsForAllProjects
     * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManualBillingTriggerResourceApi
     */
    public addMissingBillingsForAllProjectsUsingPOST(numberOfDaysBefore: LongValueVM, options?: any) {
        return ManualBillingTriggerResourceApiFp(this.configuration).addMissingBillingsForAllProjectsUsingPOST(
            numberOfDaysBefore,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateBillingForAllProjects
     * @param {LongValueVM} numberOfDaysBefore numberOfDaysBefore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManualBillingTriggerResourceApi
     */
    public updateBillingForAllProjectsUsingPOST(numberOfDaysBefore: LongValueVM, options?: any) {
        return ManualBillingTriggerResourceApiFp(this.configuration).updateBillingForAllProjectsUsingPOST(
            numberOfDaysBefore,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ManualDeploymentResourceApi - axios parameter creator
 * @export
 */
export const ManualDeploymentResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary deployApplication
         * @param {number} applicationId applicationId
         * @param {ManualDeploymentDTO} manualDeploymentDTO manualDeploymentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployApplicationUsingPOST(
            applicationId: number,
            manualDeploymentDTO: ManualDeploymentDTO,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling deployApplicationUsingPOST.'
                );
            }
            // verify required parameter 'manualDeploymentDTO' is not null or undefined
            if (manualDeploymentDTO === null || manualDeploymentDTO === undefined) {
                throw new RequiredError(
                    'manualDeploymentDTO',
                    'Required parameter manualDeploymentDTO was null or undefined when calling deployApplicationUsingPOST.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployments`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ManualDeploymentDTO' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(manualDeploymentDTO !== undefined ? manualDeploymentDTO : {})
                : manualDeploymentDTO || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getApplicationDeployments
         * @param {number} applicationId applicationId
         * @param {string} [branchName] branchName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDeploymentsUsingGET(applicationId: number, branchName?: string, options: any = {}): RequestArgs {
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError(
                    'applicationId',
                    'Required parameter applicationId was null or undefined when calling getApplicationDeploymentsUsingGET.'
                );
            }
            const localVarPath = `/api/applications/{applicationId}/deployments`.replace(
                `{${'applicationId'}}`,
                encodeURIComponent(String(applicationId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (branchName !== undefined) {
                localVarQueryParameter['branchName'] = branchName;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ManualDeploymentResourceApi - functional programming interface
 * @export
 */
export const ManualDeploymentResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary deployApplication
         * @param {number} applicationId applicationId
         * @param {ManualDeploymentDTO} manualDeploymentDTO manualDeploymentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployApplicationUsingPOST(
            applicationId: number,
            manualDeploymentDTO: ManualDeploymentDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDeploymentHistory> {
            const localVarAxiosArgs = ManualDeploymentResourceApiAxiosParamCreator(
                configuration
            ).deployApplicationUsingPOST(applicationId, manualDeploymentDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getApplicationDeployments
         * @param {number} applicationId applicationId
         * @param {string} [branchName] branchName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDeploymentsUsingGET(
            applicationId: number,
            branchName?: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppDeploymentHistory>> {
            const localVarAxiosArgs = ManualDeploymentResourceApiAxiosParamCreator(
                configuration
            ).getApplicationDeploymentsUsingGET(applicationId, branchName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ManualDeploymentResourceApi - factory interface
 * @export
 */
export const ManualDeploymentResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary deployApplication
         * @param {number} applicationId applicationId
         * @param {ManualDeploymentDTO} manualDeploymentDTO manualDeploymentDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployApplicationUsingPOST(applicationId: number, manualDeploymentDTO: ManualDeploymentDTO, options?: any) {
            return ManualDeploymentResourceApiFp(configuration).deployApplicationUsingPOST(
                applicationId,
                manualDeploymentDTO,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getApplicationDeployments
         * @param {number} applicationId applicationId
         * @param {string} [branchName] branchName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDeploymentsUsingGET(applicationId: number, branchName?: string, options?: any) {
            return ManualDeploymentResourceApiFp(configuration).getApplicationDeploymentsUsingGET(
                applicationId,
                branchName,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ManualDeploymentResourceApi - object-oriented interface
 * @export
 * @class ManualDeploymentResourceApi
 * @extends {BaseAPI}
 */
export class ManualDeploymentResourceApi extends BaseAPI {
    /**
     *
     * @summary deployApplication
     * @param {number} applicationId applicationId
     * @param {ManualDeploymentDTO} manualDeploymentDTO manualDeploymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManualDeploymentResourceApi
     */
    public deployApplicationUsingPOST(applicationId: number, manualDeploymentDTO: ManualDeploymentDTO, options?: any) {
        return ManualDeploymentResourceApiFp(this.configuration).deployApplicationUsingPOST(
            applicationId,
            manualDeploymentDTO,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getApplicationDeployments
     * @param {number} applicationId applicationId
     * @param {string} [branchName] branchName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManualDeploymentResourceApi
     */
    public getApplicationDeploymentsUsingGET(applicationId: number, branchName?: string, options?: any) {
        return ManualDeploymentResourceApiFp(this.configuration).getApplicationDeploymentsUsingGET(
            applicationId,
            branchName,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * OperationHandlerApi - axios parameter creator
 * @export
 */
export const OperationHandlerApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET(body?: { [key: string]: string }, options: any = {}): RequestArgs {
            const localVarPath = `/management/configprops`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary handle
         * @param {string} toMatch toMatch
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(toMatch: string, body?: { [key: string]: string }, options: any = {}): RequestArgs {
            // verify required parameter 'toMatch' is not null or undefined
            if (toMatch === null || toMatch === undefined) {
                throw new RequiredError(
                    'toMatch',
                    'Required parameter toMatch was null or undefined when calling handleUsingGET1.'
                );
            }
            const localVarPath = `/management/env/{toMatch}`.replace(
                `{${'toMatch'}}`,
                encodeURIComponent(String(toMatch))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2(body?: { [key: string]: string }, options: any = {}): RequestArgs {
            const localVarPath = `/management/env`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary handle
         * @param {string} component component
         * @param {string} instance instance
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3(
            component: string,
            instance: string,
            body?: { [key: string]: string },
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'component' is not null or undefined
            if (component === null || component === undefined) {
                throw new RequiredError(
                    'component',
                    'Required parameter component was null or undefined when calling handleUsingGET3.'
                );
            }
            // verify required parameter 'instance' is not null or undefined
            if (instance === null || instance === undefined) {
                throw new RequiredError(
                    'instance',
                    'Required parameter instance was null or undefined when calling handleUsingGET3.'
                );
            }
            const localVarPath = `/management/health/{component}/{instance}`
                .replace(`{${'component'}}`, encodeURIComponent(String(component)))
                .replace(`{${'instance'}}`, encodeURIComponent(String(instance)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary handle
         * @param {string} component component
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET4(component: string, body?: { [key: string]: string }, options: any = {}): RequestArgs {
            // verify required parameter 'component' is not null or undefined
            if (component === null || component === undefined) {
                throw new RequiredError(
                    'component',
                    'Required parameter component was null or undefined when calling handleUsingGET4.'
                );
            }
            const localVarPath = `/management/health/{component}`.replace(
                `{${'component'}}`,
                encodeURIComponent(String(component))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET5(body?: { [key: string]: string }, options: any = {}): RequestArgs {
            const localVarPath = `/management/health`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET6(body?: { [key: string]: string }, options: any = {}): RequestArgs {
            const localVarPath = `/management/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET7(body?: { [key: string]: string }, options: any = {}): RequestArgs {
            const localVarPath = `/management/threaddump`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'{ [key: string]: string; }' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : body || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * OperationHandlerApi - functional programming interface
 * @export
 */
export const OperationHandlerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET(
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary handle
         * @param {string} toMatch toMatch
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(
            toMatch: string,
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET1(
                toMatch,
                body,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2(
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET2(
                body,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary handle
         * @param {string} component component
         * @param {string} instance instance
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3(
            component: string,
            instance: string,
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET3(
                component,
                instance,
                body,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary handle
         * @param {string} component component
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET4(
            component: string,
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET4(
                component,
                body,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET5(
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET5(
                body,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET6(
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET6(
                body,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET7(
            body?: { [key: string]: string },
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OperationHandlerApiAxiosParamCreator(configuration).handleUsingGET7(
                body,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * OperationHandlerApi - factory interface
 * @export
 */
export const OperationHandlerApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET(body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET(body, options)(axios, basePath);
        },
        /**
         *
         * @summary handle
         * @param {string} toMatch toMatch
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET1(toMatch: string, body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET1(toMatch, body, options)(axios, basePath);
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET2(body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET2(body, options)(axios, basePath);
        },
        /**
         *
         * @summary handle
         * @param {string} component component
         * @param {string} instance instance
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET3(component: string, instance: string, body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET3(component, instance, body, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary handle
         * @param {string} component component
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET4(component: string, body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET4(component, body, options)(axios, basePath);
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET5(body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET5(body, options)(axios, basePath);
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET6(body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET6(body, options)(axios, basePath);
        },
        /**
         *
         * @summary handle
         * @param {{ [key: string]: string; }} [body] body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUsingGET7(body?: { [key: string]: string }, options?: any) {
            return OperationHandlerApiFp(configuration).handleUsingGET7(body, options)(axios, basePath);
        }
    };
};

/**
 * OperationHandlerApi - object-oriented interface
 * @export
 * @class OperationHandlerApi
 * @extends {BaseAPI}
 */
export class OperationHandlerApi extends BaseAPI {
    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET(body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET(body, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary handle
     * @param {string} toMatch toMatch
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET1(toMatch: string, body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET1(toMatch, body, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET2(body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET2(body, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary handle
     * @param {string} component component
     * @param {string} instance instance
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET3(component: string, instance: string, body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET3(component, instance, body, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary handle
     * @param {string} component component
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET4(component: string, body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET4(component, body, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET5(body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET5(body, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET6(body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET6(body, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary handle
     * @param {{ [key: string]: string; }} [body] body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationHandlerApi
     */
    public handleUsingGET7(body?: { [key: string]: string }, options?: any) {
        return OperationHandlerApiFp(this.configuration).handleUsingGET7(body, options)(this.axios, this.basePath);
    }
}

/**
 * ParentFolderResourceApi - axios parameter creator
 * @export
 */
export const ParentFolderResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary addToFolder
         * @param {number} folderId folderId
         * @param {ParentFolderVM} parentFolderVM parentFolderVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToFolderUsingPUT(folderId: number, parentFolderVM: ParentFolderVM, options: any = {}): RequestArgs {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError(
                    'folderId',
                    'Required parameter folderId was null or undefined when calling addToFolderUsingPUT.'
                );
            }
            // verify required parameter 'parentFolderVM' is not null or undefined
            if (parentFolderVM === null || parentFolderVM === undefined) {
                throw new RequiredError(
                    'parentFolderVM',
                    'Required parameter parentFolderVM was null or undefined when calling addToFolderUsingPUT.'
                );
            }
            const localVarPath = `/api/parent-folders/{folderId}`.replace(
                `{${'folderId'}}`,
                encodeURIComponent(String(folderId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ParentFolderVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(parentFolderVM !== undefined ? parentFolderVM : {})
                : parentFolderVM || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary assignFolderByGoogleId
         * @param {ParentFolderToGoogleIdVM} parentFolderToGoogleIdVM parentFolderToGoogleIdVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignFolderByGoogleIdUsingPUT(
            parentFolderToGoogleIdVM: ParentFolderToGoogleIdVM,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'parentFolderToGoogleIdVM' is not null or undefined
            if (parentFolderToGoogleIdVM === null || parentFolderToGoogleIdVM === undefined) {
                throw new RequiredError(
                    'parentFolderToGoogleIdVM',
                    'Required parameter parentFolderToGoogleIdVM was null or undefined when calling assignFolderByGoogleIdUsingPUT.'
                );
            }
            const localVarPath = `/api/parent-folders/bulk-update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ParentFolderToGoogleIdVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(parentFolderToGoogleIdVM !== undefined ? parentFolderToGoogleIdVM : {})
                : parentFolderToGoogleIdVM || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllParentFolders
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParentFoldersUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/parent-folders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary saveParentFolder
         * @param {ParentFolder} parentFolder parentFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveParentFolderUsingPOST(parentFolder: ParentFolder, options: any = {}): RequestArgs {
            // verify required parameter 'parentFolder' is not null or undefined
            if (parentFolder === null || parentFolder === undefined) {
                throw new RequiredError(
                    'parentFolder',
                    'Required parameter parentFolder was null or undefined when calling saveParentFolderUsingPOST.'
                );
            }
            const localVarPath = `/api/parent-folders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ParentFolder' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(parentFolder !== undefined ? parentFolder : {})
                : parentFolder || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ParentFolderResourceApi - functional programming interface
 * @export
 */
export const ParentFolderResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary addToFolder
         * @param {number} folderId folderId
         * @param {ParentFolderVM} parentFolderVM parentFolderVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToFolderUsingPUT(
            folderId: number,
            parentFolderVM: ParentFolderVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ParentFolderResourceApiAxiosParamCreator(configuration).addToFolderUsingPUT(
                folderId,
                parentFolderVM,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary assignFolderByGoogleId
         * @param {ParentFolderToGoogleIdVM} parentFolderToGoogleIdVM parentFolderToGoogleIdVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignFolderByGoogleIdUsingPUT(
            parentFolderToGoogleIdVM: ParentFolderToGoogleIdVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ParentFolderResourceApiAxiosParamCreator(
                configuration
            ).assignFolderByGoogleIdUsingPUT(parentFolderToGoogleIdVM, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllParentFolders
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParentFoldersUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParentFolder>> {
            const localVarAxiosArgs = ParentFolderResourceApiAxiosParamCreator(
                configuration
            ).getAllParentFoldersUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary saveParentFolder
         * @param {ParentFolder} parentFolder parentFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveParentFolderUsingPOST(
            parentFolder: ParentFolder,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParentFolder> {
            const localVarAxiosArgs = ParentFolderResourceApiAxiosParamCreator(configuration).saveParentFolderUsingPOST(
                parentFolder,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ParentFolderResourceApi - factory interface
 * @export
 */
export const ParentFolderResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary addToFolder
         * @param {number} folderId folderId
         * @param {ParentFolderVM} parentFolderVM parentFolderVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToFolderUsingPUT(folderId: number, parentFolderVM: ParentFolderVM, options?: any) {
            return ParentFolderResourceApiFp(configuration).addToFolderUsingPUT(folderId, parentFolderVM, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary assignFolderByGoogleId
         * @param {ParentFolderToGoogleIdVM} parentFolderToGoogleIdVM parentFolderToGoogleIdVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignFolderByGoogleIdUsingPUT(parentFolderToGoogleIdVM: ParentFolderToGoogleIdVM, options?: any) {
            return ParentFolderResourceApiFp(configuration).assignFolderByGoogleIdUsingPUT(
                parentFolderToGoogleIdVM,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getAllParentFolders
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParentFoldersUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return ParentFolderResourceApiFp(configuration).getAllParentFoldersUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary saveParentFolder
         * @param {ParentFolder} parentFolder parentFolder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveParentFolderUsingPOST(parentFolder: ParentFolder, options?: any) {
            return ParentFolderResourceApiFp(configuration).saveParentFolderUsingPOST(parentFolder, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ParentFolderResourceApi - object-oriented interface
 * @export
 * @class ParentFolderResourceApi
 * @extends {BaseAPI}
 */
export class ParentFolderResourceApi extends BaseAPI {
    /**
     *
     * @summary addToFolder
     * @param {number} folderId folderId
     * @param {ParentFolderVM} parentFolderVM parentFolderVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentFolderResourceApi
     */
    public addToFolderUsingPUT(folderId: number, parentFolderVM: ParentFolderVM, options?: any) {
        return ParentFolderResourceApiFp(this.configuration).addToFolderUsingPUT(folderId, parentFolderVM, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary assignFolderByGoogleId
     * @param {ParentFolderToGoogleIdVM} parentFolderToGoogleIdVM parentFolderToGoogleIdVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentFolderResourceApi
     */
    public assignFolderByGoogleIdUsingPUT(parentFolderToGoogleIdVM: ParentFolderToGoogleIdVM, options?: any) {
        return ParentFolderResourceApiFp(this.configuration).assignFolderByGoogleIdUsingPUT(
            parentFolderToGoogleIdVM,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllParentFolders
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentFolderResourceApi
     */
    public getAllParentFoldersUsingGET(
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return ParentFolderResourceApiFp(this.configuration).getAllParentFoldersUsingGET(
            offset,
            pageNumber,
            pageSize,
            paged,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary saveParentFolder
     * @param {ParentFolder} parentFolder parentFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentFolderResourceApi
     */
    public saveParentFolderUsingPOST(parentFolder: ParentFolder, options?: any) {
        return ParentFolderResourceApiFp(this.configuration).saveParentFolderUsingPOST(parentFolder, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * PermissionTypeResourceApi - axios parameter creator
 * @export
 */
export const PermissionTypeResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getPermissionTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypesUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/permission-types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * PermissionTypeResourceApi - functional programming interface
 * @export
 */
export const PermissionTypeResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getPermissionTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypesUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = PermissionTypeResourceApiAxiosParamCreator(
                configuration
            ).getPermissionTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * PermissionTypeResourceApi - factory interface
 * @export
 */
export const PermissionTypeResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getPermissionTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypesUsingGET(options?: any) {
            return PermissionTypeResourceApiFp(configuration).getPermissionTypesUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * PermissionTypeResourceApi - object-oriented interface
 * @export
 * @class PermissionTypeResourceApi
 * @extends {BaseAPI}
 */
export class PermissionTypeResourceApi extends BaseAPI {
    /**
     *
     * @summary getPermissionTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionTypeResourceApi
     */
    public getPermissionTypesUsingGET(options?: any) {
        return PermissionTypeResourceApiFp(this.configuration).getPermissionTypesUsingGET(options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * PingResourceApi - axios parameter creator
 * @export
 */
export const PingResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * PingResourceApi - functional programming interface
 * @export
 */
export const PingResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEntity> {
            const localVarAxiosArgs = PingResourceApiAxiosParamCreator(configuration).pingUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * PingResourceApi - factory interface
 * @export
 */
export const PingResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingUsingGET(options?: any) {
            return PingResourceApiFp(configuration).pingUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * PingResourceApi - object-oriented interface
 * @export
 * @class PingResourceApi
 * @extends {BaseAPI}
 */
export class PingResourceApi extends BaseAPI {
    /**
     *
     * @summary ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingResourceApi
     */
    public pingUsingGET(options?: any) {
        return PingResourceApiFp(this.configuration).pingUsingGET(options)(this.axios, this.basePath);
    }
}

/**
 * ProductBackingResourceApi - axios parameter creator
 * @export
 */
export const ProductBackingResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createProductBacking
         * @param {number} productId productId
         * @param {ProductBacking} productBacking productBacking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductBackingUsingPOST(
            productId: number,
            productBacking: ProductBacking,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling createProductBackingUsingPOST.'
                );
            }
            // verify required parameter 'productBacking' is not null or undefined
            if (productBacking === null || productBacking === undefined) {
                throw new RequiredError(
                    'productBacking',
                    'Required parameter productBacking was null or undefined when calling createProductBackingUsingPOST.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-backings`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ProductBacking' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(productBacking !== undefined ? productBacking : {})
                : productBacking || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteProductBacking
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductBackingUsingDELETE(id: number, productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteProductBackingUsingDELETE.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling deleteProductBackingUsingDELETE.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-backings/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllProductBackings
         * @param {number} productId productId
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductBackingsUsingGET(
            productId: number,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getAllProductBackingsUsingGET.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-backings`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getProductBacking
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBackingUsingGET(id: number, productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getProductBackingUsingGET.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getProductBackingUsingGET.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-backings/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateProductBacking
         * @param {number} productId productId
         * @param {ProductBacking} productBacking productBacking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductBackingUsingPUT(
            productId: number,
            productBacking: ProductBacking,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling updateProductBackingUsingPUT.'
                );
            }
            // verify required parameter 'productBacking' is not null or undefined
            if (productBacking === null || productBacking === undefined) {
                throw new RequiredError(
                    'productBacking',
                    'Required parameter productBacking was null or undefined when calling updateProductBackingUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-backings`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ProductBacking' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(productBacking !== undefined ? productBacking : {})
                : productBacking || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ProductBackingResourceApi - functional programming interface
 * @export
 */
export const ProductBackingResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createProductBacking
         * @param {number} productId productId
         * @param {ProductBacking} productBacking productBacking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductBackingUsingPOST(
            productId: number,
            productBacking: ProductBacking,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBacking> {
            const localVarAxiosArgs = ProductBackingResourceApiAxiosParamCreator(
                configuration
            ).createProductBackingUsingPOST(productId, productBacking, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteProductBacking
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductBackingUsingDELETE(
            id: number,
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ProductBackingResourceApiAxiosParamCreator(
                configuration
            ).deleteProductBackingUsingDELETE(id, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllProductBackings
         * @param {number} productId productId
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductBackingsUsingGET(
            productId: number,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductBacking>> {
            const localVarAxiosArgs = ProductBackingResourceApiAxiosParamCreator(
                configuration
            ).getAllProductBackingsUsingGET(productId, sorted, unsorted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getProductBacking
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBackingUsingGET(
            id: number,
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBacking> {
            const localVarAxiosArgs = ProductBackingResourceApiAxiosParamCreator(
                configuration
            ).getProductBackingUsingGET(id, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateProductBacking
         * @param {number} productId productId
         * @param {ProductBacking} productBacking productBacking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductBackingUsingPUT(
            productId: number,
            productBacking: ProductBacking,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBacking> {
            const localVarAxiosArgs = ProductBackingResourceApiAxiosParamCreator(
                configuration
            ).updateProductBackingUsingPUT(productId, productBacking, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ProductBackingResourceApi - factory interface
 * @export
 */
export const ProductBackingResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createProductBacking
         * @param {number} productId productId
         * @param {ProductBacking} productBacking productBacking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductBackingUsingPOST(productId: number, productBacking: ProductBacking, options?: any) {
            return ProductBackingResourceApiFp(configuration).createProductBackingUsingPOST(
                productId,
                productBacking,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteProductBacking
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductBackingUsingDELETE(id: number, productId: number, options?: any) {
            return ProductBackingResourceApiFp(configuration).deleteProductBackingUsingDELETE(id, productId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllProductBackings
         * @param {number} productId productId
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductBackingsUsingGET(productId: number, sorted?: boolean, unsorted?: boolean, options?: any) {
            return ProductBackingResourceApiFp(configuration).getAllProductBackingsUsingGET(
                productId,
                sorted,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getProductBacking
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductBackingUsingGET(id: number, productId: number, options?: any) {
            return ProductBackingResourceApiFp(configuration).getProductBackingUsingGET(id, productId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary updateProductBacking
         * @param {number} productId productId
         * @param {ProductBacking} productBacking productBacking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductBackingUsingPUT(productId: number, productBacking: ProductBacking, options?: any) {
            return ProductBackingResourceApiFp(configuration).updateProductBackingUsingPUT(
                productId,
                productBacking,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ProductBackingResourceApi - object-oriented interface
 * @export
 * @class ProductBackingResourceApi
 * @extends {BaseAPI}
 */
export class ProductBackingResourceApi extends BaseAPI {
    /**
     *
     * @summary createProductBacking
     * @param {number} productId productId
     * @param {ProductBacking} productBacking productBacking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBackingResourceApi
     */
    public createProductBackingUsingPOST(productId: number, productBacking: ProductBacking, options?: any) {
        return ProductBackingResourceApiFp(this.configuration).createProductBackingUsingPOST(
            productId,
            productBacking,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteProductBacking
     * @param {number} id id
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBackingResourceApi
     */
    public deleteProductBackingUsingDELETE(id: number, productId: number, options?: any) {
        return ProductBackingResourceApiFp(this.configuration).deleteProductBackingUsingDELETE(id, productId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllProductBackings
     * @param {number} productId productId
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBackingResourceApi
     */
    public getAllProductBackingsUsingGET(productId: number, sorted?: boolean, unsorted?: boolean, options?: any) {
        return ProductBackingResourceApiFp(this.configuration).getAllProductBackingsUsingGET(
            productId,
            sorted,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getProductBacking
     * @param {number} id id
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBackingResourceApi
     */
    public getProductBackingUsingGET(id: number, productId: number, options?: any) {
        return ProductBackingResourceApiFp(this.configuration).getProductBackingUsingGET(id, productId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateProductBacking
     * @param {number} productId productId
     * @param {ProductBacking} productBacking productBacking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductBackingResourceApi
     */
    public updateProductBackingUsingPUT(productId: number, productBacking: ProductBacking, options?: any) {
        return ProductBackingResourceApiFp(this.configuration).updateProductBackingUsingPUT(
            productId,
            productBacking,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ProductDeploymentStageResourceApi - axios parameter creator
 * @export
 */
export const ProductDeploymentStageResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getProductDeploymentStageOfProduct
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeploymentStageOfProductUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getProductDeploymentStageOfProductUsingGET.'
                );
            }
            const localVarPath = `/api/products/{id}/product-deployment-stages`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getProductDeploymentStages
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeploymentStagesUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/product-deployment-stages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary removeSubnetOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubnetOfProductDeploymentStageUsingDELETE(
            deployStageId: number,
            productId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'deployStageId' is not null or undefined
            if (deployStageId === null || deployStageId === undefined) {
                throw new RequiredError(
                    'deployStageId',
                    'Required parameter deployStageId was null or undefined when calling removeSubnetOfProductDeploymentStageUsingDELETE.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling removeSubnetOfProductDeploymentStageUsingDELETE.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-deployment-stages/{deployStageId}/subnet`
                .replace(`{${'deployStageId'}}`, encodeURIComponent(String(deployStageId)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateGoogleIdOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {StringValueVM} googleProjectId googleProjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoogleIdOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            googleProjectId: StringValueVM,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'deployStageId' is not null or undefined
            if (deployStageId === null || deployStageId === undefined) {
                throw new RequiredError(
                    'deployStageId',
                    'Required parameter deployStageId was null or undefined when calling updateGoogleIdOfProductDeploymentStageUsingPUT.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling updateGoogleIdOfProductDeploymentStageUsingPUT.'
                );
            }
            // verify required parameter 'googleProjectId' is not null or undefined
            if (googleProjectId === null || googleProjectId === undefined) {
                throw new RequiredError(
                    'googleProjectId',
                    'Required parameter googleProjectId was null or undefined when calling updateGoogleIdOfProductDeploymentStageUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-deployment-stages/{deployStageId}/google-project-id`
                .replace(`{${'deployStageId'}}`, encodeURIComponent(String(deployStageId)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'StringValueVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(googleProjectId !== undefined ? googleProjectId : {})
                : googleProjectId || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateProductDeploymentStageDeprecated
         * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDeploymentStageDeprecatedUsingPUT(
            productDeploymentStage: ProductDeploymentStage,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productDeploymentStage' is not null or undefined
            if (productDeploymentStage === null || productDeploymentStage === undefined) {
                throw new RequiredError(
                    'productDeploymentStage',
                    'Required parameter productDeploymentStage was null or undefined when calling updateProductDeploymentStageDeprecatedUsingPUT.'
                );
            }
            const localVarPath = `/api/product-deployment-stages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ProductDeploymentStage' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(productDeploymentStage !== undefined ? productDeploymentStage : {})
                : productDeploymentStage || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateProductDeploymentStage
         * @param {number} id id
         * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDeploymentStageUsingPUT(
            id: number,
            productDeploymentStage: ProductDeploymentStage,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling updateProductDeploymentStageUsingPUT.'
                );
            }
            // verify required parameter 'productDeploymentStage' is not null or undefined
            if (productDeploymentStage === null || productDeploymentStage === undefined) {
                throw new RequiredError(
                    'productDeploymentStage',
                    'Required parameter productDeploymentStage was null or undefined when calling updateProductDeploymentStageUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{id}/product-deployment-stages`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ProductDeploymentStage' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(productDeploymentStage !== undefined ? productDeploymentStage : {})
                : productDeploymentStage || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateSubnetOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {Subnet} subnet subnet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubnetOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            subnet: Subnet,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'deployStageId' is not null or undefined
            if (deployStageId === null || deployStageId === undefined) {
                throw new RequiredError(
                    'deployStageId',
                    'Required parameter deployStageId was null or undefined when calling updateSubnetOfProductDeploymentStageUsingPUT.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling updateSubnetOfProductDeploymentStageUsingPUT.'
                );
            }
            // verify required parameter 'subnet' is not null or undefined
            if (subnet === null || subnet === undefined) {
                throw new RequiredError(
                    'subnet',
                    'Required parameter subnet was null or undefined when calling updateSubnetOfProductDeploymentStageUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-deployment-stages/{deployStageId}/subnet`
                .replace(`{${'deployStageId'}}`, encodeURIComponent(String(deployStageId)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Subnet' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(subnet !== undefined ? subnet : {})
                : subnet || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateZoneOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {StringValueVM} zone zone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateZoneOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            zone: StringValueVM,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'deployStageId' is not null or undefined
            if (deployStageId === null || deployStageId === undefined) {
                throw new RequiredError(
                    'deployStageId',
                    'Required parameter deployStageId was null or undefined when calling updateZoneOfProductDeploymentStageUsingPUT.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling updateZoneOfProductDeploymentStageUsingPUT.'
                );
            }
            // verify required parameter 'zone' is not null or undefined
            if (zone === null || zone === undefined) {
                throw new RequiredError(
                    'zone',
                    'Required parameter zone was null or undefined when calling updateZoneOfProductDeploymentStageUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-deployment-stages/{deployStageId}/zone`
                .replace(`{${'deployStageId'}}`, encodeURIComponent(String(deployStageId)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'StringValueVM' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(zone !== undefined ? zone : {})
                : zone || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ProductDeploymentStageResourceApi - functional programming interface
 * @export
 */
export const ProductDeploymentStageResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getProductDeploymentStageOfProduct
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeploymentStageOfProductUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDeploymentStage>> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).getProductDeploymentStageOfProductUsingGET(id, sorted, unsorted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getProductDeploymentStages
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeploymentStagesUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDeploymentStage>> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).getProductDeploymentStagesUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary removeSubnetOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubnetOfProductDeploymentStageUsingDELETE(
            deployStageId: number,
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).removeSubnetOfProductDeploymentStageUsingDELETE(deployStageId, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateGoogleIdOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {StringValueVM} googleProjectId googleProjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoogleIdOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            googleProjectId: StringValueVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).updateGoogleIdOfProductDeploymentStageUsingPUT(deployStageId, productId, googleProjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateProductDeploymentStageDeprecated
         * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDeploymentStageDeprecatedUsingPUT(
            productDeploymentStage: ProductDeploymentStage,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDeploymentStage> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).updateProductDeploymentStageDeprecatedUsingPUT(productDeploymentStage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateProductDeploymentStage
         * @param {number} id id
         * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDeploymentStageUsingPUT(
            id: number,
            productDeploymentStage: ProductDeploymentStage,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDeploymentStage> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).updateProductDeploymentStageUsingPUT(id, productDeploymentStage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateSubnetOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {Subnet} subnet subnet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubnetOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            subnet: Subnet,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).updateSubnetOfProductDeploymentStageUsingPUT(deployStageId, productId, subnet, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateZoneOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {StringValueVM} zone zone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateZoneOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            zone: StringValueVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ProductDeploymentStageResourceApiAxiosParamCreator(
                configuration
            ).updateZoneOfProductDeploymentStageUsingPUT(deployStageId, productId, zone, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ProductDeploymentStageResourceApi - factory interface
 * @export
 */
export const ProductDeploymentStageResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getProductDeploymentStageOfProduct
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeploymentStageOfProductUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
            return ProductDeploymentStageResourceApiFp(configuration).getProductDeploymentStageOfProductUsingGET(
                id,
                sorted,
                unsorted,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getProductDeploymentStages
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeploymentStagesUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return ProductDeploymentStageResourceApiFp(configuration).getProductDeploymentStagesUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary removeSubnetOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubnetOfProductDeploymentStageUsingDELETE(deployStageId: number, productId: number, options?: any) {
            return ProductDeploymentStageResourceApiFp(configuration).removeSubnetOfProductDeploymentStageUsingDELETE(
                deployStageId,
                productId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateGoogleIdOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {StringValueVM} googleProjectId googleProjectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoogleIdOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            googleProjectId: StringValueVM,
            options?: any
        ) {
            return ProductDeploymentStageResourceApiFp(configuration).updateGoogleIdOfProductDeploymentStageUsingPUT(
                deployStageId,
                productId,
                googleProjectId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateProductDeploymentStageDeprecated
         * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDeploymentStageDeprecatedUsingPUT(productDeploymentStage: ProductDeploymentStage, options?: any) {
            return ProductDeploymentStageResourceApiFp(configuration).updateProductDeploymentStageDeprecatedUsingPUT(
                productDeploymentStage,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateProductDeploymentStage
         * @param {number} id id
         * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductDeploymentStageUsingPUT(
            id: number,
            productDeploymentStage: ProductDeploymentStage,
            options?: any
        ) {
            return ProductDeploymentStageResourceApiFp(configuration).updateProductDeploymentStageUsingPUT(
                id,
                productDeploymentStage,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateSubnetOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {Subnet} subnet subnet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubnetOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            subnet: Subnet,
            options?: any
        ) {
            return ProductDeploymentStageResourceApiFp(configuration).updateSubnetOfProductDeploymentStageUsingPUT(
                deployStageId,
                productId,
                subnet,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateZoneOfProductDeploymentStage
         * @param {number} deployStageId deployStageId
         * @param {number} productId productId
         * @param {StringValueVM} zone zone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateZoneOfProductDeploymentStageUsingPUT(
            deployStageId: number,
            productId: number,
            zone: StringValueVM,
            options?: any
        ) {
            return ProductDeploymentStageResourceApiFp(configuration).updateZoneOfProductDeploymentStageUsingPUT(
                deployStageId,
                productId,
                zone,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ProductDeploymentStageResourceApi - object-oriented interface
 * @export
 * @class ProductDeploymentStageResourceApi
 * @extends {BaseAPI}
 */
export class ProductDeploymentStageResourceApi extends BaseAPI {
    /**
     *
     * @summary getProductDeploymentStageOfProduct
     * @param {number} id id
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public getProductDeploymentStageOfProductUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
        return ProductDeploymentStageResourceApiFp(this.configuration).getProductDeploymentStageOfProductUsingGET(
            id,
            sorted,
            unsorted,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getProductDeploymentStages
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public getProductDeploymentStagesUsingGET(
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return ProductDeploymentStageResourceApiFp(this.configuration).getProductDeploymentStagesUsingGET(
            offset,
            pageNumber,
            pageSize,
            paged,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary removeSubnetOfProductDeploymentStage
     * @param {number} deployStageId deployStageId
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public removeSubnetOfProductDeploymentStageUsingDELETE(deployStageId: number, productId: number, options?: any) {
        return ProductDeploymentStageResourceApiFp(this.configuration).removeSubnetOfProductDeploymentStageUsingDELETE(
            deployStageId,
            productId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateGoogleIdOfProductDeploymentStage
     * @param {number} deployStageId deployStageId
     * @param {number} productId productId
     * @param {StringValueVM} googleProjectId googleProjectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public updateGoogleIdOfProductDeploymentStageUsingPUT(
        deployStageId: number,
        productId: number,
        googleProjectId: StringValueVM,
        options?: any
    ) {
        return ProductDeploymentStageResourceApiFp(this.configuration).updateGoogleIdOfProductDeploymentStageUsingPUT(
            deployStageId,
            productId,
            googleProjectId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateProductDeploymentStageDeprecated
     * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public updateProductDeploymentStageDeprecatedUsingPUT(
        productDeploymentStage: ProductDeploymentStage,
        options?: any
    ) {
        return ProductDeploymentStageResourceApiFp(this.configuration).updateProductDeploymentStageDeprecatedUsingPUT(
            productDeploymentStage,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateProductDeploymentStage
     * @param {number} id id
     * @param {ProductDeploymentStage} productDeploymentStage productDeploymentStage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public updateProductDeploymentStageUsingPUT(
        id: number,
        productDeploymentStage: ProductDeploymentStage,
        options?: any
    ) {
        return ProductDeploymentStageResourceApiFp(this.configuration).updateProductDeploymentStageUsingPUT(
            id,
            productDeploymentStage,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateSubnetOfProductDeploymentStage
     * @param {number} deployStageId deployStageId
     * @param {number} productId productId
     * @param {Subnet} subnet subnet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public updateSubnetOfProductDeploymentStageUsingPUT(
        deployStageId: number,
        productId: number,
        subnet: Subnet,
        options?: any
    ) {
        return ProductDeploymentStageResourceApiFp(this.configuration).updateSubnetOfProductDeploymentStageUsingPUT(
            deployStageId,
            productId,
            subnet,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateZoneOfProductDeploymentStage
     * @param {number} deployStageId deployStageId
     * @param {number} productId productId
     * @param {StringValueVM} zone zone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeploymentStageResourceApi
     */
    public updateZoneOfProductDeploymentStageUsingPUT(
        deployStageId: number,
        productId: number,
        zone: StringValueVM,
        options?: any
    ) {
        return ProductDeploymentStageResourceApiFp(this.configuration).updateZoneOfProductDeploymentStageUsingPUT(
            deployStageId,
            productId,
            zone,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ProductExternalToolResourceApi - axios parameter creator
 * @export
 */
export const ProductExternalToolResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createProductExternalTool
         * @param {number} productId productId
         * @param {ProductExternalTool} productExternalTool productExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductExternalToolUsingPOST(
            productId: number,
            productExternalTool: ProductExternalTool,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling createProductExternalToolUsingPOST.'
                );
            }
            // verify required parameter 'productExternalTool' is not null or undefined
            if (productExternalTool === null || productExternalTool === undefined) {
                throw new RequiredError(
                    'productExternalTool',
                    'Required parameter productExternalTool was null or undefined when calling createProductExternalToolUsingPOST.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-external-tools`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ProductExternalTool' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(productExternalTool !== undefined ? productExternalTool : {})
                : productExternalTool || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteProductExternalTool
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductExternalToolUsingDELETE(id: number, productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteProductExternalToolUsingDELETE.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling deleteProductExternalToolUsingDELETE.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-external-tools/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllProductExternalTools
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductExternalToolsUsingGET(productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getAllProductExternalToolsUsingGET.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-external-tools`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateProductExternalTool
         * @param {number} productId productId
         * @param {ProductExternalTool} productExternalTool productExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductExternalToolUsingPUT(
            productId: number,
            productExternalTool: ProductExternalTool,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling updateProductExternalToolUsingPUT.'
                );
            }
            // verify required parameter 'productExternalTool' is not null or undefined
            if (productExternalTool === null || productExternalTool === undefined) {
                throw new RequiredError(
                    'productExternalTool',
                    'Required parameter productExternalTool was null or undefined when calling updateProductExternalToolUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{productId}/product-external-tools`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ProductExternalTool' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(productExternalTool !== undefined ? productExternalTool : {})
                : productExternalTool || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ProductExternalToolResourceApi - functional programming interface
 * @export
 */
export const ProductExternalToolResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createProductExternalTool
         * @param {number} productId productId
         * @param {ProductExternalTool} productExternalTool productExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductExternalToolUsingPOST(
            productId: number,
            productExternalTool: ProductExternalTool,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductExternalTool> {
            const localVarAxiosArgs = ProductExternalToolResourceApiAxiosParamCreator(
                configuration
            ).createProductExternalToolUsingPOST(productId, productExternalTool, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteProductExternalTool
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductExternalToolUsingDELETE(
            id: number,
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ProductExternalToolResourceApiAxiosParamCreator(
                configuration
            ).deleteProductExternalToolUsingDELETE(id, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllProductExternalTools
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductExternalToolsUsingGET(
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductExternalTool>> {
            const localVarAxiosArgs = ProductExternalToolResourceApiAxiosParamCreator(
                configuration
            ).getAllProductExternalToolsUsingGET(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateProductExternalTool
         * @param {number} productId productId
         * @param {ProductExternalTool} productExternalTool productExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductExternalToolUsingPUT(
            productId: number,
            productExternalTool: ProductExternalTool,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductExternalTool> {
            const localVarAxiosArgs = ProductExternalToolResourceApiAxiosParamCreator(
                configuration
            ).updateProductExternalToolUsingPUT(productId, productExternalTool, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ProductExternalToolResourceApi - factory interface
 * @export
 */
export const ProductExternalToolResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createProductExternalTool
         * @param {number} productId productId
         * @param {ProductExternalTool} productExternalTool productExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductExternalToolUsingPOST(productId: number, productExternalTool: ProductExternalTool, options?: any) {
            return ProductExternalToolResourceApiFp(configuration).createProductExternalToolUsingPOST(
                productId,
                productExternalTool,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteProductExternalTool
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductExternalToolUsingDELETE(id: number, productId: number, options?: any) {
            return ProductExternalToolResourceApiFp(configuration).deleteProductExternalToolUsingDELETE(
                id,
                productId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getAllProductExternalTools
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductExternalToolsUsingGET(productId: number, options?: any) {
            return ProductExternalToolResourceApiFp(configuration).getAllProductExternalToolsUsingGET(
                productId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary updateProductExternalTool
         * @param {number} productId productId
         * @param {ProductExternalTool} productExternalTool productExternalTool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductExternalToolUsingPUT(productId: number, productExternalTool: ProductExternalTool, options?: any) {
            return ProductExternalToolResourceApiFp(configuration).updateProductExternalToolUsingPUT(
                productId,
                productExternalTool,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ProductExternalToolResourceApi - object-oriented interface
 * @export
 * @class ProductExternalToolResourceApi
 * @extends {BaseAPI}
 */
export class ProductExternalToolResourceApi extends BaseAPI {
    /**
     *
     * @summary createProductExternalTool
     * @param {number} productId productId
     * @param {ProductExternalTool} productExternalTool productExternalTool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductExternalToolResourceApi
     */
    public createProductExternalToolUsingPOST(
        productId: number,
        productExternalTool: ProductExternalTool,
        options?: any
    ) {
        return ProductExternalToolResourceApiFp(this.configuration).createProductExternalToolUsingPOST(
            productId,
            productExternalTool,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteProductExternalTool
     * @param {number} id id
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductExternalToolResourceApi
     */
    public deleteProductExternalToolUsingDELETE(id: number, productId: number, options?: any) {
        return ProductExternalToolResourceApiFp(this.configuration).deleteProductExternalToolUsingDELETE(
            id,
            productId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllProductExternalTools
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductExternalToolResourceApi
     */
    public getAllProductExternalToolsUsingGET(productId: number, options?: any) {
        return ProductExternalToolResourceApiFp(this.configuration).getAllProductExternalToolsUsingGET(
            productId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateProductExternalTool
     * @param {number} productId productId
     * @param {ProductExternalTool} productExternalTool productExternalTool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductExternalToolResourceApi
     */
    public updateProductExternalToolUsingPUT(
        productId: number,
        productExternalTool: ProductExternalTool,
        options?: any
    ) {
        return ProductExternalToolResourceApiFp(this.configuration).updateProductExternalToolUsingPUT(
            productId,
            productExternalTool,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ProductRegistryResourceApi - axios parameter creator
 * @export
 */
export const ProductRegistryResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getProductRegistryEntry
         * @param {string} customerName customerName
         * @param {string} productName productName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRegistryEntryUsingGET(customerName: string, productName: string, options: any = {}): RequestArgs {
            // verify required parameter 'customerName' is not null or undefined
            if (customerName === null || customerName === undefined) {
                throw new RequiredError(
                    'customerName',
                    'Required parameter customerName was null or undefined when calling getProductRegistryEntryUsingGET.'
                );
            }
            // verify required parameter 'productName' is not null or undefined
            if (productName === null || productName === undefined) {
                throw new RequiredError(
                    'productName',
                    'Required parameter productName was null or undefined when calling getProductRegistryEntryUsingGET.'
                );
            }
            const localVarPath = `/api/product-registry/{customerName}/{productName}`
                .replace(`{${'customerName'}}`, encodeURIComponent(String(customerName)))
                .replace(`{${'productName'}}`, encodeURIComponent(String(productName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ProductRegistryResourceApi - functional programming interface
 * @export
 */
export const ProductRegistryResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getProductRegistryEntry
         * @param {string} customerName customerName
         * @param {string} productName productName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRegistryEntryUsingGET(
            customerName: string,
            productName: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductRegistryEntry> {
            const localVarAxiosArgs = ProductRegistryResourceApiAxiosParamCreator(
                configuration
            ).getProductRegistryEntryUsingGET(customerName, productName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ProductRegistryResourceApi - factory interface
 * @export
 */
export const ProductRegistryResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getProductRegistryEntry
         * @param {string} customerName customerName
         * @param {string} productName productName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductRegistryEntryUsingGET(customerName: string, productName: string, options?: any) {
            return ProductRegistryResourceApiFp(configuration).getProductRegistryEntryUsingGET(
                customerName,
                productName,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ProductRegistryResourceApi - object-oriented interface
 * @export
 * @class ProductRegistryResourceApi
 * @extends {BaseAPI}
 */
export class ProductRegistryResourceApi extends BaseAPI {
    /**
     *
     * @summary getProductRegistryEntry
     * @param {string} customerName customerName
     * @param {string} productName productName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductRegistryResourceApi
     */
    public getProductRegistryEntryUsingGET(customerName: string, productName: string, options?: any) {
        return ProductRegistryResourceApiFp(this.configuration).getProductRegistryEntryUsingGET(
            customerName,
            productName,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ProductResourceApi - axios parameter creator
 * @export
 */
export const ProductResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createProduct
         * @param {Product} product product
         * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductUsingPOST(product: Product, usesOnPremiseApps?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError(
                    'product',
                    'Required parameter product was null or undefined when calling createProductUsingPOST.'
                );
            }
            const localVarPath = `/api/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (usesOnPremiseApps !== undefined) {
                localVarQueryParameter['usesOnPremiseApps'] = usesOnPremiseApps;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Product' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(product !== undefined ? product : {})
                : product || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteProductUsingDELETE.'
                );
            }
            const localVarPath = `/api/products/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllLightProducts
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLightProductsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/light-products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllProducts
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getApplicationsOfProduct
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsOfProductUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getApplicationsOfProductUsingGET.'
                );
            }
            const localVarPath = `/api/products/{id}/applications`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getLightApplicationDTOByProductId
         * @param {number} id id
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightApplicationDTOByProductIdUsingGET(
            id: number,
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getLightApplicationDTOByProductIdUsingGET.'
                );
            }
            const localVarPath = `/api/products/{id}/light-applications`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getProductUsingGET.'
                );
            }
            const localVarPath = `/api/products/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateProduct
         * @param {Product} product product
         * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductUsingPUT(product: Product, usesOnPremiseApps?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError(
                    'product',
                    'Required parameter product was null or undefined when calling updateProductUsingPUT.'
                );
            }
            const localVarPath = `/api/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (usesOnPremiseApps !== undefined) {
                localVarQueryParameter['usesOnPremiseApps'] = usesOnPremiseApps;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Product' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(product !== undefined ? product : {})
                : product || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ProductResourceApi - functional programming interface
 * @export
 */
export const ProductResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createProduct
         * @param {Product} product product
         * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductUsingPOST(
            product: Product,
            usesOnPremiseApps?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(configuration).createProductUsingPOST(
                product,
                usesOnPremiseApps,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(configuration).deleteProductUsingDELETE(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllLightProducts
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLightProductsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LightProductDTO>> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(configuration).getAllLightProductsUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                search,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllProducts
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(configuration).getAllProductsUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getApplicationsOfProduct
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsOfProductUsingGET(
            id: number,
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Application>> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(
                configuration
            ).getApplicationsOfProductUsingGET(id, sorted, unsorted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getLightApplicationDTOByProductId
         * @param {number} id id
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightApplicationDTOByProductIdUsingGET(
            id: number,
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LightApplicationDTO>> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(
                configuration
            ).getLightApplicationDTOByProductIdUsingGET(
                id,
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(configuration).getProductUsingGET(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateProduct
         * @param {Product} product product
         * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductUsingPUT(
            product: Product,
            usesOnPremiseApps?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product> {
            const localVarAxiosArgs = ProductResourceApiAxiosParamCreator(configuration).updateProductUsingPUT(
                product,
                usesOnPremiseApps,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ProductResourceApi - factory interface
 * @export
 */
export const ProductResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createProduct
         * @param {Product} product product
         * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductUsingPOST(product: Product, usesOnPremiseApps?: boolean, options?: any) {
            return ProductResourceApiFp(configuration).createProductUsingPOST(product, usesOnPremiseApps, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary deleteProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductUsingDELETE(id: number, options?: any) {
            return ProductResourceApiFp(configuration).deleteProductUsingDELETE(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllLightProducts
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLightProductsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return ProductResourceApiFp(configuration).getAllLightProductsUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                search,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getAllProducts
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductsUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return ProductResourceApiFp(configuration).getAllProductsUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getApplicationsOfProduct
         * @param {number} id id
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsOfProductUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
            return ProductResourceApiFp(configuration).getApplicationsOfProductUsingGET(id, sorted, unsorted, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getLightApplicationDTOByProductId
         * @param {number} id id
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLightApplicationDTOByProductIdUsingGET(
            id: number,
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return ProductResourceApiFp(configuration).getLightApplicationDTOByProductIdUsingGET(
                id,
                offset,
                pageNumber,
                pageSize,
                paged,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductUsingGET(id: number, options?: any) {
            return ProductResourceApiFp(configuration).getProductUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary updateProduct
         * @param {Product} product product
         * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductUsingPUT(product: Product, usesOnPremiseApps?: boolean, options?: any) {
            return ProductResourceApiFp(configuration).updateProductUsingPUT(product, usesOnPremiseApps, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ProductResourceApi - object-oriented interface
 * @export
 * @class ProductResourceApi
 * @extends {BaseAPI}
 */
export class ProductResourceApi extends BaseAPI {
    /**
     *
     * @summary createProduct
     * @param {Product} product product
     * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public createProductUsingPOST(product: Product, usesOnPremiseApps?: boolean, options?: any) {
        return ProductResourceApiFp(this.configuration).createProductUsingPOST(product, usesOnPremiseApps, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public deleteProductUsingDELETE(id: number, options?: any) {
        return ProductResourceApiFp(this.configuration).deleteProductUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllLightProducts
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {string} [search] search
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public getAllLightProductsUsingGET(
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        search?: string,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return ProductResourceApiFp(this.configuration).getAllLightProductsUsingGET(
            offset,
            pageNumber,
            pageSize,
            paged,
            search,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllProducts
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public getAllProductsUsingGET(
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return ProductResourceApiFp(this.configuration).getAllProductsUsingGET(
            offset,
            pageNumber,
            pageSize,
            paged,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getApplicationsOfProduct
     * @param {number} id id
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public getApplicationsOfProductUsingGET(id: number, sorted?: boolean, unsorted?: boolean, options?: any) {
        return ProductResourceApiFp(this.configuration).getApplicationsOfProductUsingGET(id, sorted, unsorted, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getLightApplicationDTOByProductId
     * @param {number} id id
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public getLightApplicationDTOByProductIdUsingGET(
        id: number,
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return ProductResourceApiFp(this.configuration).getLightApplicationDTOByProductIdUsingGET(
            id,
            offset,
            pageNumber,
            pageSize,
            paged,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public getProductUsingGET(id: number, options?: any) {
        return ProductResourceApiFp(this.configuration).getProductUsingGET(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateProduct
     * @param {Product} product product
     * @param {boolean} [usesOnPremiseApps] usesOnPremiseApps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public updateProductUsingPUT(product: Product, usesOnPremiseApps?: boolean, options?: any) {
        return ProductResourceApiFp(this.configuration).updateProductUsingPUT(product, usesOnPremiseApps, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ProxyResourceApi - axios parameter creator
 * @export
 */
export const ProxyResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary doDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doDeleteUsingDELETE(options: any = {}): RequestArgs {
            const localVarPath = `/api/proxy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary doGet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doGetUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/proxy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary doPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doPostUsingPOST(options: any = {}): RequestArgs {
            const localVarPath = `/api/proxy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ProxyResourceApi - functional programming interface
 * @export
 */
export const ProxyResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary doDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doDeleteUsingDELETE(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ProxyResourceApiAxiosParamCreator(configuration).doDeleteUsingDELETE(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary doGet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doGetUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ProxyResourceApiAxiosParamCreator(configuration).doGetUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary doPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doPostUsingPOST(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ProxyResourceApiAxiosParamCreator(configuration).doPostUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ProxyResourceApi - factory interface
 * @export
 */
export const ProxyResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary doDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doDeleteUsingDELETE(options?: any) {
            return ProxyResourceApiFp(configuration).doDeleteUsingDELETE(options)(axios, basePath);
        },
        /**
         *
         * @summary doGet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doGetUsingGET(options?: any) {
            return ProxyResourceApiFp(configuration).doGetUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary doPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doPostUsingPOST(options?: any) {
            return ProxyResourceApiFp(configuration).doPostUsingPOST(options)(axios, basePath);
        }
    };
};

/**
 * ProxyResourceApi - object-oriented interface
 * @export
 * @class ProxyResourceApi
 * @extends {BaseAPI}
 */
export class ProxyResourceApi extends BaseAPI {
    /**
     *
     * @summary doDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyResourceApi
     */
    public doDeleteUsingDELETE(options?: any) {
        return ProxyResourceApiFp(this.configuration).doDeleteUsingDELETE(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary doGet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyResourceApi
     */
    public doGetUsingGET(options?: any) {
        return ProxyResourceApiFp(this.configuration).doGetUsingGET(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary doPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxyResourceApi
     */
    public doPostUsingPOST(options?: any) {
        return ProxyResourceApiFp(this.configuration).doPostUsingPOST(options)(this.axios, this.basePath);
    }
}

/**
 * RoleResourceApi - axios parameter creator
 * @export
 */
export const RoleResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createRole
         * @param {Role} role role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleUsingPOST(role: Role, options: any = {}): RequestArgs {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError(
                    'role',
                    'Required parameter role was null or undefined when calling createRoleUsingPOST.'
                );
            }
            const localVarPath = `/api/roles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Role' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(role !== undefined ? role : {})
                : role || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteRole
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteRoleUsingDELETE.'
                );
            }
            const localVarPath = `/api/roles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllRoles
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRolesUsingGET(sorted?: boolean, unsorted?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/roles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sorted !== undefined) {
                localVarQueryParameter['sorted'] = sorted;
            }

            if (unsorted !== undefined) {
                localVarQueryParameter['unsorted'] = unsorted;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getRole
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getRoleUsingGET.'
                );
            }
            const localVarPath = `/api/roles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateRole
         * @param {Role} role role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUsingPUT(role: Role, options: any = {}): RequestArgs {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError(
                    'role',
                    'Required parameter role was null or undefined when calling updateRoleUsingPUT.'
                );
            }
            const localVarPath = `/api/roles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Role' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(role !== undefined ? role : {})
                : role || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * RoleResourceApi - functional programming interface
 * @export
 */
export const RoleResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createRole
         * @param {Role} role role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleUsingPOST(
            role: Role,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role> {
            const localVarAxiosArgs = RoleResourceApiAxiosParamCreator(configuration).createRoleUsingPOST(
                role,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteRole
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = RoleResourceApiAxiosParamCreator(configuration).deleteRoleUsingDELETE(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllRoles
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRolesUsingGET(
            sorted?: boolean,
            unsorted?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>> {
            const localVarAxiosArgs = RoleResourceApiAxiosParamCreator(configuration).getAllRolesUsingGET(
                sorted,
                unsorted,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getRole
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUsingGET(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role> {
            const localVarAxiosArgs = RoleResourceApiAxiosParamCreator(configuration).getRoleUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateRole
         * @param {Role} role role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUsingPUT(
            role: Role,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role> {
            const localVarAxiosArgs = RoleResourceApiAxiosParamCreator(configuration).updateRoleUsingPUT(role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * RoleResourceApi - factory interface
 * @export
 */
export const RoleResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createRole
         * @param {Role} role role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleUsingPOST(role: Role, options?: any) {
            return RoleResourceApiFp(configuration).createRoleUsingPOST(role, options)(axios, basePath);
        },
        /**
         *
         * @summary deleteRole
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleUsingDELETE(id: number, options?: any) {
            return RoleResourceApiFp(configuration).deleteRoleUsingDELETE(id, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllRoles
         * @param {boolean} [sorted]
         * @param {boolean} [unsorted]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRolesUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
            return RoleResourceApiFp(configuration).getAllRolesUsingGET(sorted, unsorted, options)(axios, basePath);
        },
        /**
         *
         * @summary getRole
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleUsingGET(id: number, options?: any) {
            return RoleResourceApiFp(configuration).getRoleUsingGET(id, options)(axios, basePath);
        },
        /**
         *
         * @summary updateRole
         * @param {Role} role role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUsingPUT(role: Role, options?: any) {
            return RoleResourceApiFp(configuration).updateRoleUsingPUT(role, options)(axios, basePath);
        }
    };
};

/**
 * RoleResourceApi - object-oriented interface
 * @export
 * @class RoleResourceApi
 * @extends {BaseAPI}
 */
export class RoleResourceApi extends BaseAPI {
    /**
     *
     * @summary createRole
     * @param {Role} role role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleResourceApi
     */
    public createRoleUsingPOST(role: Role, options?: any) {
        return RoleResourceApiFp(this.configuration).createRoleUsingPOST(role, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteRole
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleResourceApi
     */
    public deleteRoleUsingDELETE(id: number, options?: any) {
        return RoleResourceApiFp(this.configuration).deleteRoleUsingDELETE(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllRoles
     * @param {boolean} [sorted]
     * @param {boolean} [unsorted]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleResourceApi
     */
    public getAllRolesUsingGET(sorted?: boolean, unsorted?: boolean, options?: any) {
        return RoleResourceApiFp(this.configuration).getAllRolesUsingGET(sorted, unsorted, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getRole
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleResourceApi
     */
    public getRoleUsingGET(id: number, options?: any) {
        return RoleResourceApiFp(this.configuration).getRoleUsingGET(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateRole
     * @param {Role} role role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleResourceApi
     */
    public updateRoleUsingPUT(role: Role, options?: any) {
        return RoleResourceApiFp(this.configuration).updateRoleUsingPUT(role, options)(this.axios, this.basePath);
    }
}

/**
 * SecuredEntityTypeResourceApi - axios parameter creator
 * @export
 */
export const SecuredEntityTypeResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getPermissionTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypesUsingGET1(options: any = {}): RequestArgs {
            const localVarPath = `/api/secured-entity-types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * SecuredEntityTypeResourceApi - functional programming interface
 * @export
 */
export const SecuredEntityTypeResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getPermissionTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypesUsingGET1(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = SecuredEntityTypeResourceApiAxiosParamCreator(
                configuration
            ).getPermissionTypesUsingGET1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * SecuredEntityTypeResourceApi - factory interface
 * @export
 */
export const SecuredEntityTypeResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getPermissionTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypesUsingGET1(options?: any) {
            return SecuredEntityTypeResourceApiFp(configuration).getPermissionTypesUsingGET1(options)(axios, basePath);
        }
    };
};

/**
 * SecuredEntityTypeResourceApi - object-oriented interface
 * @export
 * @class SecuredEntityTypeResourceApi
 * @extends {BaseAPI}
 */
export class SecuredEntityTypeResourceApi extends BaseAPI {
    /**
     *
     * @summary getPermissionTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecuredEntityTypeResourceApi
     */
    public getPermissionTypesUsingGET1(options?: any) {
        return SecuredEntityTypeResourceApiFp(this.configuration).getPermissionTypesUsingGET1(options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * ServiceImplementationResourceApi - axios parameter creator
 * @export
 */
export const ServiceImplementationResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createServiceImplementation
         * @param {number} serviceSectionId serviceSectionId
         * @param {ServiceImplementation} serviceImplementation serviceImplementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceImplementationUsingPOST(
            serviceSectionId: number,
            serviceImplementation: ServiceImplementation,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'serviceSectionId' is not null or undefined
            if (serviceSectionId === null || serviceSectionId === undefined) {
                throw new RequiredError(
                    'serviceSectionId',
                    'Required parameter serviceSectionId was null or undefined when calling createServiceImplementationUsingPOST.'
                );
            }
            // verify required parameter 'serviceImplementation' is not null or undefined
            if (serviceImplementation === null || serviceImplementation === undefined) {
                throw new RequiredError(
                    'serviceImplementation',
                    'Required parameter serviceImplementation was null or undefined when calling createServiceImplementationUsingPOST.'
                );
            }
            const localVarPath = `/api/service-sections/{serviceSectionId}/service-implementations`.replace(
                `{${'serviceSectionId'}}`,
                encodeURIComponent(String(serviceSectionId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ServiceImplementation' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(serviceImplementation !== undefined ? serviceImplementation : {})
                : serviceImplementation || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteServiceImplementation
         * @param {number} id id
         * @param {number} serviceSectionId serviceSectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceImplementationUsingDELETE(id: number, serviceSectionId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteServiceImplementationUsingDELETE.'
                );
            }
            // verify required parameter 'serviceSectionId' is not null or undefined
            if (serviceSectionId === null || serviceSectionId === undefined) {
                throw new RequiredError(
                    'serviceSectionId',
                    'Required parameter serviceSectionId was null or undefined when calling deleteServiceImplementationUsingDELETE.'
                );
            }
            const localVarPath = `/api/service-sections/{serviceSectionId}/service-implementations/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'serviceSectionId'}}`, encodeURIComponent(String(serviceSectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllServiceImplementationsByServiceSectionId
         * @param {number} serviceSectionId serviceSectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServiceImplementationsByServiceSectionIdUsingGET(
            serviceSectionId: number,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'serviceSectionId' is not null or undefined
            if (serviceSectionId === null || serviceSectionId === undefined) {
                throw new RequiredError(
                    'serviceSectionId',
                    'Required parameter serviceSectionId was null or undefined when calling getAllServiceImplementationsByServiceSectionIdUsingGET.'
                );
            }
            const localVarPath = `/api/service-sections/{serviceSectionId}/service-implementations`.replace(
                `{${'serviceSectionId'}}`,
                encodeURIComponent(String(serviceSectionId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateServiceImplementation
         * @param {number} serviceSectionId serviceSectionId
         * @param {ServiceImplementation} serviceImplementation serviceImplementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceImplementationUsingPUT(
            serviceSectionId: number,
            serviceImplementation: ServiceImplementation,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'serviceSectionId' is not null or undefined
            if (serviceSectionId === null || serviceSectionId === undefined) {
                throw new RequiredError(
                    'serviceSectionId',
                    'Required parameter serviceSectionId was null or undefined when calling updateServiceImplementationUsingPUT.'
                );
            }
            // verify required parameter 'serviceImplementation' is not null or undefined
            if (serviceImplementation === null || serviceImplementation === undefined) {
                throw new RequiredError(
                    'serviceImplementation',
                    'Required parameter serviceImplementation was null or undefined when calling updateServiceImplementationUsingPUT.'
                );
            }
            const localVarPath = `/api/service-sections/{serviceSectionId}/service-implementations`.replace(
                `{${'serviceSectionId'}}`,
                encodeURIComponent(String(serviceSectionId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ServiceImplementation' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(serviceImplementation !== undefined ? serviceImplementation : {})
                : serviceImplementation || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ServiceImplementationResourceApi - functional programming interface
 * @export
 */
export const ServiceImplementationResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createServiceImplementation
         * @param {number} serviceSectionId serviceSectionId
         * @param {ServiceImplementation} serviceImplementation serviceImplementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceImplementationUsingPOST(
            serviceSectionId: number,
            serviceImplementation: ServiceImplementation,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceImplementation> {
            const localVarAxiosArgs = ServiceImplementationResourceApiAxiosParamCreator(
                configuration
            ).createServiceImplementationUsingPOST(serviceSectionId, serviceImplementation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteServiceImplementation
         * @param {number} id id
         * @param {number} serviceSectionId serviceSectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceImplementationUsingDELETE(
            id: number,
            serviceSectionId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ServiceImplementationResourceApiAxiosParamCreator(
                configuration
            ).deleteServiceImplementationUsingDELETE(id, serviceSectionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllServiceImplementationsByServiceSectionId
         * @param {number} serviceSectionId serviceSectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServiceImplementationsByServiceSectionIdUsingGET(
            serviceSectionId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceImplementation>> {
            const localVarAxiosArgs = ServiceImplementationResourceApiAxiosParamCreator(
                configuration
            ).getAllServiceImplementationsByServiceSectionIdUsingGET(serviceSectionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateServiceImplementation
         * @param {number} serviceSectionId serviceSectionId
         * @param {ServiceImplementation} serviceImplementation serviceImplementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceImplementationUsingPUT(
            serviceSectionId: number,
            serviceImplementation: ServiceImplementation,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceImplementation> {
            const localVarAxiosArgs = ServiceImplementationResourceApiAxiosParamCreator(
                configuration
            ).updateServiceImplementationUsingPUT(serviceSectionId, serviceImplementation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ServiceImplementationResourceApi - factory interface
 * @export
 */
export const ServiceImplementationResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createServiceImplementation
         * @param {number} serviceSectionId serviceSectionId
         * @param {ServiceImplementation} serviceImplementation serviceImplementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceImplementationUsingPOST(
            serviceSectionId: number,
            serviceImplementation: ServiceImplementation,
            options?: any
        ) {
            return ServiceImplementationResourceApiFp(configuration).createServiceImplementationUsingPOST(
                serviceSectionId,
                serviceImplementation,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary deleteServiceImplementation
         * @param {number} id id
         * @param {number} serviceSectionId serviceSectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceImplementationUsingDELETE(id: number, serviceSectionId: number, options?: any) {
            return ServiceImplementationResourceApiFp(configuration).deleteServiceImplementationUsingDELETE(
                id,
                serviceSectionId,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getAllServiceImplementationsByServiceSectionId
         * @param {number} serviceSectionId serviceSectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServiceImplementationsByServiceSectionIdUsingGET(serviceSectionId: number, options?: any) {
            return ServiceImplementationResourceApiFp(
                configuration
            ).getAllServiceImplementationsByServiceSectionIdUsingGET(serviceSectionId, options)(axios, basePath);
        },
        /**
         *
         * @summary updateServiceImplementation
         * @param {number} serviceSectionId serviceSectionId
         * @param {ServiceImplementation} serviceImplementation serviceImplementation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceImplementationUsingPUT(
            serviceSectionId: number,
            serviceImplementation: ServiceImplementation,
            options?: any
        ) {
            return ServiceImplementationResourceApiFp(configuration).updateServiceImplementationUsingPUT(
                serviceSectionId,
                serviceImplementation,
                options
            )(axios, basePath);
        }
    };
};

/**
 * ServiceImplementationResourceApi - object-oriented interface
 * @export
 * @class ServiceImplementationResourceApi
 * @extends {BaseAPI}
 */
export class ServiceImplementationResourceApi extends BaseAPI {
    /**
     *
     * @summary createServiceImplementation
     * @param {number} serviceSectionId serviceSectionId
     * @param {ServiceImplementation} serviceImplementation serviceImplementation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceImplementationResourceApi
     */
    public createServiceImplementationUsingPOST(
        serviceSectionId: number,
        serviceImplementation: ServiceImplementation,
        options?: any
    ) {
        return ServiceImplementationResourceApiFp(this.configuration).createServiceImplementationUsingPOST(
            serviceSectionId,
            serviceImplementation,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteServiceImplementation
     * @param {number} id id
     * @param {number} serviceSectionId serviceSectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceImplementationResourceApi
     */
    public deleteServiceImplementationUsingDELETE(id: number, serviceSectionId: number, options?: any) {
        return ServiceImplementationResourceApiFp(this.configuration).deleteServiceImplementationUsingDELETE(
            id,
            serviceSectionId,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllServiceImplementationsByServiceSectionId
     * @param {number} serviceSectionId serviceSectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceImplementationResourceApi
     */
    public getAllServiceImplementationsByServiceSectionIdUsingGET(serviceSectionId: number, options?: any) {
        return ServiceImplementationResourceApiFp(
            this.configuration
        ).getAllServiceImplementationsByServiceSectionIdUsingGET(serviceSectionId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateServiceImplementation
     * @param {number} serviceSectionId serviceSectionId
     * @param {ServiceImplementation} serviceImplementation serviceImplementation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceImplementationResourceApi
     */
    public updateServiceImplementationUsingPUT(
        serviceSectionId: number,
        serviceImplementation: ServiceImplementation,
        options?: any
    ) {
        return ServiceImplementationResourceApiFp(this.configuration).updateServiceImplementationUsingPUT(
            serviceSectionId,
            serviceImplementation,
            options
        )(this.axios, this.basePath);
    }
}

/**
 * ServiceSectionResourceApi - axios parameter creator
 * @export
 */
export const ServiceSectionResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createServiceSection
         * @param {ServiceSection} serviceSection serviceSection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceSectionUsingPOST(serviceSection: ServiceSection, options: any = {}): RequestArgs {
            // verify required parameter 'serviceSection' is not null or undefined
            if (serviceSection === null || serviceSection === undefined) {
                throw new RequiredError(
                    'serviceSection',
                    'Required parameter serviceSection was null or undefined when calling createServiceSectionUsingPOST.'
                );
            }
            const localVarPath = `/api/service-sections`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ServiceSection' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(serviceSection !== undefined ? serviceSection : {})
                : serviceSection || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteServiceSection
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceSectionUsingDELETE(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteServiceSectionUsingDELETE.'
                );
            }
            const localVarPath = `/api/service-sections/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllServiceSections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServiceSectionsUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/service-sections`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateServiceSection
         * @param {ServiceSection} serviceSection serviceSection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceSectionUsingPUT(serviceSection: ServiceSection, options: any = {}): RequestArgs {
            // verify required parameter 'serviceSection' is not null or undefined
            if (serviceSection === null || serviceSection === undefined) {
                throw new RequiredError(
                    'serviceSection',
                    'Required parameter serviceSection was null or undefined when calling updateServiceSectionUsingPUT.'
                );
            }
            const localVarPath = `/api/service-sections`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'ServiceSection' !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(serviceSection !== undefined ? serviceSection : {})
                : serviceSection || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ServiceSectionResourceApi - functional programming interface
 * @export
 */
export const ServiceSectionResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createServiceSection
         * @param {ServiceSection} serviceSection serviceSection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceSectionUsingPOST(
            serviceSection: ServiceSection,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSection> {
            const localVarAxiosArgs = ServiceSectionResourceApiAxiosParamCreator(
                configuration
            ).createServiceSectionUsingPOST(serviceSection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteServiceSection
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceSectionUsingDELETE(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ServiceSectionResourceApiAxiosParamCreator(
                configuration
            ).deleteServiceSectionUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllServiceSections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServiceSectionsUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceSection>> {
            const localVarAxiosArgs = ServiceSectionResourceApiAxiosParamCreator(
                configuration
            ).getAllServiceSectionsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateServiceSection
         * @param {ServiceSection} serviceSection serviceSection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceSectionUsingPUT(
            serviceSection: ServiceSection,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSection> {
            const localVarAxiosArgs = ServiceSectionResourceApiAxiosParamCreator(
                configuration
            ).updateServiceSectionUsingPUT(serviceSection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ServiceSectionResourceApi - factory interface
 * @export
 */
export const ServiceSectionResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createServiceSection
         * @param {ServiceSection} serviceSection serviceSection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceSectionUsingPOST(serviceSection: ServiceSection, options?: any) {
            return ServiceSectionResourceApiFp(configuration).createServiceSectionUsingPOST(serviceSection, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary deleteServiceSection
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceSectionUsingDELETE(id: number, options?: any) {
            return ServiceSectionResourceApiFp(configuration).deleteServiceSectionUsingDELETE(id, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary getAllServiceSections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllServiceSectionsUsingGET(options?: any) {
            return ServiceSectionResourceApiFp(configuration).getAllServiceSectionsUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary updateServiceSection
         * @param {ServiceSection} serviceSection serviceSection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceSectionUsingPUT(serviceSection: ServiceSection, options?: any) {
            return ServiceSectionResourceApiFp(configuration).updateServiceSectionUsingPUT(serviceSection, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * ServiceSectionResourceApi - object-oriented interface
 * @export
 * @class ServiceSectionResourceApi
 * @extends {BaseAPI}
 */
export class ServiceSectionResourceApi extends BaseAPI {
    /**
     *
     * @summary createServiceSection
     * @param {ServiceSection} serviceSection serviceSection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSectionResourceApi
     */
    public createServiceSectionUsingPOST(serviceSection: ServiceSection, options?: any) {
        return ServiceSectionResourceApiFp(this.configuration).createServiceSectionUsingPOST(serviceSection, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteServiceSection
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSectionResourceApi
     */
    public deleteServiceSectionUsingDELETE(id: number, options?: any) {
        return ServiceSectionResourceApiFp(this.configuration).deleteServiceSectionUsingDELETE(id, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getAllServiceSections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSectionResourceApi
     */
    public getAllServiceSectionsUsingGET(options?: any) {
        return ServiceSectionResourceApiFp(this.configuration).getAllServiceSectionsUsingGET(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateServiceSection
     * @param {ServiceSection} serviceSection serviceSection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSectionResourceApi
     */
    public updateServiceSectionUsingPUT(serviceSection: ServiceSection, options?: any) {
        return ServiceSectionResourceApiFp(this.configuration).updateServiceSectionUsingPUT(serviceSection, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * StaticPictureResourceApi - axios parameter creator
 * @export
 */
export const StaticPictureResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getStaticPicture
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticPictureUsingGET(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getStaticPictureUsingGET.'
                );
            }
            const localVarPath = `/static/picture/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * StaticPictureResourceApi - functional programming interface
 * @export
 */
export const StaticPictureResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getStaticPicture
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticPictureUsingGET(
            id: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = StaticPictureResourceApiAxiosParamCreator(configuration).getStaticPictureUsingGET(
                id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * StaticPictureResourceApi - factory interface
 * @export
 */
export const StaticPictureResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getStaticPicture
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaticPictureUsingGET(id: number, options?: any) {
            return StaticPictureResourceApiFp(configuration).getStaticPictureUsingGET(id, options)(axios, basePath);
        }
    };
};

/**
 * StaticPictureResourceApi - object-oriented interface
 * @export
 * @class StaticPictureResourceApi
 * @extends {BaseAPI}
 */
export class StaticPictureResourceApi extends BaseAPI {
    /**
     *
     * @summary getStaticPicture
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticPictureResourceApi
     */
    public getStaticPictureUsingGET(id: number, options?: any) {
        return StaticPictureResourceApiFp(this.configuration).getStaticPictureUsingGET(id, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * SubnetResourceApi - axios parameter creator
 * @export
 */
export const SubnetResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAvailableSubnets
         * @param {string} stage stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableSubnetsUsingGET(stage: string, options: any = {}): RequestArgs {
            // verify required parameter 'stage' is not null or undefined
            if (stage === null || stage === undefined) {
                throw new RequiredError(
                    'stage',
                    'Required parameter stage was null or undefined when calling getAvailableSubnetsUsingGET.'
                );
            }
            const localVarPath = `/api/subnets/{stage}/available`.replace(
                `{${'stage'}}`,
                encodeURIComponent(String(stage))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * SubnetResourceApi - functional programming interface
 * @export
 */
export const SubnetResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary getAvailableSubnets
         * @param {string} stage stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableSubnetsUsingGET(
            stage: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subnet>> {
            const localVarAxiosArgs = SubnetResourceApiAxiosParamCreator(configuration).getAvailableSubnetsUsingGET(
                stage,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * SubnetResourceApi - factory interface
 * @export
 */
export const SubnetResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary getAvailableSubnets
         * @param {string} stage stage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableSubnetsUsingGET(stage: string, options?: any) {
            return SubnetResourceApiFp(configuration).getAvailableSubnetsUsingGET(stage, options)(axios, basePath);
        }
    };
};

/**
 * SubnetResourceApi - object-oriented interface
 * @export
 * @class SubnetResourceApi
 * @extends {BaseAPI}
 */
export class SubnetResourceApi extends BaseAPI {
    /**
     *
     * @summary getAvailableSubnets
     * @param {string} stage stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetResourceApi
     */
    public getAvailableSubnetsUsingGET(stage: string, options?: any) {
        return SubnetResourceApiFp(this.configuration).getAvailableSubnetsUsingGET(stage, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * TeamResourceApi - axios parameter creator
 * @export
 */
export const TeamResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createTeam
         * @param {number} productId productId
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamUsingPOST(productId: number, team: Team, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling createTeamUsingPOST.'
                );
            }
            // verify required parameter 'team' is not null or undefined
            if (team === null || team === undefined) {
                throw new RequiredError(
                    'team',
                    'Required parameter team was null or undefined when calling createTeamUsingPOST.'
                );
            }
            const localVarPath = `/api/products/{productId}/team`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Team' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(team !== undefined ? team : {})
                : team || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteTeam
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamUsingDELETE(id: number, productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling deleteTeamUsingDELETE.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling deleteTeamUsingDELETE.'
                );
            }
            const localVarPath = `/api/products/{productId}/team/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getTeamOfProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamOfProductUsingGET(productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getTeamOfProductUsingGET.'
                );
            }
            const localVarPath = `/api/products/{productId}/team`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getTeam
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamUsingGET(id: number, productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    'id',
                    'Required parameter id was null or undefined when calling getTeamUsingGET.'
                );
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling getTeamUsingGET.'
                );
            }
            const localVarPath = `/api/products/{productId}/team/teams/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateTeam
         * @param {number} productId productId
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamUsingPUT(productId: number, team: Team, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling updateTeamUsingPUT.'
                );
            }
            // verify required parameter 'team' is not null or undefined
            if (team === null || team === undefined) {
                throw new RequiredError(
                    'team',
                    'Required parameter team was null or undefined when calling updateTeamUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{productId}/team`.replace(
                `{${'productId'}}`,
                encodeURIComponent(String(productId))
            );
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'Team' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(team !== undefined ? team : {})
                : team || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * TeamResourceApi - functional programming interface
 * @export
 */
export const TeamResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createTeam
         * @param {number} productId productId
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamUsingPOST(
            productId: number,
            team: Team,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team> {
            const localVarAxiosArgs = TeamResourceApiAxiosParamCreator(configuration).createTeamUsingPOST(
                productId,
                team,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteTeam
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamUsingDELETE(
            id: number,
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = TeamResourceApiAxiosParamCreator(configuration).deleteTeamUsingDELETE(
                id,
                productId,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getTeamOfProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamOfProductUsingGET(
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team> {
            const localVarAxiosArgs = TeamResourceApiAxiosParamCreator(configuration).getTeamOfProductUsingGET(
                productId,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getTeam
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamUsingGET(
            id: number,
            productId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team> {
            const localVarAxiosArgs = TeamResourceApiAxiosParamCreator(configuration).getTeamUsingGET(
                id,
                productId,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateTeam
         * @param {number} productId productId
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamUsingPUT(
            productId: number,
            team: Team,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team> {
            const localVarAxiosArgs = TeamResourceApiAxiosParamCreator(configuration).updateTeamUsingPUT(
                productId,
                team,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * TeamResourceApi - factory interface
 * @export
 */
export const TeamResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createTeam
         * @param {number} productId productId
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamUsingPOST(productId: number, team: Team, options?: any) {
            return TeamResourceApiFp(configuration).createTeamUsingPOST(productId, team, options)(axios, basePath);
        },
        /**
         *
         * @summary deleteTeam
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamUsingDELETE(id: number, productId: number, options?: any) {
            return TeamResourceApiFp(configuration).deleteTeamUsingDELETE(id, productId, options)(axios, basePath);
        },
        /**
         *
         * @summary getTeamOfProduct
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamOfProductUsingGET(productId: number, options?: any) {
            return TeamResourceApiFp(configuration).getTeamOfProductUsingGET(productId, options)(axios, basePath);
        },
        /**
         *
         * @summary getTeam
         * @param {number} id id
         * @param {number} productId productId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamUsingGET(id: number, productId: number, options?: any) {
            return TeamResourceApiFp(configuration).getTeamUsingGET(id, productId, options)(axios, basePath);
        },
        /**
         *
         * @summary updateTeam
         * @param {number} productId productId
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamUsingPUT(productId: number, team: Team, options?: any) {
            return TeamResourceApiFp(configuration).updateTeamUsingPUT(productId, team, options)(axios, basePath);
        }
    };
};

/**
 * TeamResourceApi - object-oriented interface
 * @export
 * @class TeamResourceApi
 * @extends {BaseAPI}
 */
export class TeamResourceApi extends BaseAPI {
    /**
     *
     * @summary createTeam
     * @param {number} productId productId
     * @param {Team} team team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamResourceApi
     */
    public createTeamUsingPOST(productId: number, team: Team, options?: any) {
        return TeamResourceApiFp(this.configuration).createTeamUsingPOST(productId, team, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary deleteTeam
     * @param {number} id id
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamResourceApi
     */
    public deleteTeamUsingDELETE(id: number, productId: number, options?: any) {
        return TeamResourceApiFp(this.configuration).deleteTeamUsingDELETE(id, productId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getTeamOfProduct
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamResourceApi
     */
    public getTeamOfProductUsingGET(productId: number, options?: any) {
        return TeamResourceApiFp(this.configuration).getTeamOfProductUsingGET(productId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary getTeam
     * @param {number} id id
     * @param {number} productId productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamResourceApi
     */
    public getTeamUsingGET(id: number, productId: number, options?: any) {
        return TeamResourceApiFp(this.configuration).getTeamUsingGET(id, productId, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary updateTeam
     * @param {number} productId productId
     * @param {Team} team team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamResourceApi
     */
    public updateTeamUsingPUT(productId: number, team: Team, options?: any) {
        return TeamResourceApiFp(this.configuration).updateTeamUsingPUT(productId, team, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * TeamRoleResourceApi - axios parameter creator
 * @export
 */
export const TeamRoleResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary assignWriteRoleToUser
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignWriteRoleToUserUsingPUT(productId: number, userId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling assignWriteRoleToUserUsingPUT.'
                );
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    'userId',
                    'Required parameter userId was null or undefined when calling assignWriteRoleToUserUsingPUT.'
                );
            }
            const localVarPath = `/api/products/{productId}/team/users/{userId}/admin`
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)))
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary revokeWriteRoleFromUser
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeWriteRoleFromUserUsingDELETE(productId: number, userId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError(
                    'productId',
                    'Required parameter productId was null or undefined when calling revokeWriteRoleFromUserUsingDELETE.'
                );
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    'userId',
                    'Required parameter userId was null or undefined when calling revokeWriteRoleFromUserUsingDELETE.'
                );
            }
            const localVarPath = `/api/products/{productId}/team/users/{userId}/admin`
                .replace(`{${'productId'}}`, encodeURIComponent(String(productId)))
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * TeamRoleResourceApi - functional programming interface
 * @export
 */
export const TeamRoleResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary assignWriteRoleToUser
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignWriteRoleToUserUsingPUT(
            productId: number,
            userId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = TeamRoleResourceApiAxiosParamCreator(configuration).assignWriteRoleToUserUsingPUT(
                productId,
                userId,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary revokeWriteRoleFromUser
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeWriteRoleFromUserUsingDELETE(
            productId: number,
            userId: number,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = TeamRoleResourceApiAxiosParamCreator(
                configuration
            ).revokeWriteRoleFromUserUsingDELETE(productId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * TeamRoleResourceApi - factory interface
 * @export
 */
export const TeamRoleResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary assignWriteRoleToUser
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignWriteRoleToUserUsingPUT(productId: number, userId: number, options?: any) {
            return TeamRoleResourceApiFp(configuration).assignWriteRoleToUserUsingPUT(productId, userId, options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary revokeWriteRoleFromUser
         * @param {number} productId productId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeWriteRoleFromUserUsingDELETE(productId: number, userId: number, options?: any) {
            return TeamRoleResourceApiFp(configuration).revokeWriteRoleFromUserUsingDELETE(productId, userId, options)(
                axios,
                basePath
            );
        }
    };
};

/**
 * TeamRoleResourceApi - object-oriented interface
 * @export
 * @class TeamRoleResourceApi
 * @extends {BaseAPI}
 */
export class TeamRoleResourceApi extends BaseAPI {
    /**
     *
     * @summary assignWriteRoleToUser
     * @param {number} productId productId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamRoleResourceApi
     */
    public assignWriteRoleToUserUsingPUT(productId: number, userId: number, options?: any) {
        return TeamRoleResourceApiFp(this.configuration).assignWriteRoleToUserUsingPUT(productId, userId, options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary revokeWriteRoleFromUser
     * @param {number} productId productId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamRoleResourceApi
     */
    public revokeWriteRoleFromUserUsingDELETE(productId: number, userId: number, options?: any) {
        return TeamRoleResourceApiFp(this.configuration).revokeWriteRoleFromUserUsingDELETE(productId, userId, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * UserJwtControllerApi - axios parameter creator
 * @export
 */
export const UserJwtControllerApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary authorize
         * @param {LoginVM} loginVM loginVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeUsingPOST(loginVM: LoginVM, options: any = {}): RequestArgs {
            // verify required parameter 'loginVM' is not null or undefined
            if (loginVM === null || loginVM === undefined) {
                throw new RequiredError(
                    'loginVM',
                    'Required parameter loginVM was null or undefined when calling authorizeUsingPOST.'
                );
            }
            const localVarPath = `/api/authenticate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'LoginVM' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(loginVM !== undefined ? loginVM : {})
                : loginVM || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * UserJwtControllerApi - functional programming interface
 * @export
 */
export const UserJwtControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary authorize
         * @param {LoginVM} loginVM loginVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeUsingPOST(
            loginVM: LoginVM,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTToken> {
            const localVarAxiosArgs = UserJwtControllerApiAxiosParamCreator(configuration).authorizeUsingPOST(
                loginVM,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * UserJwtControllerApi - factory interface
 * @export
 */
export const UserJwtControllerApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary authorize
         * @param {LoginVM} loginVM loginVM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeUsingPOST(loginVM: LoginVM, options?: any) {
            return UserJwtControllerApiFp(configuration).authorizeUsingPOST(loginVM, options)(axios, basePath);
        }
    };
};

/**
 * UserJwtControllerApi - object-oriented interface
 * @export
 * @class UserJwtControllerApi
 * @extends {BaseAPI}
 */
export class UserJwtControllerApi extends BaseAPI {
    /**
     *
     * @summary authorize
     * @param {LoginVM} loginVM loginVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserJwtControllerApi
     */
    public authorizeUsingPOST(loginVM: LoginVM, options?: any) {
        return UserJwtControllerApiFp(this.configuration).authorizeUsingPOST(loginVM, options)(
            this.axios,
            this.basePath
        );
    }
}

/**
 * UserResourceApi - axios parameter creator
 * @export
 */
export const UserResourceApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createUser
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(userDTO: UserDTO, options: any = {}): RequestArgs {
            // verify required parameter 'userDTO' is not null or undefined
            if (userDTO === null || userDTO === undefined) {
                throw new RequiredError(
                    'userDTO',
                    'Required parameter userDTO was null or undefined when calling createUserUsingPOST.'
                );
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'UserDTO' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(userDTO !== undefined ? userDTO : {})
                : userDTO || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary deleteUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingDELETE(login: string, options: any = {}): RequestArgs {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError(
                    'login',
                    'Required parameter login was null or undefined when calling deleteUserUsingDELETE.'
                );
            }
            const localVarPath = `/api/users/{login}`.replace(`{${'login'}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getAllUsers
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options: any = {}
        ): RequestArgs {
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paged !== undefined) {
                localVarQueryParameter['paged'] = paged;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortSorted !== undefined) {
                localVarQueryParameter['sort.sorted'] = sortSorted;
            }

            if (sortUnsorted !== undefined) {
                localVarQueryParameter['sort.unsorted'] = sortUnsorted;
            }

            if (unpaged !== undefined) {
                localVarQueryParameter['unpaged'] = unpaged;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary getUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET(login: string, options: any = {}): RequestArgs {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError(
                    'login',
                    'Required parameter login was null or undefined when calling getUserUsingGET.'
                );
            }
            const localVarPath = `/api/users/{login}`.replace(`{${'login'}}`, encodeURIComponent(String(login)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary retrievesTheCurrentLoggedInUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheCurrentLoggedInUserUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary retrievesTheCurrentLoggedInUsersPermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheCurrentLoggedInUsersPermissionsUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/users/me/permissions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @summary updateUser
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPUT(userDTO: UserDTO, options: any = {}): RequestArgs {
            // verify required parameter 'userDTO' is not null or undefined
            if (userDTO === null || userDTO === undefined) {
                throw new RequiredError(
                    'userDTO',
                    'Required parameter userDTO was null or undefined when calling updateUserUsingPUT.'
                );
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                <any>'UserDTO' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(userDTO !== undefined ? userDTO : {})
                : userDTO || '';

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * UserResourceApi - functional programming interface
 * @export
 */
export const UserResourceApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary createUser
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(
            userDTO: UserDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserResourceApiAxiosParamCreator(configuration).createUserUsingPOST(
                userDTO,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary deleteUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingDELETE(
            login: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = UserResourceApiAxiosParamCreator(configuration).deleteUserUsingDELETE(
                login,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getAllUsers
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>> {
            const localVarAxiosArgs = UserResourceApiAxiosParamCreator(configuration).getAllUsersUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                search,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary getUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET(
            login: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO> {
            const localVarAxiosArgs = UserResourceApiAxiosParamCreator(configuration).getUserUsingGET(login, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary retrievesTheCurrentLoggedInUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheCurrentLoggedInUserUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserResourceApiAxiosParamCreator(
                configuration
            ).retrievesTheCurrentLoggedInUserUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary retrievesTheCurrentLoggedInUsersPermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheCurrentLoggedInUsersPermissionsUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntityPermission>> {
            const localVarAxiosArgs = UserResourceApiAxiosParamCreator(
                configuration
            ).retrievesTheCurrentLoggedInUsersPermissionsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary updateUser
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPUT(
            userDTO: UserDTO,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO> {
            const localVarAxiosArgs = UserResourceApiAxiosParamCreator(configuration).updateUserUsingPUT(
                userDTO,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * UserResourceApi - factory interface
 * @export
 */
export const UserResourceApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary createUser
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(userDTO: UserDTO, options?: any) {
            return UserResourceApiFp(configuration).createUserUsingPOST(userDTO, options)(axios, basePath);
        },
        /**
         *
         * @summary deleteUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsingDELETE(login: string, options?: any) {
            return UserResourceApiFp(configuration).deleteUserUsingDELETE(login, options)(axios, basePath);
        },
        /**
         *
         * @summary getAllUsers
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {boolean} [paged]
         * @param {string} [search] search
         * @param {boolean} [sortSorted]
         * @param {boolean} [sortUnsorted]
         * @param {boolean} [unpaged]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET(
            offset?: number,
            pageNumber?: number,
            pageSize?: number,
            paged?: boolean,
            search?: string,
            sortSorted?: boolean,
            sortUnsorted?: boolean,
            unpaged?: boolean,
            options?: any
        ) {
            return UserResourceApiFp(configuration).getAllUsersUsingGET(
                offset,
                pageNumber,
                pageSize,
                paged,
                search,
                sortSorted,
                sortUnsorted,
                unpaged,
                options
            )(axios, basePath);
        },
        /**
         *
         * @summary getUser
         * @param {string} login login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsingGET(login: string, options?: any) {
            return UserResourceApiFp(configuration).getUserUsingGET(login, options)(axios, basePath);
        },
        /**
         *
         * @summary retrievesTheCurrentLoggedInUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheCurrentLoggedInUserUsingGET(options?: any) {
            return UserResourceApiFp(configuration).retrievesTheCurrentLoggedInUserUsingGET(options)(axios, basePath);
        },
        /**
         *
         * @summary retrievesTheCurrentLoggedInUsersPermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrievesTheCurrentLoggedInUsersPermissionsUsingGET(options?: any) {
            return UserResourceApiFp(configuration).retrievesTheCurrentLoggedInUsersPermissionsUsingGET(options)(
                axios,
                basePath
            );
        },
        /**
         *
         * @summary updateUser
         * @param {UserDTO} userDTO userDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPUT(userDTO: UserDTO, options?: any) {
            return UserResourceApiFp(configuration).updateUserUsingPUT(userDTO, options)(axios, basePath);
        }
    };
};

/**
 * UserResourceApi - object-oriented interface
 * @export
 * @class UserResourceApi
 * @extends {BaseAPI}
 */
export class UserResourceApi extends BaseAPI {
    /**
     *
     * @summary createUser
     * @param {UserDTO} userDTO userDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public createUserUsingPOST(userDTO: UserDTO, options?: any) {
        return UserResourceApiFp(this.configuration).createUserUsingPOST(userDTO, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary deleteUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public deleteUserUsingDELETE(login: string, options?: any) {
        return UserResourceApiFp(this.configuration).deleteUserUsingDELETE(login, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary getAllUsers
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {boolean} [paged]
     * @param {string} [search] search
     * @param {boolean} [sortSorted]
     * @param {boolean} [sortUnsorted]
     * @param {boolean} [unpaged]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public getAllUsersUsingGET(
        offset?: number,
        pageNumber?: number,
        pageSize?: number,
        paged?: boolean,
        search?: string,
        sortSorted?: boolean,
        sortUnsorted?: boolean,
        unpaged?: boolean,
        options?: any
    ) {
        return UserResourceApiFp(this.configuration).getAllUsersUsingGET(
            offset,
            pageNumber,
            pageSize,
            paged,
            search,
            sortSorted,
            sortUnsorted,
            unpaged,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @summary getUser
     * @param {string} login login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public getUserUsingGET(login: string, options?: any) {
        return UserResourceApiFp(this.configuration).getUserUsingGET(login, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary retrievesTheCurrentLoggedInUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public retrievesTheCurrentLoggedInUserUsingGET(options?: any) {
        return UserResourceApiFp(this.configuration).retrievesTheCurrentLoggedInUserUsingGET(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary retrievesTheCurrentLoggedInUsersPermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public retrievesTheCurrentLoggedInUsersPermissionsUsingGET(options?: any) {
        return UserResourceApiFp(this.configuration).retrievesTheCurrentLoggedInUsersPermissionsUsingGET(options)(
            this.axios,
            this.basePath
        );
    }

    /**
     *
     * @summary updateUser
     * @param {UserDTO} userDTO userDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public updateUserUsingPUT(userDTO: UserDTO, options?: any) {
        return UserResourceApiFp(this.configuration).updateUserUsingPUT(userDTO, options)(this.axios, this.basePath);
    }
}

/**
 * WebMvcLinksHandlerApi - axios parameter creator
 * @export
 */
export const WebMvcLinksHandlerApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/management`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * WebMvcLinksHandlerApi - functional programming interface
 * @export
 */
export const WebMvcLinksHandlerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET(
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: { [key: string]: Link } }> {
            const localVarAxiosArgs = WebMvcLinksHandlerApiAxiosParamCreator(configuration).linksUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * WebMvcLinksHandlerApi - factory interface
 * @export
 */
export const WebMvcLinksHandlerApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @summary links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linksUsingGET(options?: any) {
            return WebMvcLinksHandlerApiFp(configuration).linksUsingGET(options)(axios, basePath);
        }
    };
};

/**
 * WebMvcLinksHandlerApi - object-oriented interface
 * @export
 * @class WebMvcLinksHandlerApi
 * @extends {BaseAPI}
 */
export class WebMvcLinksHandlerApi extends BaseAPI {
    /**
     *
     * @summary links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebMvcLinksHandlerApi
     */
    public linksUsingGET(options?: any) {
        return WebMvcLinksHandlerApiFp(this.configuration).linksUsingGET(options)(this.axios, this.basePath);
    }
}
